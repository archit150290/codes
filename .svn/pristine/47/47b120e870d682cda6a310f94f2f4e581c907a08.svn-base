<?php

class ApiController extends AppController {

    public $components = array('RequestHandler', "Auth", "Common", "Image");
    var $uses = array("User", "ApiSession", "Department", "Organization", "UserOrganization", "Invite", "Email", "Entity", "OrgCoreValues",
        "OrgDepartments", "OrgJobTitles", "Endorsement", "Country", "State", "DefaultOrg", "Verification", "Subscription", "EndorseAttachment",
        "EndorseCoreValue", "LoginStatistics", 'OrgRequests', 'EndorsementLike', 'EndorseReplies', 'Badge', 'PasswordCode', "GlobalSetting", "Topendorser", "globalsettingFaq", "Emojis");

    public function beforeFilter() {

        parent::beforeFilter();

        $this->Auth->allow("register", "login", "logout", "getDefaultDepartments", "getDefaultJobTitles", "getOrganization", "getDefaultSkills", "getSubOrganizations", "getProfile", "saveprofile", "getPredefinedValues", "getDefaultHobbies", "isValidQRCode", "saveOrganization", "endorse", "saveEndorseAttachments", "getCountryStateList", "saveprofileorg", "getOrgoption", "saveOrgoption", "sendVerification", "joinOrganization", "searchInOrganization", "getEndorseList", "endorsedetails", "endorselike", "endorsereply", "mySearchInOrganization", "switchGroup", "getorganizationuser", "userOrgAdminAccessAction", "getjoinrequestUser", "acceptorgrequest", "endorsestats", "leaderboard", "forgotPassword", "resetPassword", "changepassword", "userOrgSearch", "getVariousOrganizationData", "termsConditions", "getTimelyUpdates", "recoverusername", "endorsementbydept", "endorsementbyday", "endorsementbycorevalues", "faq", "sendtermconditions", "getEmojis", "updateLastAppUsedTime", "renewSession", "endorsementbyjobtitles", "endorsementbyentity");
    }

    public function sendVerification() {
        if ($this->request->is('post')) {
            $this->Auth->logout();

            if (!filter_var($this->request->data['email'], FILTER_VALIDATE_EMAIL)) {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Invalid email address. Please check."),
                    '_serialize' => array('result')
                ));
                return;
            }

            if ($this->User->email_registered($this->request->data)) {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "The email you entered is already registered.", 'isRegistered' => true),
                    '_serialize' => array('result')
                ));
                return;
            }

            $verificationRecord = $this->Verification->find("first", array("conditions" => array("email" => $this->request->data['email'])));

            if (!empty($verificationRecord)) {
                $this->request->data['id'] = $verificationRecord['Verification']['id'];
                $this->request->data['email_sent'] = 0;
                $verificationCode = $verificationRecord['Verification']['verification_code'];
            } else {
                $verificationCode = $this->request->data['verification_code'] = substr(md5(md5(uniqid() . $this->request->data['email'] . time())), 0, 5);
            }

            $this->Verification->set($this->request->data);
            if ($this->Verification->validates()) {
                if ($this->Verification->save()) {
                    //$subject = "nDorse - Verify email";
                    //$template = "verification";
                    //$viewVars = array("verification_code" => $verificationCode);
                    //$this->Common->sendEmail($this->request->data['email'], $subject, $template, $viewVars);
//                    exec("nohup wget " . Router::url('/', true) . "/cron/verificationEmails > /dev/null 2>&1 &");
                    exec("wget -bqO- " . Router::url('/', true) . "/cron/verificationEmails &> /dev/null");
//                    exec( "php ".WWW_ROOT."cron_scheduler.php /cron/verificationEmails/ > /dev/null &");
                    $this->set(array(
                        'result' => array("status" => true
                            , "msg" => "Verification email sent successfully."),
                        '_serialize' => array('result')
                    ));
                } else {
                    $this->set(array(
                        'result' => array("status" => false
                            , "msg" => "Could not send verification email now. Please try again."),
                        '_serialize' => array('result')
                    ));
                }
            } else {
                $errors = $this->Verification->validationErrors;
                $errorsArray = array();

                foreach ($errors as $key => $error) {
                    $errorsArray[$key] = $error[0];
                }

                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Errors!", 'errors' => $errorsArray),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Get call not allowed."),
                '_serialize' => array('result')
            ));
        }
    }

    public function register() {
        if ($this->request->is('post')) {
            $this->Auth->logout();

            $sourceArray = array("fb" => "facebook", "gplus" => "google plus", "lin" => "linkedin");

            $userExist = $this->User->find('first', array('conditions' => array('User.email' => $this->request->data['email'])));

            if (!isset($this->request->data['source']) || empty($this->request->data['source'])) {
                $this->request->data['source'] = "email";
            }


//            if ($this->request->data['source'] == 'email' && !empty($userExist)) {
            if (!empty($userExist)) {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "This email is already registered.", 'isRegistered' => true),
                    '_serialize' => array('result')
                ));
                return;
            }
//            elseif (!empty($userExist)) {
//                //print_r($userExist);
//                //echo $this->request->data['source'] . '_id';
//                //echo $this->request->data['source_id'];
//                //echo "<hr>";
//                //echo $userExist["User"][$this->request->data['source'] . '_id'];
//                //exit; 
//                if ($userExist["User"][$this->request->data['source'] . '_id'] == $this->request->data['source_id']) {
//                    $this->set(array(
//                        'result' => array("status" => false
//                            , "msg" => "This email is already registered with " . $sourceArray[$this->request->data['source']] . ".", 'isRegistered' => true),
//                        '_serialize' => array('result')
//                    ));
//                    return;
//                }
//            }



            $this->request->data['User'] = $this->request->data;

            if (!empty($userExist)) {
                $this->request->data['User']['id'] = $userExist['User']['id'];
            }

            if ($this->request->data['source'] == "email") {
                $verificationRecord = $this->Verification->find("first", array("conditions" => array("email" => $this->request->data['email'], "verification_code" => $this->request->data['verification_code'])));
                if (!empty($verificationRecord)) {
                    $this->request->data['User']['password'] = $verificationRecord['Verification']['password'];
                    $this->request->data['User']['password_hashed'] = true;
                    $this->request->data['User']['terms_accept'] = 1;
                } else {
                    $this->set(array(
                        'result' => array("status" => false
                            , "msg" => "Verification failed."),
                        '_serialize' => array('result')
                    ));
                    return;
                }
            } else {
                unset($this->User->validate['image']);
                if (empty($this->request->data['source_id'])) {
                    $this->set(array(
                        'result' => array("status" => false
                            , "msg" => "Third party ID is not provided."),
                        '_serialize' => array('result')
                    ));
                    return;
                } else {
                    $this->request->data['User'][$this->request->data['source'] . '_id'] = $this->request->data['source_id'];
                }
            }

            $roleList = $this->Common->setSessionRoles();

            $this->request->data['User']['role'] = array_search('endorser', $roleList);
            $this->request->data['User']['secret_code'] = $this->getSecretCode("user");
            $this->request->data['User']['username'] = $this->request->data['email'];
            $this->request->data['User']['last_app_used'] = "NOW()";

            $this->User->setValidation('register');



            $this->User->set($this->request->data);
            if ($this->User->validates()) {
                if ($this->User->save(null, false)) {
                    $this->request->data['User']['id'] = $this->User->id;
                    if ($this->Auth->login($this->request->data['User'])) {



                        $loggedinUserId = $this->User->id;
                        $token = $this->generateToken($loggedinUserId);
                        $this->Session->write('Auth.User.token', $token);

                        $returnData = $this->Auth->user();
//																								$viewVars = array( "username" => $this->request->data['email']);
//																								$configVars = serialize($viewVars);
//                       
//                        $subject = "nDorse sign up successful";
//																								$to = $this->request->data['email'];
//                        //$this->Common->sendEmail($this->request->data['email'], $subject, "register", $configVars);
//																								$email = array("to" => $to, "subject" => $subject, "config_vars" => $configVars, "template" => "register");
//																								$this->Email->save($email);

                        $returnData = $this->Auth->user();
                        $returnData['role'] = $roleList[$returnData['role']];

                        $this->set(array(
                            'result' => array("status" => true
                                , "msg" => "Verification successful.", 'data' => $returnData),
                            '_serialize' => array('result')
                        ));
                    } else {
                        $this->set(array(
                            'result' => array("status" => false
                                , "msg" => "Verification successful but unable to login. Please try to login again or contact support@ndorse.net if problem persists."),
                            '_serialize' => array('result')
                        ));
                    }
                } else {
                    $this->set(array(
                        'result' => array("status" => false
                            , "msg" => "There is some problem in verification. Please try again later or contact support@ndorse.net if problem persists."),
                        '_serialize' => array('result')
                    ));
                }
            } else {
                $errors = $this->User->validationErrors;
                $errorsArray = array();

                foreach ($errors as $key => $error) {
                    $errorsArray[$key] = $error[0];
                }

                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Error!", 'errors' => $errorsArray),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Get call not allowed."),
                '_serialize' => array('result')
            ));
        }
    }

    public function isValidQRCode() {
        $organization = $this->Organization->findBySecretCode($this->request->data['qr_code']);
        if (empty($organization)) {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Invalid QR Code"),
                '_serialize' => array('result')
            ));
        } else {
            $invite = $this->Invite->find("first", array("conditions" => array("email" => $this->request->data['email'], 'organization_id' => $organization['Organization']['id'])));
            if (empty($invite)) {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "You are not invited to join organization having " . $this->request->data['qr_code'] . " QR code. Please submit request to join organization."),
                    '_serialize' => array('result')
                ));

                return;
            }
            $this->set(array(
                'result' => array("status" => true
                    , "msg" => "Valid QR Code", "data" => array("organization_id" => $organization['Organization']['id'])),
                '_serialize' => array('result')
            ));
        }
    }

    public function login() {
        if ($this->request->is('post')) {
            $this->request->data['User'] = $this->request->data;

            $this->request->data['source'] = isset($this->request->data['source']) && !empty($this->request->data['source']) ? $this->request->data['source'] : "email";

            $userData = $this->User->find('first', array('conditions' => array('User.email' => $this->request->data['email'])));

            if (empty($userData)) {
                if ($this->request->data['source'] != 'email') {
                    $this->register();
                    return;
                } else {
                    $this->set(array(
                        'result' => array("status" => false
                            , "msg" => "The email you entered is not registered.", 'isRegistered' => false),
                        '_serialize' => array('result')
                    ));
                    return;
                }
            }

            $roleList = $this->Common->setSessionRoles();

            if ($roleList[$userData['User']['role']] == "super_admin") {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Super Admin login not permitted in nDorse App only Super Admin site."),
                    '_serialize' => array('result')
                ));
                return;
            }

//            if ((int) $userData['User']['status'] != 1) {
//                $this->set(array(
//                    'result' => array("status" => false
//                        , "msg" => "Your account is inactive. Please contact administrator."),
//                    '_serialize' => array('result')
//                ));
//                return;
//            }

            $this->User->setValidation('login');
            $this->User->set($this->request->data);
            if ($this->User->validates()) {

                if ($this->request->data['source'] == "email") {
                    $logginSuccess = $this->Auth->login();
                } else {
                    //$userData = $this->User->find("first", array("conditions" => array("email" => $this->request->data['email'], "source" => $this->request->data['source'], "source_id" => $this->request->data['source_id'])));
                    //Update profile if email exists and thirdparty account is not attached
                    if (empty($userData['User'][$this->request->data['source'] . "_id"])) {
                        $this->User->id = $userData['User']['id'];
                        $saved = $this->User->saveField($this->request->data['source'] . "_id", $this->request->data['source_id']);
                        //$this->User->saveField("source", $this->request->data['source']);

                        if ($saved) {
                            $userData['User'][$this->request->data['source'] . "_id"] = $this->request->data['source_id'];
                        } else {
                            $this->set(array(
                                'result' => array("status" => false
                                    , "msg" => "The third party account you are using cannot be associated with your existing account. Please try  again."),
                                '_serialize' => array('result')
                            ));
                            return;
                        }
                    }



                    if (!empty($userData['User'][$this->request->data['source'] . "_id"])) {
                        $logginSuccess = $this->Auth->login($userData['User']);
                    } else {
                        $this->set(array(
                            'result' => array("status" => false
                                , "msg" => "The third party account you are using is not configured correctly."),
                            '_serialize' => array('result')
                        ));
                        return;
                    }
                }


                if ($logginSuccess) {
                    //if ((int) $this->Auth->user("status") == 1) {
                    $loggedinUserId = $this->Auth->user('id');

                    $token = $this->generateToken($loggedinUserId);

                    $this->Session->write('Auth.User.token', $token);

                    $params = array();
                    $params['fields'] = "*";
                    $params['joins'] = array(
                        array(
                            'table' => 'user_organizations',
                            'alias' => 'UserOrganization',
                            'type' => 'LEFT',
                            'conditions' => array(
                                'UserOrganization.user_id = ' . $loggedinUserId,
                                'UserOrganization.organization_id = DefaultOrg.organization_id'
                            )
                        )
                    );

                    $params['conditions'] = array("DefaultOrg.user_id" => $loggedinUserId);

                    $defaultOrganization = $this->DefaultOrg->find("first", $params);

                    $statusConfig = Configure::read("statusConfig");



                    if (!empty($defaultOrganization) && !empty($defaultOrganization['UserOrganization'])) {
                        $orgUpdates = array();
                        //if ($defaultOrganization['UserOrganization']['status'] == $statusConfig['active'] && $defaultOrganization['Organization']['status'] == $statusConfig['active']) {
                        $currentOrg = $defaultOrganization['Organization'];

                        if ($defaultOrganization['UserOrganization']['entity_id'] > 0) {
                            // $department= $this->getOrgValues($org_id, "OrgDepartments",true,array($endorserd_id));
                            $entity = $this->getOrgValues($currentOrg["id"], "Entity", true, array($defaultOrganization['UserOrganization']['entity_id']));
                            if (!empty($entity)) {
                                $currentOrg['entity'] = $entity[0]["name"];
                            } else {
                                $currentOrg['entity'] = "";
                            }
                        } else {
                            $currentOrg['entity'] = "";
                        }

                        if ($defaultOrganization['UserOrganization']['department_id'] > 0) {
                            // $department= $this->getOrgValues($org_id, "OrgDepartments",true,array($endorserd_id));
                            $department = $this->getOrgValues($currentOrg["id"], "OrgDepartments", true, array($defaultOrganization['UserOrganization']['department_id']));
                            // $department = $defaultOrganization['UserOrganization']['department_id'];
                            if (!empty($department)) {
                                $currentOrg['department'] = $department[0]["name"];
                            } else {
                                $currentOrg['department'] = "";
                            }
                        } else {
                            $currentOrg['department'] = "";
                        }
                        if ($defaultOrganization['UserOrganization']['job_title_id'] > 0) {
                            // $department= $this->getOrgValues($org_id, "OrgDepartments",true,array($endorserd_id));
                            $jobtitle = $this->getOrgValues($currentOrg["id"], "OrgJobTitles", 1, array($defaultOrganization['UserOrganization']['job_title_id']));

                            if (!empty($jobtitle)) {
                                $currentOrg['job_title'] = $jobtitle[0]["name"];
                            } else {
                                $currentOrg['job_title'] = "";
                            }
                        } else {
                            $currentOrg['job_title'] = "";
                        }


                        $currentOrg['org_role'] = $roleList[$defaultOrganization['UserOrganization']['user_role']];

                        $currentOrg['status'] = array_search($defaultOrganization['UserOrganization']["status"], $statusConfig);

                        if ($currentOrg["image"] != "") {
                            $currentOrg["image"] = Router::url('/', true) . "app/webroot/" . ORG_IMAGE_DIR . "small/" . $currentOrg["image"];
                        }




                        //$orgUpdates = array("is_current_org_active" => 1);
                        //} else {
                        //Check inactive/active/eval status of default user organization
                        //$isCurrentOrgActive = 1;
                        $msg = "";
                        $userStatus = array_search($defaultOrganization['UserOrganization']["status"], $statusConfig);
                        $orgStatus = array_search($defaultOrganization['Organization']["status"], $statusConfig);
                        //Get current user org status and total org count
                        //$this->UserOrganization->unbindModel(array('belongsTo' => array('User')));
                        //$totalUserOrgsActive = $this->UserOrganization->find("count", array("conditions" => array("user_id" => $loggedinUserId, "UserOrganization.status" => $statusConfig['active'], "Organization.status" => $statusConfig['active'])));
                        //
																												//$params = array();
                        //$params['conditions'] = array("user_id" => $loggedinUserId);
                        //$params['conditions']['OR'] = array("UserOrganization.status" => $statusConfig['inactive'], "UserOrganization.status" => $statusConfig['eval'], "Organization.status" => $statusConfig['inactive']);
                        //$totalUserOrgsInactive = $this->UserOrganization->find("count", $params);
                        //if(!empty($defaultOrganization)) {
                        if ($defaultOrganization['Organization']['status'] != $statusConfig['active']) {
                            //$isCurrentOrgActive = 0;

                            if ($defaultOrganization['Organization']['status'] == $statusConfig['inactive']) {
                                $msg = "Default Organization inactivated.";
                            } else {
                                $msg = "Default Organization deleted!";
                            }
                        } else if ($defaultOrganization['UserOrganization']['status'] != $statusConfig['active']) {
                            //$isCurrentOrgActive  = 0;
                            if ($defaultOrganization['UserOrganization']['status'] == $statusConfig['inactive'] || $defaultOrganization['UserOrganization']['status'] == $statusConfig['eval']) {
                                $msg = "nDorse access inactivated for default Organization. Contact Organization Admin.";
                            } else if ($defaultOrganization['UserOrganization']['status'] == $statusConfig['deleted']) {
                                $msg = "You have been deleted from your default nDorse Organization. Contact Organization Admin.";
                            }
                        } else {
                            $this->Session->write('Auth.User.current_org', $currentOrg);
                        }


                        //$orgUpdates = array("is_current_org_active" => $isCurrentOrgActive, "total_user_orgs_active" => $totalUserOrgsActive, "total_user_orgs_inactive" => $totalUserOrgsInactive, "msg" => $msg, 'user_status' => $userStatus, 'org_status' => $orgStatus);
                        $orgUpdates = array("msg" => $msg, 'user_status' => $userStatus, 'org_status' => $orgStatus);
                        //} 
                        //}
                    }

                    $loggedInUser = $returnData = $this->Auth->user();

                    if (isset($orgUpdates)) {
                        $returnData['org_updates'] = $orgUpdates;
                        $returnData['current_org'] = $currentOrg;
                    }

                    if ($returnData["image"] != "") {
                        $returnData["image"] = Router::url('/', true) . "app/webroot/" . PROFILE_IMAGE_DIR . "small/" . $returnData["image"];
                    }
                    if (strtotime($returnData["dob"]) > 0) {
                        $returnData["dob"] = date("m/d/Y", strtotime($returnData["dob"]));
                    } else {
                        $returnData["dob"] = "";
                    }
                    //
                    $source = $this->request->data['source'];
                    if ($source == "email") {
                        //print_r($returnData);exit;
                        unset($returnData["source_id"]);
                        unset($returnData["fb_id"]);
                        unset($returnData["gplus_id"]);
                        unset($returnData["lin_id"]);
                    } elseif ($source == "fb") {
                        unset($returnData["source_id"]);
                        unset($returnData["gplus_id"]);
                        unset($returnData["lin_id"]);
                    } elseif ($source == "gplus") {
                        unset($returnData["source_id"]);
                        unset($returnData["fb_id"]);
                        unset($returnData["lin_id"]);
                    } elseif ($source == "lin") {
                        unset($returnData["source_id"]);
                        unset($returnData["fb_id"]);
                        unset($returnData["gplus_id"]);
                    }

                    //

                    if (empty($returnData['fname']) || empty($returnData['lname'])) {
                        $returnData['profile_updated'] = false;
                    } else {
                        $returnData['profile_updated'] = true;
                    }

                    $updated = $this->User->updateAll(array("last_app_used" => "NOW()"), array("id" => $loggedInUser['id']));

                    $this->set(array(
                        'result' => array("status" => true
                            , "msg" => "", "data" => $returnData),
                        '_serialize' => array('result')
                    ));
                    //} else {
                    //    $this->Auth->logout();
                    //    $this->set(array(
                    //        'result' => array("status" => false
                    //            , "msg" => "Your account is not active."),
                    //        '_serialize' => array('result')
                    //    ));
                    //}
                } else {
                    $this->set(array(
                        'result' => array("status" => false
                            , "msg" => "The password you entered is incorrect."),
                        '_serialize' => array('result')
                    ));
                }
            } else {
                $errors = $this->User->validationErrors;

                $errorsArray = array();

                foreach ($errors as $key => $error) {
                    $errorsArray[$key] = $error[0];
                }

                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Error!", 'errors' => $errorsArray),
                    '_serialize' => array('result')
                ));
            }
        }
    }

    public function logout() {
        $this->logoutSystem($this->Auth->user('id'));
        $this->set(array(
            'result' => array("status" => true
                , "msg" => ""),
            '_serialize' => array('result')
        ));
    }

    public function updateApisession($data) {
        $this->ApiSession->saveField('status', $data['status']);
    }

    public function getDefaultDepartments() {
        $departments = $this->Common->getDefaultDepartments(true, false, array("name"));
        $this->set(array(
            'result' => array("status" => true
                , "msg" => "Predefined departments", 'data' => $departments),
            '_serialize' => array('result')
        ));
    }

    public function getDefaultHobbies() {
        $hobbies = $this->Common->getDefaultHobbies(true, false, array("name"));
        $this->set(array(
            'result' => array("status" => true
                , "msg" => "Predefined hobbies", 'data' => $hobbies),
            '_serialize' => array('result')
        ));
    }

    public function getDefaultJobTitles() {
        $jobTitles = $this->Common->getDefaultJobTitles(true, false, array("title"));
        $this->set(array(
            'result' => array("status" => true
                , "msg" => "Predefined job titles", 'data' => $jobTitles),
            '_serialize' => array('result')
        ));
    }

    public function getDefaultSkills() {
        $skills = $this->Common->getDefaultSkills(true, false, array("name"));
        $this->set(array(
            'result' => array("status" => true
                , "msg" => "Predefined skills", 'data' => $skills),
            '_serialize' => array('result')
        ));
    }

    public function getDefaultindustries() {

        $industries = $this->Common->getDefaultIndustries(true, true, array("name", "id"));

        $this->set(array(
            'result' => array("status" => true
                , "msg" => "Predefined industries", 'data' => $industries),
            '_serialize' => array('result')
        ));
    }

    public function getPredefinedValues() {
        if (isset($this->request->query['type'])) {
            $requirements = explode(",", $this->request->query['type']);
            $returnData = array();
            foreach ($requirements as $type) {
                $type = trim($type);

                switch ($type) {
                    case "departments" :
                        $departments = $this->Common->getDefaultDepartments(true, false, array("name"));
                        $returnData['departments'] = $departments;
                        break;

                    case "job_titles" :
                        $jobTitles = $this->Common->getDefaultJobTitles(true, false, array("title"));
                        $returnData['job_titles'] = $jobTitles;
                        break;

                    case "skills" :
                        $skills = $this->Common->getDefaultSkills(true, false, array("name"));
                        $returnData['skills'] = $skills;
                        break;

                    case "hobbies" :
                        $hobbies = $this->Common->getDefaultHobbies(true, false, array("name"));
                        $returnData['hobbies'] = $hobbies;
                        break;

                    case "core_values" :
                        $coreValues = $this->Common->getDefaultCoreValues(true, false, array("name"));

                        $returnData['core_values'] = $coreValues["normal"];
                        $returnData['selected'] = $coreValues["selected"];
                        break;
                    case "countries" :
                        $countryValues = $this->getCountryStateList();
                        $returnData['default_country'] = "United States";
                        $returnData['country'] = $countryValues;
                        break;
                    case "degrees" :
                        $degreeValues = $this->Common->getDefaultDegrees(true, false, array("name"));
                        $returnData['degree'] = $degreeValues;
                        break;
                }
            }

            $this->set(array(
                'result' => array("status" => true
                    , "msg" => "Predefined values", 'data' => $returnData),
                '_serialize' => array('result')
            ));
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "type is missing."),
                '_serialize' => array('result')
            ));
        }
    }

    public function getSubOrganizations() {
        if (isset($this->request->query['oid'])) {
            $org_id = $this->request->query['oid'];
            $subOrganizations = $this->Common->getSubOrganizations($org_id, true, false, array("id", "name"));
            $this->set(array(
                'result' => array("status" => true
                    , "msg" => "Suborganizations list", 'data' => $subOrganizations),
                '_serialize' => array('result')
            ));
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Organization ID is missing in request"),
                '_serialize' => array('result')
            ));
        }
    }

    public function createOrganization() {
        $statusConfig = Configure::read("statusConfig");
        if ($this->request->is('post')) {
            //Save default values
            $this->request->data['secret_code'] = $this->getSecretCode("organization");
            $this->request->data['admin_id'] = $this->Auth->user('id');
            if (isset($this->request->data['status']) && $this->request->data['status'] != "") {
                $this->request->data['status'] = $statusConfig[$this->request->data['status']];
            }

            $this->Organization->set($this->request->data);
            if ($this->Organization->validates()) {
                if (isset($this->request->data['image']) && $this->request->data['image'] != "") {
                    $imageExtension = $this->Organization->data['Organization']['file_extension'];
                }

                if ($this->Organization->save($this->request->data)) {

                    //upload image
                    if (isset($this->request->data['image']) && $this->request->data['image'] != "") {
                        $uploadPath = ORG_IMAGE_DIR;

                        $imageData = $this->request->data['image'];
                        $imageName = $this->Organization->id . "_" . time() . "." . $imageExtension;
                        if ($this->Common->uploadApiImage($uploadPath, $imageName, $imageData)) {
                            $this->Organization->saveField('image', $imageName);
                        }

                        $imageUrl = Router::url('/', true) . ORG_IMAGE_DIR . $imageName;

                        $this->request->data['image'] = $imageUrl;
                    }
                    $this->request->data['id'] = $this->Organization->id;
//print_r($this->request->data['core_values']);
                    $orgCoreValues = json_decode($this->request->data['core_values']);

                    //print_r($orgCoreValues);exit;
                    $orgCoreValues1 = array();

                    foreach ($orgCoreValues as $key => $coreValue) {
                        if (trim($coreValue->name) != "") {
                            $orgCoreValues1[$key]["organization_id"] = $this->Organization->id;
                            $orgCoreValues1[$key]["name"] = $coreValue->name;
                            $orgCoreValues1[$key]["color_code"] = $coreValue->color_code;
                            if (isset($coreValue->from_master)) {
                                $orgCoreValues1[$key]["from_master"] = $coreValue->from_master;
                            }
                        }
                    }

                    $this->OrgCoreValues->saveMany($orgCoreValues1);

                    //

                    if (isset($this->request->data["department"]) && $this->request->data["department"] != "") {
                        //$orgDeptValues = json_decode($this->request->data["department"]);
                        //
                        //$orgDeptValues1 = array();
                        //foreach ($orgDeptValues as $key => $DeptValues) {
                        //
                        //    $orgDeptValues1[$key]["organization_id"] = $this->Organization->id;
                        //    $orgDeptValues1[$key]["name"] = $DeptValues->name;
                        //    $orgDeptValues1[$key]["from_master"] = $DeptValues->from_master;
                        //}

                        $orgDeptValues = explode(",", $this->request->data["department"]);

                        $orgDeptValues1 = array();
                        foreach ($orgDeptValues as $key => $DeptValues) {

                            $orgDeptValues1[$key]["organization_id"] = $this->Organization->id;
                            $orgDeptValues1[$key]["name"] = $DeptValues;
                            // $orgDeptValues1[$key]["from_master"] = $DeptValues->from_master;
                        }

                        $this->OrgDepartments->saveMany($orgDeptValues1);
                    }
                    if (isset($this->request->data["entity"]) && $this->request->data["entity"] != "") {
                        $orgEntityValues = explode(",", $this->request->data["entity"]);
                        $orgEntityValues1 = array();
                        foreach ($orgEntityValues as $key => $EntityValues) {
                            $orgEntityValues1[$key]["organization_id"] = $this->Organization->id;
                            $orgEntityValues1[$key]["name"] = $EntityValues;
                        }
                        $this->Entity->saveMany($orgEntityValues1);
                    }
                    if (isset($this->request->data["job_title"]) && $this->request->data["job_title"] != "") {
                        $orgJobTitileValues = explode(",", $this->request->data["job_title"]);
                        $orgJobTitileValues1 = array();
                        foreach ($orgJobTitileValues as $key => $TitleValues) {
                            $orgJobTitileValues1[$key]["organization_id"] = $this->Organization->id;
                            $orgJobTitileValues1[$key]["title"] = $TitleValues;
                            //$orgJobTitileValues1[$key]["from_master"] = $TitleValues->from_master;
                        }
                        $this->OrgJobTitles->saveMany($orgJobTitileValues1);
                    }
                    $new_userorganization = array(
                        "user_id" => $this->Auth->user('id'),
                        "organization_id" => $this->Organization->id,
                        "user_role" => 2,
                        "pool_type" => 'free',
                        "flow" => "app_invite",
                        "joined" => 1,
                        "status" => 1
                    );
                    $this->UserOrganization->save($new_userorganization);
                    $org_id = $this->Organization->id;
                    $organizationarray = array();
                    $organizationarray["org_id"] = $this->Organization->id;
                    $organizationarray["user_role"] = "Admin";

                    $array = array();
                    $array['fields'] = array('*');
                    $array['conditions'] = array('id' => $this->Organization->id);
                    $orgArray = $organization = $this->Organization->find("first", $array);
                    $orgArray["Organization"]["created"] = strtotime($orgArray["Organization"]["created"]);
                    unset($orgArray["Organization"]["updated"]);
                    $orgArray["Organization"]["status"] = array_search($orgArray["Organization"]["status"], $statusConfig); // $statusConfig[$orgArray["Organization"]["status"]];

                    if ($orgArray["Organization"]["image"] != "") {
                        $orgArray["Organization"]["image"] = Router::url('/', true) . "app/webroot/" . ORG_IMAGE_DIR . "small/" . $orgArray["Organization"]["image"];
                    }
                    $coreinfo = $this->OrgCoreValues->find("all", array(
                        'conditions' => array('OrgCoreValues.organization_id' => $this->Organization->id, 'OrgCoreValues.status' => 1),
                        'fields' => array('OrgCoreValues.id,OrgCoreValues.from_master,OrgCoreValues.name')
                    ));


                    $cinfo = array();
                    $total_value = 0;
                    foreach ($coreinfo as $cval) {

                        $cinfo[] = array("id" => $cval["OrgCoreValues"]["id"], "name" => strtolower($cval["OrgCoreValues"]["name"]));
                    }

                    $orgArray["Organization"]["core_values"] = $cinfo;
                    $orgArray["token"] = $this->request->data["token"];
                    $orgArray["Organization"]["departments"] = $this->getOrgValues($org_id, "OrgDepartments");
                    $orgArray["Organization"]["entities"] = $this->getOrgValues($org_id, "Entity");
                    // $orgArray["Organization"]["entity"] = $this->getOrgValues($org_id, "Entity");
                    $orgArray["Organization"]["job_titles"] = $this->getOrgValues($org_id, "OrgJobTitles");
                    $orgArray["Organization"]["org_role"] = "admin";

                    if ($this->Auth->user('role') > 2 || $this->Auth->user('role') > 2) {
                        $this->User->id = $this->Auth->user('id');
                        //$this->user->role = 2;
                        $this->User->saveField('role', 2);
                    }
//
                    $params = array();
                    $params['fields'] = "*";
                    $params['conditions'] = array("DefaultOrg.user_id" => $this->Auth->user('id'));
                    $defaultOrganization = $this->DefaultOrg->find("first", $params);

                    if (empty($defaultOrganization)) {
                        $roleList = $this->Common->setSessionRoles();

                        $currentOrg = $organization;
                        $currentOrg['org_role'] = 'admin';
                        $this->Session->write('Auth.User.current_org', $currentOrg);
                        $defaultOrg = array("organization_id" => $this->Organization->id, "user_id" => $this->Auth->user('id'));
                        $this->DefaultOrg->save($defaultOrg);
                    }



// send email
                    $emailQueue = array();
                    $subject = "nDorse notification -- New Organization Created Successfully";
                    $viewVars = array("org_name" => $orgArray["Organization"]["name"], "fname" => $this->Auth->user('fname'));
                    $configVars = serialize($viewVars);
                    $emailQueue[] = array("to" => $this->Auth->user('email'), "subject" => $subject, "config_vars" => $configVars, "template" => "create_org");
                    $this->Email->saveMany($emailQueue);



//
                    $this->set(array(
                        'result' => array("status" => true
                            , "msg" => "Organization created successfully!", 'data' => $orgArray),
                        '_serialize' => array('result')
                    ));
                }
            } else {

                $errors = $this->Organization->validationErrors;
                $errorsArray = array();

                foreach ($errors as $key => $error) {
                    $errorsArray[$key] = $error[0];
                }

                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Error!", 'errors' => $errorsArray),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Get call not allowed."),
                '_serialize' => array('result')
            ));
        }
    }

    public function invite() {
        if ($this->request->is('post')) {
            // @TODO : Remove invalid email ids
            $this->request->data['emailIds'] = str_replace(" ", "", $this->request->data['emailIds']);
            $emailIds = explode(",", $this->request->data['emailIds']);
            $loggedInUser = $this->Auth->user();
            $statusConfig = Configure::read("statusConfig");

            $current_org = $this->Auth->user("current_org");
            $roleList = $this->Common->setSessionRoles();

            if (empty($current_org)) {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "You have not joined any Organization. Please join some Organization."),
                    '_serialize' => array('result')
                ));

                return;
            } else if ($current_org['org_role'] == 'endorser') {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "You are not authorized to Invite Users for " . $current_org['name']),
                    '_serialize' => array('result')
                ));

                return;
            }

            $params['fields'] = array("*");
            $params['conditions'] = array("User.email" => $emailIds, "UserOrganization.organization_id" => $loggedInUser['current_org']['id'], "UserOrganization.status != " => $statusConfig['deleted']);
            $joinedRecords = $this->UserOrganization->find("all", $params);

            $joinedMails = array();
            $joinedMailsList = "";

            foreach ($joinedRecords as $joined) {
                $joinedMails[] = $joined['User']['email'];
                $joinedMailsList .= $joined['User']['email'] . ", ";
            }


            $invitedRecords = $this->Invite->find("all", array("conditions" => array("email" => $emailIds, "organization_id" => $loggedInUser['current_org']['id'])));

            $invitedMails = array();
            foreach ($invitedRecords as $invited) {
                $invitedMails[] = $invited['Invite']['email'];
            }

            // Save invites and emails to user
            $invites = $emailQueue = array();
            $viewVars = array("org_name" => $current_org['name'], "org_code" => $current_org['secret_code']);
            $configVars = serialize($viewVars);
            $subject = "Invitation to join nDorse";
            foreach ($emailIds as $email) {
                if (!in_array($email, $joinedMails)) {
                    if (!in_array($email, $invitedMails)) {
                        $invites[] = array("organization_id" => $current_org['id'], "email" => $email, "flow" => "app");
                    }
                    $emailQueue[] = array("to" => $email, "subject" => $subject, "config_vars" => $configVars, "template" => "invite");
                }
            }

            //Email to admin
            $this->UserOrganization->unbindModel(array('belongsTo' => array('Organization')));
            $orgAdmins = $this->UserOrganization->find("all", array("conditions" => array("organization_id" => $loggedInUser['current_org']['id'], "user_role" => 2)));

            $invitedBy = array("id" => $loggedInUser['id'], "fname" => $loggedInUser['fname'], "lname" => $loggedInUser['lname']);
            $invitedUsers = $emailIds;
            if (count($invitedUsers) == 1) {
                $subject = "nDorse Notification -- A user invited by administrator";
            } else if (count($invitedUsers) > 1) {
                $subject = "nDorse Notification -- Users invited by administrator";
            }

            foreach ($orgAdmins as $adminDetails) {
                $admin = array("id" => $adminDetails['User']['id'], "first_name" => $adminDetails['User']['fname']);
                $viewVars = array("org_name" => $current_org['name'], "admin" => $admin, 'invited_by' => $invitedBy, "invited_users" => $invitedUsers);
                $configVars = serialize($viewVars);
                $emailQueue[] = array("to" => $adminDetails['User']['email'], "subject" => $subject, "config_vars" => $configVars, "template" => "invite_admin");
            }

//            $adminDetails = $this->User->findById($current_org['admin_id']);
            if (!empty($invites)) {
                $this->Invite->saveMany($invites);
            }

            if (!empty($emailQueue)) {
                $this->Email->saveMany($emailQueue);
            }

            if (!empty($invitedMails)) {
                $this->Invite->updateAll(array("invite_count" => "invite_count+1"), array("email" => $invitedMails));
            }

            if (empty($joinedMails)) {
                $msg = "Invitation(s) successfully sent!";
            } else {
                $joinedMailsList = rtrim($joinedMailsList, ", ");
                if (count($joinedRecords) == 1) {
                    $msg = $joinedMailsList . " has already joined this Organization.";
                } else {
                    $msg = $joinedMailsList . " have already joined this Organization.";
                }
                
                if (!empty($invites)) {
                    $msg .= "\n Invitation(s) successfully sent to others!";
                }
            }

            //Get subscription information for current organization
            $statusConfig = Configure::read("statusConfig");
            $params = array();
            $conditions = array();
            $todayDate = date('Y-m-d H:i:s');
//                $conditions['start_date <='] = $todayDate;
//                $conditions['end_date >='] = $todayDate;
            $conditions['Subscription.status'] = 1;
            $conditions['Subscription.organization_id'] = $loggedInUser['current_org']['id'];
            $params['conditions'] = $conditions;
            $currentSubscription = $this->Subscription->find("first", $params);
            $poolPurchased = !empty($currentSubscription) ? $currentSubscription['Subscription']['pool_purchased'] + FREE_POOL_USER_COUNT : FREE_POOL_USER_COUNT;
            $joinedUser = $this->UserOrganization->find("count", array("conditions" => array("organization_id" => $loggedInUser['current_org']['id'], "UserOrganization.status" => array($statusConfig['active'], $statusConfig['eval']))));

            if ($joinedUser >= $poolPurchased) {
                $msg = str_replace("!", ".", $msg);
                if ($poolPurchased > FREE_POOL_USER_COUNT) {
                    $action = 'upgrade';
                } else {
                    $action = 'purchase';
                }
                $msg .= " \nPlease note that you have exceeded your subscription limit. Purchase or upgrade subscription to activate invited user(s) using Admin Portal on www.ndorse.net or by contacting NDORSE LLC at support@ndorse.net.";
            }



            $this->set(array(
                'result' => array("status" => true,
                    "msg" => $msg),
                '_serialize' => array('result')
            ));
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Get call not allowed."),
                '_serialize' => array('result')
            ));
        }
    }

    public function getProfile() {

        if (isset($this->request->data['token'])) {
            $authuser = $this->Auth->user();
            $token = $this->request->data['token'];
            $user_id = $this->request->data['user_id'];
            $org_id = 0;
            if (isset($this->request->data['org_id']) && ($this->request->data['org_id']) > 0) {
                $org_id = $this->request->data['org_id'];
            }
            $userinfo = array();
            if ($authuser["id"] == $user_id) {
                $userinfo["user_data"] = $authuser;
                // $userinfo["user_data"] = $this->getuserData($token);
                if (isset($userinfo["user_data"]["dob"]) && strtotime($userinfo["user_data"]["dob"]) > 0) {
                    $userinfo["user_data"]["dob"] = date("m/d/Y", strtotime($userinfo["user_data"]["dob"]));
                } else {
                    $userinfo["user_data"]["dob"] = "";
                }
                unset($userinfo["current_org"]);
            } else {
                $array = array();
                $conditionarray = array("User.id" => $user_id);
                if ($org_id > 0) {
                    $conditionarray["Organization.id"] = $org_id;
                    $array['fields'] = array('User.*', 'fname', 'lname', 'image', 'Organization.id', 'Organization.name', 'userOrganization.entity_id', 'userOrganization.department_id', 'userOrganization.job_title_id');

                    $array['joins'] = array(
                        array(
                            'table' => 'user_organizations',
                            'alias' => 'userOrganization',
                            'type' => 'LEFT',
                            'conditions' => array(
                                'userOrganization.user_id = User.id'
                            )
                        ),
                        array(
                            'table' => 'organizations',
                            'alias' => 'Organization',
                            'type' => 'LEFT',
                            'conditions' => array(
                                'Organization.id = userOrganization.organization_id'
                            )
                        )
                    );
                } else {

                    $array['fields'] = array('User.*', 'fname', 'lname', 'image', 'Organization.id', 'Organization.name', 'userOrganization.entity_id', 'userOrganization.department_id', 'userOrganization.job_title_id');

                    $array['joins'] = array(
                        array(
                            'table' => 'user_organizations',
                            'alias' => 'userOrganization',
                            'type' => 'LEFT',
                            'conditions' => array(
                                'userOrganization.user_id = User.id'
                            )
                        ),
                        array(
                            'table' => 'organizations',
                            'alias' => 'Organization',
                            'type' => 'LEFT',
                            'conditions' => array(
                                'Organization.id = userOrganization.organization_id',
                                'Organization.admin_id =' . $authuser["id"]
                            )
                        )
                    );
                }

//					//select users.*,user_organizations.organization_id,organizations.name
// from  users
//left join user_organizations on user_organizations.user_id =users.id and user_organizations.user_role='3'
//left join organizations on organizations.id = user_organizations.organization_id and organizations.admin_id=2
//where users.id=4 
                $array['conditions'] = $conditionarray;
                $orgArray = $this->User->find("all", $array);
                //  print_r($orgArray);

                $orgarr = array();
                foreach ($orgArray as $val) {

                    if (empty($userinfo)) {
                        $userinfo = $val["User"];
                    }
                    $org_idnew = $org_id;
                    if (isset($val["Organization"]) && !empty($val["Organization"])) {
                        $org_idnew = $val["Organization"]["id"];
                        if ($val["Organization"]["id"] != "") {
                            $orgarr[] = $val["Organization"];
                        }
                    }
                    $userinfo["entity"] = "";
                    $userinfo["department"] = "";
                    $userinfo["job_title"] = "";
                    if (isset($val["userOrganization"]) && !empty($val["userOrganization"])) {
                        if ($val["userOrganization"]["entity_id"] > 0) {
                            //$userinfo["entity"] = $entity;
                            $entity = $this->getOrgValues($org_idnew, "Entity", 1, array($val["userOrganization"]["entity_id"]));
                            if (!empty($entity)) {
                                $userinfo["entity"] = $entity[0]["name"];
                            }
                        }

                        if ($val["userOrganization"]["department_id"] > 0) {
                            // $userinfo["department"] = $department;
                            $department = $this->getOrgValues($org_idnew, "OrgDepartments", 1, array($val["userOrganization"]["department_id"]));
                            if (!empty($department)) {
                                $userinfo["department"] = $department[0]["name"];
                            }
                        }
                        if ($val["userOrganization"]["job_title_id"] > 0) {
                            //$userinfo["job_title"] = $job_title;
                            $job_title = $this->getOrgValues($org_id, "OrgJobTitles", 1, array($val["userOrganization"]["job_title_id"]));
                            // print_r($job_title);
                            if (!empty($job_title)) {
                                $userinfo["job_title"] = $job_title[0]["name"];
                            }
                        }
                    }
                }
                if (strtotime($userinfo["dob"]) > 0) {
                    $userinfo["dob"] = date("m/d/Y", strtotime($userinfo["dob"]));
                } else {
                    $userinfo["dob"] = "";
                }
                $userinfo = array("user_data" => $userinfo, "organization_data" => $orgarr);
            }

            //  $userinfo = $this->getuserData($token, true);
            if (!empty($userinfo)) {
                unset($userinfo["user_data"]["password"]);
                unset($userinfo["user_data"]["gplus_id"]);
                unset($userinfo["user_data"]["fb_id"]);
                unset($userinfo["user_data"]["source"]);
                unset($userinfo["user_data"]["source_id"]);
                unset($userinfo["user_data"]["lin_id"]);
                unset($userinfo["user_data"]["secret_code"]);
                // $userinfo["users"]["entity"] = "";
                if (isset($userinfo["user_data"]["image"]) && $userinfo["user_data"]["image"] != "") {
                    $userinfo["user_data"]["image"] = str_replace(Router::url('/', true) . "app/webroot/" . PROFILE_IMAGE_DIR . "small/", "", $userinfo["user_data"]["image"]);
                    $userinfo["user_data"]["image"] = Router::url('/', true) . "app/webroot/" . PROFILE_IMAGE_DIR . "small/" . $userinfo["user_data"]["image"];
                }
                //if ($userinfo["users"]["entity_id"] != "0") {
                //    // get entity name
                //
                //    $array = array();
                //    $array['fields'] = array('name');
                //    $array['conditions'] = array('id' => $userinfo["users"]["entity_id"]);
                //    $entitydata = $this->Entity->find('first', $array);
                //    if (!empty($entitydata)) {
                //        $entityname = $entitydata['Entity']['name'];
                //    }
                //    $userinfo["users"]["entity"] = $entityname;
                //}

                $this->set(array(
                    'result' => array("status" => true
                        , "msg" => "profile info", 'data' => $userinfo),
                    '_serialize' => array('result')
                ));
            } else {
                $this->set(array(
                    'result' => array("status" => true
                        , "msg" => "invalid token"),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Token is missing in request"),
                '_serialize' => array('result')
            ));
        }
    }

    public function getuserData($token, $data = false) {


        $fields = "id";
        if ($data == true) {
            $fields = "*";
        }
        $userinfo = $this->ApiSession->find("first", array(
            'joins' => array(array('table' => 'users', 'type' => 'INNER', 'conditions' => array('users.id = ApiSession.user_id'))),
            'conditions' => array('ApiSession.token' => $token),
            'fields' => array('users.' . $fields)
        ));

        return $userinfo;
    }

    public function saveprofile() {
        $authuser = $this->Auth->user();
        $firstUpdate = false;

        if (!isset($authuser['fname']) || empty($authuser['fname'])) {
            $firstUpdate = true;
        }


        $current_org = 0;
        if (isset($authuser["current_org"]) && !empty($authuser["current_org"])) {
            $current_org = $authuser["current_org"]["id"];
        }

        $resizeConfig = array('height' => 279, 'width' => 279);

        //print_r($this->request->data);
        if (isset($this->request->data['token'])) {

            $token = $this->request->data['token'];
            $userinfo = $this->getuserData($token);

            $this->request->data["id"] = $userinfo["users"]["id"];
            $this->request->data["email"] = $authuser["email"];
            if (isset($this->request->data['image']) && $this->request->data['image'] == "") {
                //unset($this->request->data['image']);
            }
            if (isset($this->request->data["dob"]) && strtotime($this->request->data["dob"]) > 0) {
                $this->request->data["dob"] = date("Y-m-d", strtotime($this->request->data["dob"]));
            }

            unset($this->request->data['role']);
            $this->User->set($this->request->data);
            // edit

            $this->User->setValidation('edit');
            $imgerror = 0;
            if ($this->User->validates()) {

                if (isset($this->request->data['image']) && $this->request->data['image'] != "") {
                    $imageExtension = $this->User->data['User']['file_extension'];
                }
                if ($this->User->save(null, false)) {
                    //Upload profile image
                    if (isset($this->request->data['image']) && $this->request->data['image'] != "") {
                        $uploadPath = PROFILE_IMAGE_DIR;
                        $imageData = $this->request->data['image'];
                        $imageName = $this->User->id . "_" . time() . "." . $imageExtension;
                        if ($this->Common->uploadApiImage($uploadPath, $imageName, $imageData)) {
                            $this->User->saveField('image', $imageName);
                        }
                    } elseif (isset($this->request->data['image']) && $this->request->data['image'] == "") {
                        $this->User->saveField('image', "");
                    }
                    //$current_org

                    $userinfo = $this->getuserData($token, true);

                    if (strtotime($userinfo["users"]["dob"]) > 0) {
                        $userinfo["users"]["dob"] = date("m/d/Y", strtotime($userinfo["users"]["dob"]));
                    } else {
                        $userinfo["users"]["dob"] = "";
                    }

                    unset($userinfo["users"]["password"]);

                    if ($userinfo["users"]["image"] != "") {
                        $userinfo["users"]["image"] = Router::url('/', true) . "app/webroot/" . PROFILE_IMAGE_DIR . "small/" . $userinfo["users"]["image"];
                        //$userinfo["users"]["image"] = $userinfo["users"]["image"];
                    }

                    $this->Session->write('Auth.User', $userinfo['users']);

                    $userinfo = $userinfo["users"];
                    $userinfo["token"] = $token;
                    unset($userinfo["created"]);
                    unset($userinfo["updated"]);
                    //unset($userinfo["secret_code"]);
                    // unset($userinfo["role"]);//
                    // get user role according to
                    $userorgrole = $this->UserOrganization->find("all", array(
                        'joins' => array(array('table' => 'default_orgs', 'type' => 'INNER', 'conditions' => array('UserOrganization.organization_id = default_orgs.organization_id'))),
                        'conditions' => array('UserOrganization.user_id' => $userinfo["id"]),
                        'fields' => array('UserOrganization.user_role')
                    ));
                    //
                    if (!empty($userorgrole)) {

                        $userinfo["role"] = $userorgrole[0]["UserOrganization"]["user_role"];
                    }

                    $msg = "Your profile was updated successfully.";

                    if ($firstUpdate) {
                        $viewVars = array("username" => $authuser['email'], 'first_name' => $this->request->data['fname']);
                        $configVars = serialize($viewVars);

                        $subject = "nDorse sign up successful";
                        $to = $this->request->data['email'];
                        //$this->Common->sendEmail($this->request->data['email'], $subject, "register", $configVars);
                        $email = array("to" => $to, "subject" => $subject, "config_vars" => $configVars, "template" => "register");
                        $this->Email->save($email);
                        $msg = "Your profile was created successfully.";
                                                                 
                        
   
                    }

//
            if(isset($this->request->data['device_id']) && $this->request->data['device_id']!=""){
            $this->LoginStatistics->updateAll(
                    array('LoginStatistics.live' => "0"), array('LoginStatistics.user_id' => $userinfo["id"])
            );
            $loginStats = array();
            $loginStats['user_id'] = $userinfo["id"];
            $loginStats['os'] = isset($this->request->data['os']) ? $this->request->data['os'] : "";
            $loginStats['os_version'] = isset($this->request->data['os_version']) ? $this->request->data['os_version'] : "";
            $loginStats['device_id'] = isset($this->request->data['device_id']) ? $this->request->data['device_id'] : "";
            $loginStats['app_version'] = isset($this->request->data['app_version']) ? $this->request->data['app_version'] : "";
            $loginStats['live'] = 1;
            $this->LoginStatistics->set($loginStats);
            $this->LoginStatistics->save();
                                         }
//

                    $this->set(array(
                        'result' => array("status" => true
                            , "msg" => $msg, 'data' => $userinfo),
                        '_serialize' => array('result')
                    ));
                }
            } else {
                $errors = $this->User->validationErrors;
                $errorsArray = array();

                foreach ($errors as $key => $error) {
                    $errorsArray[$key] = $error[0];
                }

                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Errors!", 'errors' => $errorsArray),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Token is missing in request"),
                '_serialize' => array('result')
            ));
        }
    }

    public function saveprofileorg() {

        if (isset($this->request->data['token'])) {
            $userinfo = $this->getuserData($this->request->data['token'], false);
            $user_id = $userinfo["users"]["id"];
            $org_id = $this->request->data['org_id'];
            $entity_id = $this->request->data['entity_id'];
            $department_id = $this->request->data['department_id'];
            $job_title_id = $this->request->data['job_title_id'];
            $this->UserOrganization->updateAll(
                    array('UserOrganization.entity_id' => "'" . $entity_id . "'", 'UserOrganization.department_id' => "'" . $department_id . "'", 'UserOrganization.job_title_id' => "'" . $job_title_id . "'"), array('UserOrganization.organization_id' => $org_id, 'UserOrganization.user_id' => $user_id)
            );
            $userinfo = $this->UserOrganization->find("all", array(
                'joins' => array(array('table' => 'users', 'type' => 'INNER', 'conditions' => array('users.id = UserOrganization.user_id'))),
                'conditions' => array('UserOrganization.organization_id' => $org_id, 'UserOrganization.user_role' => array('endorser', 'd_admin'), 'UserOrganization.user_id' => $user_id),
                'fields' => array('users.id,users.fname,users.lname,users.image,UserOrganization.status,UserOrganization.user_role')
            ));

            $this->set(array(
                'result' => array("status" => true
                    , "msg" => "organization user details", 'data' => $userinfo),
                '_serialize' => array('result')
            ));
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Token is missing in request"),
                '_serialize' => array('result')
            ));
        }
    }

    public function changepassword() {
        // check users organization 1 or many
        // 
        $authuser = $this->Auth->user();
        if (isset($this->request->data['token'])) {
            $org_id = $this->request->data["org_id"];
            $user_id = $this->request->data["user_id"];
            //
            if ($user_id != "") {

                $array = array();
                $array['fields'] = array('Organization.id', 'Organization.name', 'User.email', 'User1.email as useremail', 'User1.fname', 'User1.lname');
                $conditionarray = array();

                $conditionarray['Organization.status'] = 1;
                $array['joins'] = array(
                    array(
                        'table' => 'users',
                        'alias' => 'User',
                        'type' => 'INNER',
                        'conditions' => array(
                            'Organization.admin_id =User.id '
                        )
                    ),
                    array(
                        'table' => 'user_organizations',
                        'alias' => 'UserOrganization',
                        'type' => 'INNER',
                        'conditions' => array(
                            'UserOrganization.user_id = ' . $user_id,
                            'UserOrganization.organization_id = Organization.id',
                            'UserOrganization.status != 2'
                        )
                    ),
                    array(
                        'table' => 'users',
                        'alias' => 'User1',
                        'type' => 'INNER',
                        'conditions' => array(
                            'UserOrganization.user_id = User1.id'
                        )
                    )
                );


                $array['conditions'] = $conditionarray;
                $orgArray = $this->Organization->find("all", $array);
                //	echo $this->Organization->getLastQuery();die;
            }
            //
            $orgemail = array();

            $this->User->set($this->request->data);
            // edit
            $this->request->data["id"] = $user_id;
            $this->User->setValidation('reset_password');
            if ($this->User->validates()) {
                $emailQueue = array();
                $password = $this->request->data["password"];
                $organization_name = "";
                if ($this->User->save($this->request->data)) {
                    foreach ($orgArray as $orgval) {
                        $requestarray[] = array("organization_id" => $orgval['Organization']['id'], "user_id" => $user_id);
// orgAdmin xxxx has reset your password. Your new password is yyyyyy
                        $organization_name = $orgval['Organization']['name'];
                        if ($org_id == $orgval['Organization']['id']) {

                            //$subject = "Password updated by a " . $organization_name." orgAdmin";
                            $subject = "nDorse Password Reset";
                            $viewVars = array("org_name" => $orgval['Organization']['name'], "fname" => trim($orgval['User1']['fname']), "password" => $password, "user_name" => trim($orgval['User1']['fname'] . " " . $orgval['User1']['lname']));
                            $configVars = serialize($viewVars);
                            $emailQueue[] = array("to" => $orgval['User1']['useremail'], "subject" => $subject, "config_vars" => $configVars, "template" => "update_password");
                        } else {
                            // $subject = "Password updated by a " . $organization_name." orgAdmin";
                            $subject = "nDorse Password Reset";
                            $viewVars = array("org_name" => $organization_name, "fname" => trim($orgval['User1']['fname']), "password" => $password, "user_name" => trim($orgval['User1']['fname'] . " " . $orgval['User1']['lname']));
                            $configVars = serialize($viewVars);
                            $emailQueue[] = array("to" => $orgval['User']['email'], "subject" => $subject, "config_vars" => $configVars, "template" => "update_password_admin");
                        }
                    }
                    if (!empty($emailQueue)) {
                        $this->Email->saveMany($emailQueue);
                    }
                    // send email to user for change password
                    $this->set(array(
                        'result' => array("status" => true
                            , "msg" => "Password update successfully. ", 'data' => true),
                        '_serialize' => array('result')
                    ));
                } else {
                    $errors = $this->User->validationErrors;

                    $errorsArray = array();

                    foreach ($errors as $error) {
                        $errorsArray[] = $error;
                    }

                    $this->set(array(
                        'result' => array("status" => false
                            , "msg" => $errorsArray),
                        '_serialize' => array('result')
                    ));
                }
            } else {
                $errors = $this->User->validationErrors;
                $errorsArray = array();

                foreach ($errors as $error) {
                    $errorsArray[] = $error;
                }

                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => $errorsArray),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Token is missing in request"),
                '_serialize' => array('result')
            ));
        }
    }

    // api for get organization details
    public function getOrganization() {
        $statusConfig = Configure::read("statusConfig");
        if (isset($this->request->query['token'])) {
            if (isset($this->request->query['oid'])) {
                $org_id = $this->request->query['oid'];
                $array = array();
                $array['fields'] = array('*');
                $array['conditions'] = array('id' => $org_id);
                $orgArray = $this->Organization->find("first", $array);

                if ($orgArray["Organization"]["image"] != "") {
                    $orgArray["Organization"]["image"] = Router::url('/', true) . "app/webroot/" . ORG_IMAGE_DIR . "small/" . $orgArray["Organization"]["image"];
                }
                if (!empty($orgArray)) {

                    $orgArray["Organization"]["status"] = array_search($orgArray["Organization"]["status"], $statusConfig);
                    //unset($orgArray["Organization"]["secret_code"]);
                    unset($orgArray["Organization"]["admin_id"]);
                    // get core values
                    //
                $params = array();
                    $start_date = "";
                    $end_date = "";
                    if (isset($this->request->data["start_date"]) && $this->request->data["start_date"] != "") {
                        $start_date = $this->request->data["start_date"];
                    }
                    if (isset($this->request->data["end_date"]) && $this->request->data["end_date"] != "") {
                        $end_date = $this->request->data["end_date"];
                    }

                    $start_date = date('Y-m-01 00:00:00', time());
                    $end_date = date('Y-m-d 23:59:59', time());
                    $conditionarray["Endorsement.created >= "] = $start_date;
                    $conditionarray["Endorsement.created <= "] = $end_date;



                    $params = array();
                    $conditionarray['Endorsement.organization_id'] = $org_id; // array('0','1','3');

                    $params['conditions'] = $conditionarray;
                    $params['fields'] = "count(Endorsement.id) as total ";
                    $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseCoreValues', 'EndorseReplies')));
                    $total_endorsement = $this->Endorsement->find("all", $params);


                    $total_value = $total_endorsement[0][0]["total"];
                    $cinfo = array();

                    if ($total_value > 0) {
                        $params['fields'] = "count(EndorseCoreValue.value_id) as total,Endorsement.id, OrgCoreValues.name as core_value,OrgCoreValues.id ,OrgCoreValues.color_code ";
                        $params['joins'] = array(
                            array(
                                'table' => 'endorse_core_values',
                                'alias' => 'EndorseCoreValue',
                                'type' => 'LEFT',
                                'conditions' => array(
                                    'EndorseCoreValue.endorsement_id =Endorsement.id '
                                )
                            ),
                            array(
                                'table' => 'org_core_values',
                                'alias' => 'OrgCoreValues',
                                'type' => 'INNER',
                                'conditions' => array(
                                    'OrgCoreValues.id =EndorseCoreValue.value_id '
                                )
                            )
                        );
                        $params['group'] = 'EndorseCoreValue.value_id';
                        $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseCoreValues', 'EndorseReplies')));
                        $corevalues = $this->Endorsement->find("all", $params);




                        foreach ($corevalues as $cval) {

                            $cinfo[] = array("id" => $cval["OrgCoreValues"]["id"], "name" => $cval["OrgCoreValues"]["core_value"], "color_code" => $cval["OrgCoreValues"]["color_code"], "total" => $cval[0]["total"]);
                            //$total_value += $cval[0]["tot"];
                        }
                    }


                    $coreinfo = $this->OrgCoreValues->find("all", array(
                        'conditions' => array('OrgCoreValues.organization_id' => $org_id, 'OrgCoreValues.status' => 1),
                        'fields' => array('OrgCoreValues.id,OrgCoreValues.name,OrgCoreValues.color_code')
                    ));
                    //   print_r($coreinfo);
                    $core_value = array();
                    foreach ($coreinfo as $cval) {

                        $core_value[] = array("id" => $cval["OrgCoreValues"]["id"], "name" => $cval["OrgCoreValues"]["name"], "color_code" => $cval["OrgCoreValues"]["color_code"]);
                        //$total_value += $cval[0]["tot"];
                    }
                    //        select count(`EndorseCoreValue`.`id`),`Endorsement`.`id` from `endorsements` AS `Endorsement`  
//LEFT  JOIN `ndorse_arcgate`.`endorse_core_values` AS `EndorseCoreValue` ON (`Endorsement`.`id` =`EndorseCoreValue`.`endorsement_id`) 
//where `Endorsement`.`organization_id`=258
//group by EndorseCoreValue.endorsement_id  order by `Endorsement`.`id`
                    $params = array();
                    $conditionarray['Endorsement.organization_id'] = $org_id; // array('0','1','3');
                    unset($conditionarray["Endorsement.created >= "]);
                    unset($conditionarray["Endorsement.created <= "]);

                    $params['conditions'] = $conditionarray;
                    $params['fields'] = "count(EndorseCoreValue.value_id) as total,Endorsement.id";
                    $params['joins'] = array(
                        array(
                            'table' => 'endorse_core_values',
                            'alias' => 'EndorseCoreValue',
                            'type' => 'LEFT',
                            'conditions' => array(
                                'EndorseCoreValue.endorsement_id =Endorsement.id '
                            )
                        )
                    );
                    $params['group'] = 'EndorseCoreValue.endorsement_id';
                    $params['order'] = 'Endorsement.id asc';
                    $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseCoreValues', 'EndorseReplies')));
                    $corevaluesendorsement = $this->Endorsement->find("all", $params);
                    $corevaltotal = 0;
                    foreach ($corevaluesendorsement as $coreeval) {
                        $corevaltotal+=$coreeval[0]["total"];
                    }
                    //print_r($corevaluesendorsement);
                    // echo $this->Endorsement->getLastQuery();die;
                    //exit;
                    $orgArray["core_values"] = $cinfo;
                    $orgArray["total_core_values"] = $corevaltotal;
                    $orgArray["total_endorsement"] = count($corevaluesendorsement); //$cinfo;
                    $orgArray["org_core_values"] = $core_value;
                    $orgArray["total_endorsement_month"] = $total_value;
                    $orgArray["departments"] = $this->getOrgValues($org_id, "OrgDepartments");
                    $orgArray["entity"] = $this->getOrgValues($org_id, "Entity");
                    $orgArray["job_titles"] = $this->getOrgValues($org_id, "OrgJobTitles");
                    $orgArray["Organization"]["health_url"] = Router::url('/', true) . "img/" . $orgArray["Organization"]["health_url"];

                    $this->set(array(
                        'result' => array("status" => true
                            , "msg" => "Organization info ", 'data' => $orgArray),
                        '_serialize' => array('result')
                    ));
                } else {
                    $this->set(array(
                        'result' => array("status" => false
                            , "msg" => "Organization not found"),
                        '_serialize' => array('result')
                    ));
                }
            } else {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Organization ID is missing in request"),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Token is missing in request"),
                '_serialize' => array('result')
            ));
        }
    }

    // api for save organization 		 
    public function saveOrganization() {
        $statusConfig = Configure::read("statusConfig");

        if ($this->request->is('post')) {
//'ruleValid'=>array(
            //                   'rule' => array('validateImage'),
            //            )
            //$this->Organization->validate['short_name']['ruleUnique'] = array(
            //    'rule' => 'isUnique',
            //    'required' => 'create',
            //    "on" => 'update',
            //    'message' => 'Short name already exists.'
            //);
            $org_id = $this->request->data["id"] = $this->request->data["org_id"];


            // unset($this->Organization->validate['image']['ruleRequired']);
            // unset($this->Organization->validate['secret_code']);
            if (isset($this->request->data['image']) && $this->request->data['image'] == "") {
                unset($this->request->data['image']);
            }
            if (isset($this->request->data['status']) && $this->request->data['status'] != "") {
                $this->request->data['status'] = $statusConfig[$this->request->data['status']];
            }

            $this->Organization->set($this->request->data);

            $this->Organization->validate['name']['ruleUnique'] = array(
                'rule' => 'isUnique',
                'required' => 'create',
                "on" => 'update',
                'message' => 'Organization name already exists.'
            );
            // if(isset($this->request->data['name']) && $this->request->data['name']!="")
            // {
            // $organizations = $this->Organization->find("all", array("conditions" => array("id !=" => $org_id,"name"=>$this->request->data['name'])));
            // print_r($organizations);
            // }
            //unset($this->Organization->validate['name']['ruleUnique']);
            $this->Organization->id = $org_id;

            if ($this->Organization->validates()) {
                //


                if (isset($this->request->data['image']) && $this->request->data['image'] != "") {
                    $imageExtension = $this->Organization->data['Organization']['file_extension'];
                }

                if ($this->Organization->save(null, false)) {
                    //Upload profile image
                    if (isset($this->request->data['image']) && $this->request->data['image'] != "") {
                        $uploadPath = ORG_IMAGE_DIR;
                        $imageData = $this->request->data['image'];
                        $imageName = $this->Organization->id . "_" . time() . "." . $imageExtension;
                        if ($this->Common->uploadApiImage($uploadPath, $imageName, $imageData)) {
                            $this->Organization->saveField('image', $imageName);
                        }
                    }
                    // save organization core value
                    if (isset($this->request->data["core_values"]) && $this->request->data["core_values"] != "") {
                        $orgCoreValues = json_decode($this->request->data['core_values']);
                        //$orgCoreValues = array();
                        $array = array();
                        $array['fields'] = array('*');
                        $array['conditions'] = array('organization_id' => $org_id);
                        $coreValuelist = $this->OrgCoreValues->find("all", $array);
                        $existcoreValueArray = array();


                        if (!empty($coreValuelist)) {

                            foreach ($coreValuelist as $listval) {

                                $existcoreValueArray[$listval["OrgCoreValues"]["id"]] = $listval["OrgCoreValues"]["name"];
                                //$coreValuelist
                            }
                        }

                        $this->OrgCoreValues->updateAll(
                                array('OrgCoreValues.status' => "2"), array('OrgCoreValues.organization_id' => $org_id)
                        );
                        $norgCoreValues = array();

                        foreach ($orgCoreValues as $key => $coreValue) {
                            $valueid = array_search($coreValue->name, $existcoreValueArray);
                            //echo $coreValue["name"]."-----newid---".$valueid."----".$coreValue["id"];
                            if (1) {

                                if ($valueid > 0) {
                                    $norgCoreValues[$key]['id'] = $valueid;
                                    //continue;
                                }
                            } else {
                                //if ($valueid > 0 && $valueid != $coreValue->id) {
                                //    $norgCoreValues[$key]['id'] = $valueid;
                                //    //continue;
                                //}
                            }

                            $norgCoreValues[$key]['color_code'] = $coreValue->color_code;
                            $norgCoreValues[$key]['name'] = $coreValue->name;
                            $norgCoreValues[$key]['organization_id'] = $org_id;
                            $norgCoreValues[$key]['status'] = 1;

                            //if (isset($coreValue->from_master)) {
                            //    $norgCoreValues[$key]["from_master"] = $coreValue->from_master;
                            //}
                        }

                        $this->OrgCoreValues->saveMany($norgCoreValues);
                    }
                    // end save org core values
                    // save entity org values
                    if (isset($this->request->data["entity"]) && $this->request->data["entity"] != "") {
                        $array = array();
                        $array['fields'] = array('*');
                        $array['conditions'] = array('organization_id' => $org_id);
                        $entityValuelist = $this->Entity->find("all", $array);
                        $existentityValueArray = array();
                        $this->Entity->updateAll(
                                array('Entity.status' => "2"), array('Entity.organization_id' => $org_id)
                        );
                        if (!empty($entityValuelist)) {

                            foreach ($entityValuelist as $listval) {

                                $existentityValueArray[$listval["Entity"]["id"]] = $listval["Entity"]["name"];
                                //$coreValuelist
                            }
                        }

                        $orgEntityValues = explode(",", $this->request->data["entity"]);
                        $orgEntityValues1 = array();
                        foreach ($orgEntityValues as $key => $EntityValues) {
                            //
                            $valueid = array_search($EntityValues, $existentityValueArray);
                            //echo $coreValue["name"]."-----newid---".$valueid."----".$coreValue["id"];
                            if (1) {

                                if ($valueid > 0) {
                                    $orgEntityValues1[$key]['id'] = $valueid;
                                    //continue;
                                }
                            } else {
                                //if ($valueid > 0 && $valueid != $EntityValues->id) {
                                //    $orgEntityValues1[$key]['id'] = $valueid;
                                //    //continue;
                                //}
                            }
                            //
                            $orgEntityValues1[$key]["organization_id"] = $org_id;
                            $orgEntityValues1[$key]['name'] = $EntityValues;
                            $orgEntityValues1[$key]["status"] = 1;
                        }
                        $this->Entity->saveMany($orgEntityValues1);
                    } else {
                        $this->Entity->updateAll(
                                array('Entity.status' => "2"), array('Entity.organization_id' => $org_id)
                        );
                    }


                    // end save entity org 
                    // save dept org values
                    if (isset($this->request->data["department"]) && $this->request->data["department"] != "") {
                        $array = array();
                        $array['fields'] = array('*');
                        $array['conditions'] = array('organization_id' => $org_id);
                        $deptValuelist = $this->OrgDepartments->find("all", $array);
                        $existdeptValueArray = array();
                        $this->OrgDepartments->updateAll(
                                array('OrgDepartments.status' => "2"), array('OrgDepartments.organization_id' => $org_id)
                        );
                        if (!empty($deptValuelist)) {

                            foreach ($deptValuelist as $listval) {

                                $existdeptValueArray[$listval["OrgDepartments"]["id"]] = $listval["OrgDepartments"]["name"];
                                //$coreValuelist
                            }
                        }

                        $orgDeptValues = explode(",", $this->request->data["department"]);
                        $orgDeptValues1 = array();
                        foreach ($orgDeptValues as $key => $DeptValues) {
                            //
                            $valueid = array_search($DeptValues, $existdeptValueArray);
                            //echo $coreValue["name"]."-----newid---".$valueid."----".$coreValue["id"];
                            if (1) {

                                if ($valueid > 0) {
                                    $orgDeptValues1[$key]['id'] = $valueid;
                                    //continue;
                                }
                            } else {
                                //if ($valueid > 0 && $valueid != $DeptValues->id) {
                                //    $orgDeptValues1[$key]['id'] = $valueid;
                                //    //continue;
                                //}
                            }
                            //
                            $orgDeptValues1[$key]["organization_id"] = $org_id;
                            $orgDeptValues1[$key]['name'] = $DeptValues; //$DeptValues->name;
                            //$orgDeptValues1[$key]["from_master"] = $DeptValues->from_master;
                            $orgDeptValues1[$key]["status"] = 1;
                        }
                        $this->OrgDepartments->saveMany($orgDeptValues1);
                    } else {
                        $this->OrgDepartments->updateAll(
                                array('OrgDepartments.status' => "2"), array('OrgDepartments.organization_id' => $org_id)
                        );
                    }


                    // end save Dept org
// save job title org values
                    if (isset($this->request->data["job_title"]) && $this->request->data["job_title"] != "") {
                        $array = array();
                        $array['fields'] = array('*');
                        $array['conditions'] = array('organization_id' => $org_id);
                        $JobTitleValuelist = $this->OrgJobTitles->find("all", $array);
                        $existJobTitleValueArray = array();
                        $this->OrgJobTitles->updateAll(
                                array('OrgJobTitles.status' => "2"), array('OrgJobTitles.organization_id' => $org_id)
                        );
                        if (!empty($JobTitleValuelist)) {

                            foreach ($JobTitleValuelist as $listval) {

                                $existJobTitleValueArray[$listval["OrgJobTitles"]["id"]] = $listval["OrgJobTitles"]["title"];
                                //$coreValuelist
                            }
                        }

                        $orgJobTitleValues = explode(",", $this->request->data["job_title"]);
                        $orgJobTitleValues1 = array();
                        foreach ($orgJobTitleValues as $key => $JobTitleValues) {
                            //
                            $valueid = array_search($JobTitleValues, $existJobTitleValueArray);
                            //echo $coreValue["name"]."-----newid---".$valueid."----".$coreValue["id"];
                            if (1) {

                                if ($valueid > 0) {
                                    $orgJobTitleValues1[$key]['id'] = $valueid;
                                    //continue;
                                }
                            } else {
                                //if ($valueid > 0 && $valueid != $JobTitleValues->id) {
                                //    $orgJobTitleValues1[$key]['id'] = $valueid;
                                //    //continue;
                                //}
                            }
                            //
                            $orgJobTitleValues1[$key]['title'] = $JobTitleValues;
                            // $orgJobTitleValues1[$key]["from_master"] = $JobTitleValues->from_master;
                            $orgJobTitleValues1[$key]["organization_id"] = $this->Organization->id;
                            $orgJobTitleValues1[$key]["status"] = 1;
                        }
                        $this->OrgJobTitles->saveMany($orgJobTitleValues1);
                    } else {
                        $this->OrgJobTitles->updateAll(
                                array('OrgJobTitles.status' => "2"), array('OrgJobTitles.organization_id' => $org_id)
                        );
                    }



                    // end save Dept org
                    $this->set(array(
                        'result' => array("status" => true
                            , "msg" => "Organization profile updated successfully.", 'data' => true),
                        '_serialize' => array('result')
                    ));
                }
            } else {
                $errors = $this->Organization->validationErrors;
                $errorsArray = array();

                foreach ($errors as $key => $error) {
                    $errorsArray[$key] = $error[0];
                }

                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Error!", 'errors' => $errorsArray),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Get call not allowed."),
                '_serialize' => array('result')
            ));
        }
    }

    // api for get user in organization
    public function getorganizationuser() {
        $statusConfig = Configure::read("statusConfig");
        if (isset($this->request->query['token'])) {
            $org_id = $this->request->query['oid'];
            //$loggedinUser = $this->Auth->user();
            $userinfo = $this->getuserData($this->request->query['token']);
            $login_user_id = $userinfo["users"]["id"];
            $limit = Configure::read("pageLimit");
            if (isset($this->request->query["page"]) && $this->request->query["page"] > 1) {
                $page = $this->request->query["page"];
                $offset = $page * $limit;
            } else {
                $page = 1;
                $offset = 0;
            }
            $userspecific = 0;
            $user_id = 0;
            if (isset($this->request->query['user_id']) && ($this->request->query['user_id'] > 0)) {
                $userspecific = 1;
                $user_id = $this->request->query['user_id'];
            }

            $params = array();
            $params['fields'] = "count(*) as cnt";
            //echo $userspecific."---". $login_user_id;
            if ($userspecific == 0) {
                $params['conditions'] = array('UserOrganization.organization_id' => $org_id, 'UserOrganization.user_role' => array('3', '2'), 'UserOrganization.user_id !=' => $login_user_id, 'UserOrganization.status' => array('0', '1', '3'));
            } else {
                $params['conditions'] = array('UserOrganization.organization_id' => $org_id, 'UserOrganization.user_id' => $user_id, 'UserOrganization.user_role' => array('3', '2'), 'UserOrganization.status' => array('0', '1', '3'));
            }
            $params['order'] = 'UserOrganization.created desc';
            $params['joins'] = array(
                array(
                    'table' => 'users',
                    'alias' => 'User',
                    'type' => 'INNER',
                    'conditions' => array(
                        'User.id =UserOrganization.user_id '
                    )
                )
            );
            $this->UserOrganization->unbindModel(array('belongsTo' => array('Organization', 'User',)));
            if ($userspecific == 0) {

                $totaluser = $this->UserOrganization->find("all", $params);
                //print_r($totaluser);
                //echo $this->UserOrganization->getLastQuery();die;
                $totaluser = $totaluser[0][0]["cnt"];
                $totalpage = ceil($totaluser / $limit);
            }

            $params['fields'] = "User.id,User.fname,User.lname,User.image,UserOrganization.status,UserOrganization.user_role,UserOrganization.entity_id,UserOrganization.department_id,UserOrganization.job_title_id";
            if ($userspecific == 0) {
                $params['limit'] = $limit;
                $params['page'] = $page;
                $params['offset'] = $offset;
                $this->UserOrganization->unbindModel(array('belongsTo' => array('Organization', 'User',)));
            }
            $userinfo = $this->UserOrganization->find("all", $params);


            //$userinfo = $this->UserOrganization->find("all", array(
            //            'joins' => array(array('table' => 'users', 'type' => 'INNER', 'conditions' => array('users.id = UserOrganization.user_id'))),
            //            'conditions' => array('UserOrganization.organization_id' => $org_id, 'UserOrganization.user_role' => array('3', '4'), 'UserOrganization.status' => array('0', '1', '3')),
            //            'fields' => array('users.id,users.fname,users.lname,users.image,UserOrganization.status,UserOrganization.user_role,UserOrganization.entity_id,UserOrganization.department_id,UserOrganization.job_title_id')
            //        ));
            // echo $this->UserOrganization->getLastQuery();
            // echo "<hr>";

            $userdetails = array();
            foreach ($userinfo as $userval) {

                if ($userval["User"]["image"] != "") {
                    $userval["User"]["image"] = Router::url('/', true) . "app/webroot/" . PROFILE_IMAGE_DIR . "small/" . $userval["User"]["image"];
                }

                $userval['UserOrganization']['status'] = array_search($userval['UserOrganization']['status'], $statusConfig);
                $userdetails[] = array_merge($userval['User'], $userval['UserOrganization']);
            }
            if ($userspecific == 0) {
                $data = array("users" => $userdetails, "total_page" => $totalpage);
            } else {
                $data = array("users" => $userdetails);
            }
            $this->set(array(
                'result' => array("status" => true
                    , "msg" => "organization users", 'data' => $data),
                '_serialize' => array('result')
            ));
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Token is missing in request"),
                '_serialize' => array('result')
            ));
        }
    }

    // api for inactive/active/delete user in organization
    public function userOrgAction() {
        $statusConfig = Configure::read("statusConfig");

        if (isset($this->request->data['token'])) {
            $loggedInUser = $this->Auth->user();
            $org_id = $this->request->data['oid'];
            $useraccess = $this->request->data['status'];
            $status = $statusConfig[$useraccess];
            $user_id = $this->request->data['user_id'];
            $pool_type = "free";
            $subscriptiondata = $this->Subscription->findByOrganizationId($org_id);
            if (in_array($status, array(1, 3))) {
                $available_pool = 10;
                // get subscription info

                if (!empty($subscriptiondata) && $subscriptiondata["Subscription"]["status"] == 1) {
                    $available_pool += $subscriptiondata["Subscription"]["pool_purchased"];
                }
                //$params =array();
                //$params['conditions'] = array("organization_id" => $org_id, "UserOrganization.status" => array($statusConfig['active'], $statusConfig['eval']));
                //$params['fields'] = array("COUNT(UserOrganization.user_id) as count");
                //$userOrgStats = $this->UserOrganization->find("all", $params);
                // $usercount = $userOrgStats[0][0]["count"];
                //  $ucount = $usercount+1;
                //
              $params = array();
                // $params['conditions'] = array("organization_id" => $org_id, "UserOrganization.status" => array($statusConfig['inactive'], $statusConfig['active'], $statusConfig['eval']));
                $params['conditions'] = array("organization_id" => $org_id, "UserOrganization.status" => array($statusConfig['active'], $statusConfig['eval']));
                $params['group'] = 'pool_type';
                $params['fields'] = array("UserOrganization.pool_type", "COUNT(UserOrganization.user_id) as count");
                $userOrgStats = $this->UserOrganization->find("all", $params);

                $freeCount = 0;
                $paidCount = 0;

                foreach ($userOrgStats as $stats) {
                    if ($stats['UserOrganization']['pool_type'] == 'free') {
                        $freeCount = $stats[0]['count'];
                    } else {
                        $paidCount = $stats[0]['count'];
                    }
                }

                $usercount = $freeCount + $paidCount;
                $ucount = $usercount + 1;
                //
                //User cannot be set to evaluation mode since subscription limit is over
                $modemsg = "Active";
                if ($status == 3) {
                    $modemsg = "Evaluation mode";
                }

                if ($ucount > $available_pool) {
                    $msg = "No quota available.";
                    $this->set(array(
                        'result' => array("status" => false
                            , "msg" => "Subscription limit exceeded! To add user(s) to " . $modemsg . "; purchase or upgrade subscription to activate added user(s) using Admin Portal on www.ndorse.net or by contacting NDORSE LLC at support@ndorse.net."),
                        '_serialize' => array('result')
                    ));
                    return;
                }
                $pool_type = "'free'";
                //if($ucount>10){
                //  $pool_type ="'paid'";   
                //}
                if ($freeCount >= 10) {
                    $pool_type = "'paid'";
                }
            }

            //
            $updatemsg = "User status updated successfully.";
            if (in_array($status, array(0, 2))) {
                $pool_type = "'paid'";
                if (!empty($subscriptiondata) && $subscriptiondata["Subscription"]["status"] == 1) {
                    $delmsg = "Inactivated";
                    if ($status == 2) {
                        $delmsg = "Deleted";
                    }

                    $updatemsg = "User was successfully " . $delmsg . ". Go to Admin Portal to downgrade subscription.";
                }
            }
            $this->UserOrganization->updateAll(
                    array('UserOrganization.status' => $status, 'UserOrganization.pool_type' => $pool_type), array('UserOrganization.organization_id' => $org_id, 'UserOrganization.user_id' => $user_id)
            );
            $userstatus = 1;
            if ($useraccess == "inactive" || $useraccess == "eval" || $useraccess == "deleted") {
                $userstatus = 0;
            }
            $defaultorg = $this->DefaultOrg->find("first", array("conditions" => array("user_id" => $user_id)));
            if (!empty($defaultorg)) {
                $this->DefaultOrg->updateAll(
                        array('DefaultOrg.status' => $userstatus), array('DefaultOrg.organization_id' => $org_id, 'DefaultOrg.user_id' => $user_id)
                );
            } elseif ($useraccess == "active") {
                $userorgs = $this->UserOrganization->find("all", array('joins' => array(/* array('table' => 'users', 'type' => 'INNER', 'conditions' => array('users.id = UserOrganization.user_id')), */
                        array('table' => 'organizations', 'type' => 'INNER', 'conditions' => array('organizations.id = UserOrganization.organization_id and organizations.status=1'))),
                    'conditions' => array('UserOrganization.user_id' => $user_id),
                    'fields' => array('organizations.id')
                ));
                if (count($userorgs) == 1) {
                    $newdefaultOrg = array("organization_id" => $org_id, "user_id" => $user_id);
                    $this->DefaultOrg->save($newdefaultOrg);
                }
            }
            $userinfo = $this->UserOrganization->find("all", array(
                'joins' => array(/* array('table' => 'users', 'type' => 'INNER', 'conditions' => array('users.id = UserOrganization.user_id')), */
                    array('table' => 'organizations', 'type' => 'INNER', 'conditions' => array('organizations.id = UserOrganization.organization_id'))),
                'conditions' => array('UserOrganization.organization_id' => $org_id, 'UserOrganization.user_id' => $user_id),
                'fields' => array('UserOrganization.user_id,UserOrganization.status,UserOrganization.user_role,organizations.name,organizations.admin_id')
            ));
            // print_r($userinfo);
            $userid = array();
            foreach ($userinfo as $userval) {
                $userid[] = $userval["UserOrganization"]["user_id"];
                $userid[] = $userval["organizations"]["admin_id"];
            }

            $userdetailid = array();
            $userdetailsql = $this->User->find("all", array("conditions" => array("id" => $userid), "fields" => array("id", "fname", "lname", "image", "email")));
            foreach ($userdetailsql as $val) {
                $userdetailid[$val["User"]["id"]] = array("fname" => $val["User"]["fname"], "image" => $val["User"]["image"], "lname" => $val["User"]["lname"], "email" => $val["User"]["email"]);
            }
            if ($useraccess == "deleted") {

                $this->Invite->updateAll(
                        array('Invite.is_deleted' => 1), array('Invite.organization_id' => $org_id, 'Invite.email' => $userdetailid[$user_id]["email"])
                );
            } $userdetails = array();
            $emailQueue = array();
            foreach ($userinfo as $userval) {
                // print_r($userval);exit;
                $euser = $userdetailid[$userval["UserOrganization"]["user_id"]];
                $orguser = $userdetailid[$userval["organizations"]["admin_id"]];
                // $orguser = $loggedInUser['fname']." ".$loggedInUser['lname'];
                if ($euser["image"] != "") {
                    $euser["image"] = Router::url('/', true) . "app/webroot/" . PROFILE_IMAGE_DIR . "small/" . $euser["image"];
                }
                $userval['UserOrganization']['status'] = array_search($userval['UserOrganization']['status'], $statusConfig);
                ;
                $euser["id"] = $userval["UserOrganization"]["user_id"];
                $userdetails = array_merge($euser, $userval['UserOrganization']);

                $organization_name = $userval['organizations']['name'];
                $actstatus = "";
                if ($useraccess == "inactive") {
                    $actstatus = "deactivated";
                } elseif ($useraccess == "active") {
                    $actstatus = "activated";
                } elseif ($useraccess == "eval") {
                    $actstatus = "evaluated";
                } elseif ($useraccess == "deleted") {
                    $actstatus = "deleted";
                    $subject = "Your nDorse login has been deleted";
                }
                if ($useraccess != "deleted") {
                    $subject = "Your nDorse login " . $actstatus . " by your administrator";
                }
                $viewVars = array("org_name" => $organization_name, "status" => $actstatus, "username" => $euser['email'], "fname" => $euser["fname"], "user_name" => trim($euser["fname"] . " " . $euser["lname"]), "admin_name" => trim($loggedInUser['fname'] . " " . $loggedInUser['lname']));
                $configVars = serialize($viewVars);
                $emailQueue[] = array("to" => $euser['email'], "subject" => $subject, "config_vars" => $configVars, "template" => "org_action");
            }
            unset($userdetails["email"]);
            $this->Email->saveMany($emailQueue);
            $this->set(array(
                'result' => array("status" => true
                    , "msg" => $updatemsg, 'data' => $userdetails),
                '_serialize' => array('result')
            ));
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Token is missing in request"),
                '_serialize' => array('result')
            ));
        }
    }

    public function userOrgAdminAccessAction() {
        if (isset($this->request->data['token'])) {
            $org_id = $this->request->data['oid'];
            $role = $this->request->data['role'];
            $user_id = $this->request->data['user_id'];

            $this->UserOrganization->updateAll(
                    array('UserOrganization.user_role' => "'" . $role . "'"), array('UserOrganization.organization_id' => $org_id, 'UserOrganization.user_id' => $user_id)
            );
            $userinfo = $this->UserOrganization->find("all", array(
                'joins' => array(array('table' => 'users', 'type' => 'INNER', 'conditions' => array('users.id = UserOrganization.user_id'))),
                'conditions' => array('UserOrganization.organization_id' => $org_id, 'UserOrganization.user_id' => $user_id),
                'fields' => array('users.id,users.fname,users.lname,users.email,users.image,UserOrganization.status,UserOrganization.user_role')
            ));
            //$userdetails = array();
            $roleList = $this->Common->setSessionRoles();
            $successdata = "";
            $emailQueue = array();
            if ($role == 2)
                $subject = "nDorse Notification -- Admin control granted to a user";
            else
                $subject = "nDorse Notification -- Admin control revoked from a user";

            foreach ($userinfo as $userval) {
                if ($userval["users"]["image"] != "") {
                    $userval["users"]["image"] = Router::url('/', true) . "app/webroot/" . PROFILE_IMAGE_DIR . "small/" . $userval["users"]["image"];
                }
                $userval['UserOrganization']["role"] = $roleList[$userval['UserOrganization']["user_role"]];
                $userval['UserOrganization']["user_role"] = $userval['UserOrganization']["user_role"];
                // $userdetails[] = array_merge($userval['users'], $userval['UserOrganization']);
                $successdata = $userval['UserOrganization'];
                $viewVars = array("org_id" => $org_id, "role" => $role, "user_id" => $user_id, "fname" => $userval["users"]["fname"]);
                $configVars = serialize($viewVars);
                $emailQueue[] = array("to" => $userval["users"]['email'], "subject" => $subject, "config_vars" => $configVars, "template" => "org_admin_access_action");
            }

            $this->Email->saveMany($emailQueue);
            $this->set(array(
                'result' => array("status" => true
                    , "msg" => "User's role updated successfully.", 'data' => $successdata),
                '_serialize' => array('result')
            ));
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Token is missing in request"),
                '_serialize' => array('result')
            ));
        }
    }

    // search user api for organization
    public function userOrgSearch() {


        if (isset($this->request->query['token'])) {

            $org_id = $this->request->query['oid'];
            $keyword = $this->request->query['keyword'];
            $keyword = $keyword . "%";
            $userinfo = $this->UserOrganization->find("all", array(
                'joins' => array(array('table' => 'users', 'type' => 'INNER', 'conditions' => array('users.id = UserOrganization.user_id'))),
                'conditions' => array('UserOrganization.organization_id' => $org_id, 'UserOrganization.user_role' => array('3', '2'), 'UserOrganization.status' => array('0', '1', '3'), array('OR' => array('users.fname LIKE' => $keyword, 'users.lname LIKE' => $keyword))),
                'fields' => array('users.id,users.fname,users.lname,users.image,users.email,UserOrganization.status')
            ));
            $userdetails = array();
            foreach ($userinfo as $userval) {
                if ($userval["users"]["image"] != "") {
                    $userval["users"]["image"] = Router::url('/', true) . "app/webroot/" . PROFILE_IMAGE_DIR . "small/" . $userval["users"]["image"];
                }
                $userval["users"]["name"] = $userval["users"]["fname"] . " " . $userval["users"]["lname"];
                unset($userval["users"]["fname"]);
                unset($userval["users"]["lname"]);
                $userdetails[] = array_merge($userval['users'], $userval['UserOrganization']);
            }
            $this->set(array(
                'result' => array("status" => true
                    , "msg" => "organization users", 'data' => $userdetails),
                '_serialize' => array('result')
            ));
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Token is missing in request"),
                '_serialize' => array('result')
            ));
        }
    }

    // get all organization for loggeding user
    public function getAllOrganization_old() {
        if (isset($this->request->data['token'])) {
            $token = $this->request->data['token'];
            $userid = $this->getuserData($token);
            $type = $this->request->data['type'];
            if (!empty($userid)) {
                $user_id = $userid["users"]["id"];
                $array = array();
                $array['fields'] = array('id', 'name', 'short_name', 'image', 'status');
                $conditionarray = array();
                if ($type == "user") {
                    $array['fields'] = array('id', 'name', 'short_name', 'image', 'status');
                    $conditionarray['admin_id'] = $user_id;
                    $conditionarray['status'] = array(0, 1);
                } elseif ($type == "endorser") {
                    $array['fields'] = array('id', 'name', 'short_name', 'image', 'UserOrganization.user_role');
                    $conditionarray['Organization.status'] = 1;
                    //$conditionarray['Organization.admin_id !='] = $user_id;
                    //
					    $array['joins'] = array(
                        array(
                            'table' => 'user_organizations',
                            'alias' => 'UserOrganization',
                            'type' => 'INNER',
                            'conditions' => array(
                                'UserOrganization.user_id = ' . $user_id,
                                'UserOrganization.organization_id = Organization.id'
                            )
                        )
                    );
                    //
                } else {
                    $array['fields'] = array('id', 'name', 'short_name', 'image', 'UserOrganization.user_id');
                    $conditionarray['Organization.status'] = 1;
                    $array['joins'] = array(
                        array(
                            'table' => 'user_organizations',
                            'alias' => 'UserOrganization',
                            'type' => 'LEFT',
                            'conditions' => array(
                                'UserOrganization.user_id = ' . $user_id,
                                'UserOrganization.organization_id = Organization.id'
                            )
                        )
                    );
                }
                $array['conditions'] = $conditionarray;
                $orgArray = $this->Organization->find("all", $array);

                $orginfo = array();
                foreach ($orgArray as $val) {

                    $val1 = $val["Organization"];
                    if ($type == "public") {
                        $exituser = $val["UserOrganization"];
                    } elseif ($type == "endorser") {
                        if ($val["UserOrganization"]["user_role"] == 2) {
                            $role = "admin";
                        } elseif ($val["UserOrganization"]["user_role"] == 4) {
                            $role = "designated_admin";
                        } else {
                            $role = "ndorser";
                        }
                        $val1["role"] = $role;
                    }
                    if ($val1["image"] != "") {
                        $val1["image"] = Router::url('/', true) . "app/webroot/" . ORG_IMAGE_DIR . "small/" . $val1["image"];
                    }
                    if ($type != "public") {
                        $orginfo[] = $val1;
                    } elseif ($exituser["user_id"] != $user_id) {
                        $orginfo[] = $val1;
                    }
                }
                //$orginfo["user"]["token"]= $token;

                $orginfo1["token"] = $token;
                $orginfo1["organization"] = $orginfo;
                $orginfo1 = array("token" => $token, "oganization" => $orginfo);


                $this->set(array(
                    'result' => array("status" => true
                        , "msg" => "organization details", 'data' => $orginfo1),
                    '_serialize' => array('result')
                ));
            } else {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Invalid token in request"),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Token is missing in request"),
                '_serialize' => array('result')
            ));
        }
    }

    public function getAllOrganization() {
        if (isset($this->request->data['token'])) {
            $token = $this->request->data['token'];
            $userid = $this->getuserData($token);
            $type = $this->request->data['type'];
            $org_id = 0;
            if (isset($this->request->data['org_id']) && $this->request->data['org_id'] > 0) {
                $org_id = $this->request->data['org_id'];
            }
            if (isset($this->request->data["limit"])) {
                $limit = $this->request->data["limit"];
            } else {
                $limit = Configure::read("pageLimit");
            }
            if (isset($this->request->data["page"]) && $this->request->data["page"] > 1) {
                $page = $this->request->data["page"];
                $offset = $page * $limit;
            } else {
                $page = 1;
                $offset = 0;
            }
            $countfields = "count(*) as cnt";
            if (!empty($userid)) {
                $user_id = $userid["users"]["id"];
                $array = array();
                $selectfields = array('id', 'name', 'short_name', 'image', 'status', 'health_url');

                $conditionarray = array();
                if ($type == "user") {
                    $array['fields'] = array('Organization.id', 'name', 'short_name', 'image', 'health_url', 'UserOrganization.status', 'UserOrganization.user_role');
                    //$conditionarray['admin_id'] = $user_id;

                    $array['joins'] = array(
                        array(
                            'table' => 'user_organizations',
                            'alias' => 'UserOrganization',
                            'type' => 'INNER',
                            'conditions' => array(
                                'UserOrganization.user_id = ' . $user_id,
                                'UserOrganization.organization_id = Organization.id',
                                'UserOrganization.joined = 1',
                                'UserOrganization.status = 1',
                                'UserOrganization.user_role' => array('2')
                            )
                        )
                    );
                    $conditionarray['Organization.status'] = array(0, 1);
                } elseif ($type == "endorser") {
                    $selectfields = array('id', 'name', 'short_name', 'image', 'about', 'status', 'UserOrganization.user_role', 'health_url');
                    // $conditionarray['Organization.status'] = array(0, 1);
                    $conditionarray['Organization.status'] = array(0, 1);
                    //$conditionarray['Organization.admin_id !='] = $user_id;
                    //
					    $array['joins'] = array(
                        array(
                            'table' => 'user_organizations',
                            'alias' => 'UserOrganization',
                            'type' => 'INNER',
                            'conditions' => array(
                                'UserOrganization.user_id = ' . $user_id,
                                'UserOrganization.organization_id = Organization.id',
                                'UserOrganization.joined = 1',
                                'UserOrganization.status = 1',
                                'UserOrganization.user_role' => array(2, 3)
                            )
                        )
                    );
                    //
                } else {
                    $selectfields = array('id', 'name', 'short_name', 'image', 'about', 'health_url', 'OrgRequests.user_id');
                    $conditionarray['Organization.status'] = 1;

                    $farray = array();
                    $farray['fields'] = array('organization_id');
                    $farray['conditions'] = array('UserOrganization.user_id = ' . $user_id, 'UserOrganization.status !=2');
                    $orgusers = $this->UserOrganization->find("all", $farray);
                    $org_idarray = array();
                    foreach ($orgusers as $orgval) {
                        $org_idarray[] = $orgval["UserOrganization"]["organization_id"];
                    }
                    //  echo $this->UserOrganization->getLastQuery();
                    //print_r($org_idarray);exit;
                    $array['joins'] = array(
                        array(
                            'table' => 'org_requests',
                            'alias' => 'OrgRequests',
                            'type' => 'LEFT',
                            'conditions' => array(
                                'OrgRequests.user_id = ' . $user_id,
                                'OrgRequests.organization_id = Organization.id',
                                'OrgRequests.status = 0'
                            )
                        )
                    );
                    if (!empty($org_idarray)) {
                        $conditionarray['Organization.id !='] = $org_idarray;
                    }
                }
                if ($org_id > 0) {
                    $conditionarray['Organization.id'] = $org_id;
                }
                $array['conditions'] = $conditionarray;
                $array['fields'] = $countfields;
                if ($org_id == 0) {
                    $orgArray = $this->Organization->find("all", $array);
                    $totalorg = $orgArray[0][0]["cnt"];
                    $totalpage = ceil($totalorg / $limit);

                    $array['limit'] = $limit;
                    $array['page'] = $page;
                    $array['offset'] = $offset;
                }
                $array['fields'] = $selectfields;
                $orgArray = $this->Organization->find("all", $array);
                //echo $this->Organization->getLastQuery();
                //print_r($orgArray);exit;
                $orginfo = array();
                foreach ($orgArray as $val) {

                    $requestuser = 0;
                    $val1 = $val["Organization"];
                    //echo $type;
                    if ($type == "public") {
                        // $exituser = $val["UserOrganization"];

                        $requestuser = $val["OrgRequests"]["user_id"];
                        if ($requestuser > 0) {
                            $val1["is_request"] = $requestuser;
                        } else {
                            $val1["is_request"] = 0;
                        }
                        //print_r($val1);
                    } elseif ($type == "endorser") {
                        if ($val["UserOrganization"]["user_role"] == 2) {
                            $role = "admin";
                        } elseif ($val["UserOrganization"]["user_role"] == 4) {
                            $role = "designated_admin";
                        } else {
                            $role = "ndorser";
                        }
                        $val1["role"] = $role;
                    } elseif ($type == "user") {

                        //if ($val["UserOrganization"]["user_role"] == 2) {
                        //      $role = "admin";
                        //  } elseif ($val["UserOrganization"]["user_role"] == 4) {
                        //      $role = "designated_admin";
                        //  } else {
                        //      $role = "ndorser";
                        //  }
                        //  $val1["role"] = $role;   
                    }
                    $val1["health_url"] = Router::url('/', true) . "img/" . $val1["health_url"];
                    if ($val1["image"] != "") {
                        $val1["image"] = Router::url('/', true) . "app/webroot/" . ORG_IMAGE_DIR . "small/" . $val1["image"];
                    }
                    //if ($type != "public") {
                    $orginfo[] = $val1;
                    //} elseif ($exituser["user_id"] != $user_id) {
                    //   $orginfo[] = $val1;
                    // }
                }

                $orginfo1["token"] = $token;
                //$orginfo1["total_page"] = $totalpage;
                $orginfo1["organization"] = $orginfo;
                if ($org_id == 0) {
                    $orginfo1 = array("token" => $token, "organization" => $orginfo, "total_page" => $totalpage);
                } else {
                    $orginfo1 = array("token" => $token, "organization" => $orginfo);
                }

                $this->set(array(
                    'result' => array("status" => true
                        , "msg" => "organization details", 'data' => $orginfo1),
                    '_serialize' => array('result')
                ));
            } else {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Invalid token in request"),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Token is missing in request"),
                '_serialize' => array('result')
            ));
        }
    }

    // get search all organization for loggeding user
    public function getOrgSearch() {
        if (isset($this->request->data['token']) && isset($this->request->data['keyword'])) {
            $token = $this->request->data['token'];
            $userid = $this->getuserData($token);

            if (!empty($userid)) {
                $user_id = $userid["users"]["id"];
                $keyword = $this->request->data['keyword'];
                $type = "public";
                if (isset($this->request->data['type']) && $this->request->data['type'] != "") {
                    $type = $this->request->data['type'];
                }
                $array = array();
                $array['fields'] = array('id', 'name', 'short_name');

                if ($type == "user") {
                    $array['conditions'] = array('status' => 1, 'admin_id' => $user_id, array('OR' => array('name LIKE' => '%' . $keyword . '%', 'short_name LIKE' => '%' . $keyword . '%')));
                } else {
                    //$array['joins'] = array(
                    //    array(
                    //        'table' => 'user_organizations',
                    //        'alias' => 'UserOrganization',
                    //        'type' => 'LEFT',
                    //        'conditions' => array(
                    //            'UserOrganization.user_id = ' . $user_id,
                    //            'UserOrganization.organization_id = Organization.id',
                    //            'UserOrganization.status IN (0,1,3)'
                    //        )
                    //    )
                    //);
                    //
                    $farray = array();
                    $farray['fields'] = array('organization_id');
                    $farray['conditions'] = array('UserOrganization.user_id = ' . $user_id, 'UserOrganization.status !=2');
                    $orgusers = $this->UserOrganization->find("all", $farray);
                    $org_idarray = array();
                    foreach ($orgusers as $orgval) {
                        $org_idarray[] = $orgval["UserOrganization"]["organization_id"];
                    }
                    //  echo $this->UserOrganization->getLastQuery();
                    //print_r($org_idarray);exit;

                    if (!empty($org_idarray)) {
                        //$conditionarray['Organization.id !='] = $org_idarray;
                        $array['conditions'] = array('Organization.id !=' => $org_idarray, 'Organization.status' => 1, array('OR' => array('name LIKE' => '%' . $keyword . '%', 'short_name LIKE' => '%' . $keyword . '%')));
                    } else {

                        //
                        $array['conditions'] = array('Organization.status' => 1, array('OR' => array('name LIKE' => '%' . $keyword . '%', 'short_name LIKE' => '%' . $keyword . '%')));
                    }
                }

                $orgArray = $this->Organization->find("all", $array);
                // echo $this->Organization->getLastQuery();
                $orginfo = array();
                foreach ($orgArray as $val) {

                    //if ($val["Organization"]["image"] != "") {
                    //    $val["Organization"]["image"] = Router::url('/', true) . "app/webroot/" . ORG_IMAGE_DIR . "small/" . $val["Organization"]["image"];
                    //}
                    // if (empty($val["UserOrganization"])) {


                    $orginfo[] = $val["Organization"];
                    // }
                }
                $orginfo1["token"] = $token;
                $orginfo1["organization"] = $orginfo;
                $this->set(array(
                    'result' => array("status" => true
                        , "msg" => "search organization details", 'data' => $orginfo1),
                    '_serialize' => array('result')
                ));
            } else {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Invalid token in request"),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Token or keyword is missing in request"),
                '_serialize' => array('result')
            ));
        }
    }

    public function getOrgAction() {

        if (isset($this->request->data['token'])) {
            $org_id = $this->request->data['oid'];
            $status = $this->request->data['status'];

            $this->Organization->updateAll(
                    array('Organization.status' => $status), array('id' => $org_id)
            );
            $array = array();
            $array['fields'] = array('id', 'name', 'short_name', 'image', 'status');
            $array['conditions'] = array('id' => $org_id);
            $orgArray = $this->Organization->find("all", $array);
            $orginfo = "";
            foreach ($orgArray as $val) {

                if ($val["Organization"]["image"] != "") {
                    $val["Organization"]["image"] = Router::url('/', true) . "app/webroot/" . ORG_IMAGE_DIR . "small/" . $val["Organization"]["image"];
                }

                $orginfo = $val;
            }
            $viewVars = array("org_id" => $org_id, "status" => $status, "name" => $orgArray[0]["Organization"]["name"]);
            $configVars = serialize($viewVars);
            if ($status == 0) {
                $statusmsg = "deactivated";
            } elseif ($status == 2) {
                $statusmsg = "deleted";
            } elseif ($status == 1) {
                $statusmsg = "activated";
            }

            $subject = "nDorse Notification -- Organization " . $statusmsg . " by admin";
            $emailQueue[] = array("to" => "admin@ndorse.com", "subject" => $subject, "config_vars" => $configVars, "template" => "org_status_action");
            $this->Email->saveMany($emailQueue);

            $this->getTimelyUpdates();

            $this->set(array(
                'result' => array("status" => true
                    , "msg" => "Organization status updated successfully.", 'data' => $orginfo),
                '_serialize' => array('result')
            ));
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Token is missing in request"),
                '_serialize' => array('result')
            ));
        }
    }

    public function saveOrgoption() {
        if (isset($this->request->data['token'])) {

            $org_id = $this->request->data['org_id'];
            $entity_id = 0;
            $job_title_id = 0;
            $dept_id = 0;
            if (isset($this->request->data['entity_id'])) {
                $entity_id = $this->request->data['entity_id'];
            }
            $userinfo = $this->getuserData($this->request->data['token'], false);
            $user_id = $userinfo["users"]["id"];
            if (isset($this->request->data['department_id'])) {
                $dept_id = $this->request->data['department_id'];
            }
            if (isset($this->request->data['job_title_id'])) {
                $job_title_id = $this->request->data['job_title_id'];
            }
            $this->UserOrganization->updateAll(
                    array('UserOrganization.entity_id' => "'" . $entity_id . "'", 'UserOrganization.department_id' => "'" . $dept_id . "'", 'UserOrganization.job_title_id' => "'" . $job_title_id . "'"), array('UserOrganization.organization_id' => $org_id, 'UserOrganization.user_id' => $user_id)
            );
            $organization = $this->Organization->findById($org_id);
            //echo $this->Organization->getLastQuery();die;

            $this->set(array(
                'result' => array("status" => true
                    , "msg" => "Role for " . $organization['Organization']['name'] . " updated successfully.", 'data' => true),
                '_serialize' => array('result')
            ));
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Token is missing in request"),
                '_serialize' => array('result')
            ));
        }
    }

    public function endorse() {
        // @TODO : email and push notification to endorsee

        if ($this->request->is('post')) {
            $loggedInUser = $this->Auth->user();

            $endorseList = json_decode($this->request->data['endorse_list']);
            //pr($endorseList);die;

            $endorsementIds = array();
            $coreValues = explode(",", $this->request->data['core_values']);
            $emojisValue = array();
            if (isset($this->request->data['emojis']) && trim($this->request->data['emojis']) != "") {
                $emojisValue = explode(",", $this->request->data['emojis']);
            }

            $errorsArray = array();
            $error = false;
            $coreValueArray = array();
            $emojisValueArray = array();
            $subject = $loggedInUser['fname'] . " " . $loggedInUser['lname'] . " has endorsed you.";
            $endorseeIds = array();

            foreach ($endorseList as $endorseRequest) {
                $endorsement['endorser_id'] = $loggedInUser['id'];
                $endorsement['organization_id'] = $loggedInUser['current_org']['id'];
                $endorsement['endorsed_id'] = $endorseRequest->id;
                $endorsement['endorsement_for'] = $endorseRequest->for;
                $endorsement['type'] = isset($this->request->data['type']) ? $this->request->data['type'] : "";
                $endorsement['message'] = isset($this->request->data['message']) ? $this->request->data['message'] : "";
                $endorsement['emojis_count'] = count($emojisValue) ? 1 : 0;

                $this->Endorsement->clear();
                $this->Endorsement->set($endorsement);
                if ($this->Endorsement->validates()) {
                    if ($this->Endorsement->save()) {
                        $endorsementIds[] = $this->Endorsement->id;

                        foreach ($coreValues as $core_value) {
                            if (trim($core_value) != "") {
                                $coreValueArray[] = array("endorsement_id" => $this->Endorsement->id, "value_id" => $core_value);
                            }
                        }
                        foreach ($emojisValue as $emojis_value) {
                            $emojisValueArray[] = array("endorsement_id" => $this->Endorsement->id, "name" => $emojis_value, "type" => "emojis");
                        }
                    } else {
                        $error = true;
                        $this->set(array(
                            'result' => array("status" => false
                                , "msg" => "Unable to nDorse."),
                            '_serialize' => array('result')
                        ));
                    }
                } else {
                    $error = true;
                    $errors = $this->Endorsement->validationErrors;



                    foreach ($errors as $key => $error) {
                        $errorsArray[$key] = $error[0];
                    }

                    $this->set(array(
                        'result' => array("status" => false
                            , "msg" => "Error!", 'errors' => $errorsArray),
                        '_serialize' => array('result')
                    ));

                    break;
                }
            }

            if ($error) {
                return;
            }

            if (!empty($coreValueArray)) {
                $this->EndorseCoreValue->saveMany($coreValueArray);
            }
            if (!empty($emojisValueArray)) {

                $this->EndorseAttachment->saveMany($emojisValueArray);
            }

            exec("wget -bqO- " . Router::url('/', true) . "/cron/endorseEmails &> /dev/null");
//            exec("nohup wget " . Router::url('/', true) . "/cron/endorseEmails > /dev/null 2>&1 &");
//            exec( "php ".WWW_ROOT."cron_scheduler.php /cron/endorseEmails/ > /dev/null &");

            $this->set(array(
                'result' => array("status" => true
                    , "msg" => "nDorsement submitted!", "data" => array('endorsement_ids' => $endorsementIds)),
                '_serialize' => array('result')
            ));
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Get call not allowed."),
                '_serialize' => array('result')
            ));
        }
    }

    public function saveEndorseAttachment() {
        if ($this->request->is('post')) {
            $loggedInUser = $this->Auth->user();

            $endorsementIds = explode(",", $this->request->data['endorsement_ids']);

            if ($this->request->data['type'] == "image") {
                $this->request->data['image'] = $this->request->data['attachment'];

                $this->EndorseAttachment->set($this->request->data);
                if ($this->EndorseAttachment->validates()) {
                    $uploadPath = ENDORSE_IMAGE_DIR;

                    $imageExtension = $this->EndorseAttachment->data['EndorseAttachment']['file_extension'];
                    $imageData = $this->EndorseAttachment->data['EndorseAttachment']['imageData'];

                    $imageName = str_replace(",", "", $this->request->data['endorsement_ids']);
                    $imageName = $imageName . "_" . time() . "." . $imageExtension;
                    $imageName = $this->Common->getUploadFilename($uploadPath, $imageName);

                    if ($this->Common->uploadApiImage($uploadPath, $imageName, $imageData)) {
                        //$this->request->data['name'] = $imageName;
                        unset($this->EndorseAttachment->validate['image']);
                        //

                        $params = array();
                        $params['fields'] = "id,image_count";
                        $params['conditions'] = array("id" => $endorsementIds);
                        $imageendorsement = $this->Endorsement->find("all", $params);

                        $endorseimagearray = array();
                        foreach ($imageendorsement as $imgval) {
                            $endorseimagearray[$imgval["Endorsement"]["id"]] = $imgval["Endorsement"]["image_count"];
                        }
                        //print_r($endorseimagearray);
                        //
																								$endorseupdate = array();
                        foreach ($endorsementIds as $id) {

                            $endorseAttachments[] = array("endorsement_id" => $id, "type" => $this->request->data['type'], "name" => $imageName);
                            // check if image_count = 0 then update image_count flag
                            if ($endorseimagearray[$id] == 0) {
                                //echo $id;
                                $this->Endorsement->id = $id;
                                $this->Endorsement->savefield("image_count", 1);
                            }
                        }


                        if ($this->EndorseAttachment->saveMany($endorseAttachments)) {

                            $this->set(array(
                                'result' => array("status" => true
                                    , "msg" => "Attachments sent successfully."),
                                '_serialize' => array('result')
                            ));
                        } else {
                            $this->set(array(
                                'result' => array("status" => false
                                    , "msg" => "Attachment failed due to server error! Please try nDorsement later or without attachment."),
                                '_serialize' => array('result')
                            ));
                        }
                    } else {
                        $this->set(array(
                            'result' => array("status" => false
                                , "msg" => "Attachment failed due to server error! Please try nDorsement later or without attachment."),
                            '_serialize' => array('result')
                        ));
                    }
                } else {
                    $errors = $this->EndorseAttachment->validationErrors;

                    $errorsArray = array();

                    foreach ($errors as $key => $error) {
                        $errorsArray[$key] = $error[0];
                    }


                    $this->set(array(
                        'result' => array("status" => false
                            , "msg" => "Error!", 'errors' => $errorsArray),
                        '_serialize' => array('result')
                    ));
                }
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Get call not allowed."),
                '_serialize' => array('result')
            ));
        }
    }

    public function getCountryStateList() {


        $countryinfo = $this->Country->find("all", array(
            'joins' => array(array('table' => 'states', 'type' => 'INNER', 'conditions' => array('states.country_id = Country.id'))),
            'fields' => array('Country.name,states.name'),
            'order' => 'Country.name,states.name'
        ));
        $countryarray = array();
        foreach ($countryinfo as $val) {
            $countryarray[$val["Country"]["name"]][] = $val["states"]["name"];
        }
        return $countryarray;
    }

    public function getOrgValues($org_id, $model = "OrgJobTitles", $all = 0, $valueid = array()) {
        $title = "name";
        $fields = array("id");
        $value = "";
        //if($valueid !="")
        //{
        //	$value = explode(",",$valueid);
        //}
        if ($model == "OrgJobTitles") {
            $title = "title";
            $fields[] = "title";
        } elseif ($model == "OrgCoreValues") {
            $fields[] = "name";
            $fields[] = "color_code";
        } else {
            $fields[] = "name";
            $title = "name";
        }
        $condarr = array($model . '.organization_id' => $org_id);

        if ($all == 1) {
            //echo "test1";
            if (!empty($valueid)) {
                $condarr[$model . '.id'] = $valueid;
            }
        } else {

            $condarr[$model . '.status'] = 1;
        }

//		if($all)
//		{
//			
//			$orgcoreinfo = $this->$model->find("all", array(
//                    'conditions' => $condarr,
//                    'fields' => $fields
//                ));
//		}else{
        $orgcoreinfo = $this->$model->find("all", array(
            'conditions' => $condarr,
            'fields' => $fields
        ));
        //}
        //echo $this->Organization->getLastQuery();
        $oinfo = array();
        foreach ($orgcoreinfo as $val) {
            if ($model == "OrgCoreValues") {
                // $oinfo[] = array("id" => $val[$model]["id"], "name" => strtolower($val[$model][$title]), "color_code" => $val[$model]["color_code"]);
                $oinfo[] = array("id" => $val[$model]["id"], "name" => $val[$model][$title], "color_code" => $val[$model]["color_code"]);
            } else {
                // $oinfo[] = array("id" => $val[$model]["id"], "name" => strtolower($val[$model][$title]));
                $oinfo[] = array("id" => $val[$model]["id"], "name" => $val[$model][$title]);
            }
        }
        return $oinfo;
    }

    public function getOrgoption() {

        if (isset($this->request->data['token']) && isset($this->request->data['org_id'])) {
            $orgArray = array();
            $org_id = $this->request->data['org_id'];
            $orgArray["departments"] = $this->getOrgValues($org_id, "OrgDepartments");
            $orgArray["entity"] = $this->getOrgValues($org_id, "Entity");
            $orgArray["job_titles"] = $this->getOrgValues($org_id, "OrgJobTitles");

            $userinfo = $this->getuserData($this->request->data['token'], false);
            $user_id = $userinfo["users"]["id"];
            $userOrganization = $this->UserOrganization->find("first", array("fields" => array('department_id', 'job_title_id', 'entity_id'), "conditions" => array("organization_id" => $org_id, "user_id" => $user_id)));
            $selectdata = array();
            if (!empty($userOrganization)) {
                $selectdata = $userOrganization["UserOrganization"];
            }
            $orgArray["option_selected"] = $selectdata;
            $this->set(array(
                'result' => array("status" => true
                    , "msg" => "Organization entity,department,job_titles data ",
                    "data" => $orgArray),
                '_serialize' => array('result')
            ));
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Token or keyword is missing in request"),
                '_serialize' => array('result')
            ));
        }
    }

    public function joinOrganization() {
        if ($this->request->is('post')) {
            $loggedinUser = $this->Auth->user();
            $organization = $this->Organization->findBySecretCode($this->request->data['org_code']);
            //echo $this->Organization->getLastQuery();die;
            if (empty($organization)) {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Invalid Unique Code."),
                    '_serialize' => array('result')
                ));
                return;
            } else {

                if ($organization['Organization']['status'] != 1) {
                    $this->set(array(
                        'result' => array("status" => false
                            , "msg" => "Organization Inactive!"),
                        '_serialize' => array('result')
                    ));
                    return;
                }

                $statusConfig = Configure::read("statusConfig");

                $alreadyJoined = $this->UserOrganization->find("first", array("conditions" => array("user_id" => $loggedinUser['id'], 'organization_id' => $organization['Organization']['id'])));

                if ($alreadyJoined) {
                    if ($alreadyJoined['UserOrganization']['status'] != $statusConfig['deleted'] && $alreadyJoined['UserOrganization']['joined'] == 1) {
                        $this->set(array(
                            'result' => array("status" => false
                                , "msg" => "You are already a member of this Organization."),
                            '_serialize' => array('result')
                        ));
                        return;
                    } else {
                        $userOrgId = $alreadyJoined['UserOrganization']['id'];
                    }
                }
                $invite = $this->Invite->find("first", array("conditions" => array("email" => $loggedinUser['email'], 'organization_id' => $organization['Organization']['id'])));
                if (empty($invite)) {
                    $this->set(array(
                        'result' => array("status" => false
                            , "msg" => "You do not have access to this Organization. Please request a Unique Code through JOIN Organization."),
                        '_serialize' => array('result')
                    ));

                    return;
                } else {
                    $inviteId = $invite['Invite']['id'];
                }
            }

            if (isset($this->request->data['org_code'])) {

                $currentOrg = isset($loggedinUser['current_org']) ? $loggedinUser['current_org'] : array();

                if (isset($userOrgId) && ($alreadyJoined['UserOrganization']['status'] == $statusConfig['active'] || $alreadyJoined['UserOrganization']['status'] == $statusConfig['eval'])) {
                    $poolType = $alreadyJoined['UserOrganization']['pool_type'];
                    $status = $alreadyJoined['UserOrganization']['status'];
                } else {
                    $params = array();
                    $params['conditions'] = array("organization_id" => $organization['Organization']['id'], "UserOrganization.status" => array($statusConfig['active'], $statusConfig['eval']));
                    $params['group'] = 'pool_type';
                    $params['fields'] = array("UserOrganization.pool_type", "COUNT(UserOrganization.id) as count");
                    $userOrgStats = $this->UserOrganization->find("all", $params);

                    $freeCount = 0;
                    $paidCount = 0;
                    foreach ($userOrgStats as $stats) {
                        if ($stats['UserOrganization']['pool_type'] == 'free') {
                            $freeCount = $stats[0]['count'];
                        } else {
                            $paidCount = $stats[0]['count'];
                        }
                    }


                    if ($freeCount >= FREE_POOL_USER_COUNT) {
                        $poolType = "paid";

                        $params = array();
                        $conditions = array();
                        $todayDate = date('Y-m-d H:i:s');
                        //                    $conditions['start_date <='] = $todayDate;
                        //                    $conditions['end_date >='] = $todayDate;
                        $conditions['Subscription.status'] = 1;
                        $conditions['Subscription.organization_id'] = $organization['Organization']['id'];
                        $params['conditions'] = $conditions;
                        $currentSubscription = $this->Subscription->find("first", $params);
                        if (!empty($currentSubscription)) {
                            $poolPurchased = $currentSubscription['Subscription']['pool_purchased'];

                            if ($paidCount >= $poolPurchased) {
                                //$status = $statusConfig['invite_inactive'];
                                $status = $statusConfig['inactive'];
                            } else {
                                $status = $statusConfig['active'];
                            }
                        } else {
                            //$status = $statusConfig['invite_inactive'];
                            $status = $statusConfig['inactive'];
                        }
                    } else {
                        $poolType = "free";
                        $status = $statusConfig['active'];
                    }
                }

                $newUserOrganization = array(
                    "organization_id" => $organization['Organization']['id'],
                    "user_id" => $loggedinUser['id'],
                    "pool_type" => $poolType,
                    "status" => $status,
                    //"department_id" => "",
                    //"job_title_id" => "",
                    //"entity_id" => "",
                    "flow" => "app_invite",
                    "joined" => 1
                );

                if (isset($userOrgId)) {
                    $newUserOrganization['id'] = $userOrgId;
                    $newUserOrganization['flow'] = 'web_invite';
                }

                $isDefault = false;
                $saved = false;
                if ($invite['Invite']['flow'] == "app") {
                    $saved = $this->UserOrganization->save($newUserOrganization);
                    $userOrgId = $this->UserOrganization->id;
                } else {
                    $userOrgId = $alreadyJoined['UserOrganization']['id'];
                    $saved = $this->UserOrganization->save($newUserOrganization);
//                    $saved = $this->UserOrganization->updateAll(array("joined" => 1), array("UserOrganization.id" => $userOrgId));
//                    $status = $alreadyJoined['UserOrganization']['status'];
                }

                if ($saved) {
                    $organization['Organization']['org_role'] = 'endorser';
                    $isActive = false;
                    if (empty($currentOrg)) {
                        $roleList = $this->Common->setSessionRoles();

//                        if ($status == $statusConfig['active']) {
//                            $currentOrg = $organization['Organization'];
//                            $currentOrg['org_role'] = 'endorser';
//                            $this->Session->write('Auth.User.current_org', $currentOrg);
//                        }

                        $defaultOrg = array("organization_id" => $organization['Organization']['id'], "user_id" => $loggedinUser['id']);
                        $this->DefaultOrg->save($defaultOrg);

                        $isDefault = true;
                    }

                    if ($status == $statusConfig['active']) {
                        $currentOrg = $organization['Organization'];
                        $this->Session->write('Auth.User.current_org', $currentOrg);

                        $msg = "You have successfully joined the Organization!!";
                        $isActive = true;
                    } else if ($status == $statusConfig['eval']) {
                        $msg = "You have successfully joined the Organization, but you are in evaluation mode.";

//                        $this->set(array(
//                            'result' => array("status" => true
//                                , "msg" => $msg, "data" => $organization, "isDefault" => $isDefault, "isActive" => false),
//                            '_serialize' => array('result')
//                        ));
                    } else {
                        $msg = "You have successfully joined " . $organization['Organization']['name'] . "! Your status is inactive. To activate your status, contact your Organization Admin to purchase additional subscription.";

                        $admin = $this->User->findById($organization['Organization']['admin_id']);

                        $subject = "Purchase subscription";
                        $template = "less_subscription_admin";
                        $viewVars = serialize(array("org_name" => $organization['Organization']['name'], 'user' => $loggedinUser));
                        $to = $admin['User']['email'];
                        //$this->Common->sendEmail($admin['User']['email'], $subject, $template, $viewVars);
                        $email = array("to" => $to, "subject" => $subject, "config_vars" => $viewVars, "template" => $template);
                        $this->Email->save($email);

//                        $this->set(array(
//                            'result' => array("status" => false
//                                , "msg" => $msg, "isDefault" => $isDefault, "isActive" => false),
//                            '_serialize' => array('result')
//                        ));
                    }

                    $this->set(array(
                        'result' => array("status" => true
                            , "msg" => $msg, "data" => $organization, "isDefault" => $isDefault, "isActive" => $isActive),
                        '_serialize' => array('result')
                    ));

                    $this->Invite->id = $inviteId;
                    $this->Invite->delete();
                    //$this->Invite->saveField("is_accepted", 1);
                } else {
                    $errors = $this->UserOrganization->validationErrors;
                    $errorsArray = array();

                    foreach ($errors as $key => $error) {
                        $errorsArray[$key] = $error[0];
                    }

                    $this->set(array(
                        'result' => array("status" => false
                            , "msg" => "Errors!", 'errors' => $errorsArray),
                        '_serialize' => array('result')
                    ));
                }
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Get call not allowed."),
                '_serialize' => array('result')
            ));
        }
    }

    public function getSubscriptionInfo() {
        if ($this->request->is('post')) {
            $loggedinUser = $this->Auth->user();
            if ($loggedinUser['current_org']['org_role'] == "admin" || $loggedinUser['current_org']['org_role'] == "designated_admin") {
                $statusConfig = Configure::read("statusConfig");
                $params = array();
                $conditions = array();
                $todayDate = date('Y-m-d H:i:s');
//                $conditions['start_date <='] = $todayDate;
//                $conditions['end_date >='] = $todayDate;
                $conditions['Subscription.status'] = 1;
                $conditions['Subscription.organization_id'] = $loggedinUser['current_org']['id'];
                $params['conditions'] = $conditions;
                $currentSubscription = $this->Subscription->find("first", $params);
                $poolPurchased = !empty($currentSubscription) ? $currentSubscription['Subscription']['pool_purchased'] + FREE_POOL_USER_COUNT : FREE_POOL_USER_COUNT;
                $joinedUser = $this->UserOrganization->find("count", array("conditions" => array("organization_id" => $loggedinUser['current_org']['id'], "UserOrganization.status" => array($statusConfig['inactive'], $statusConfig['active'], $statusConfig['eval']))));

                if ($loggedinUser['current_org']['org_role'] == "admin") {
                    $inviteMsg = "You have reached " . $poolPurchased . " user limit. To invite additional users, you'll have to purchase/upgrade the subscription.";
                } else if ($loggedinUser['current_org']['org_role'] == "designated_admin") {
                    $inviteMsg = "You have reached " . $poolPurchased . " user limit. To invite additional users, request your org admin to purchase/upgrade subscription.";
                }

                $this->set(array(
                    'result' => array("status" => true
                        , "msg" => "Subscription information",
                        "data" => array("pool_purchased" => $poolPurchased, "joined_user" => $joinedUser, "invite_msg" => $inviteMsg)),
                    '_serialize' => array('result')
                ));
            } else {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "You are not allowed to view this information"),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Get call not allowed."),
                '_serialize' => array('result')
            ));
        }
    }

    public function searchInOrganization() {
        if ($this->request->is('post')) {
            $resultData = array();
            $keyWord = $this->request->data['keyword'];
            $loggedinUser = $this->Auth->user();

            if (!isset($loggedinUser['current_org'])) {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "You have not joined any organization yet. Please join."),
                    '_serialize' => array('result')
                ));
                return;
            }

            $statusConfig = Configure::read("statusConfig");

            $startDate = date("Y-m-1 00:00:00");
            $endDate = date("Y-m-t", strtotime($startDate)) . " 23:59:59";

            $searchSelf = isset($this->request->data['search_self']) ? $this->request->data['search_self'] : false;

            if ($searchSelf) {
                $searchSelfCondition = "";
            } else {
                $searchSelfCondition = " AND User.id != " . $loggedinUser['id'];
            }

            $usersData = $this->UserOrganization->query("
																												SELECT  User.id, User.fname, User.lname, User.email, UserOrganization.status, IF(Endorsement. organization_id= " . $loggedinUser['current_org']['id'] . ", COUNT(Endorsement.id), 0) as count
																												FROM user_organizations AS UserOrganization
																												LEFT JOIN users AS User ON (UserOrganization.user_id = User.id) 
																												LEFT JOIN endorsements AS Endorsement ON (Endorsement.endorsed_id = User.id AND MONTH(Endorsement.created) = " . date("n") . " AND Endorsement.organization_id = " . $loggedinUser['current_org']['id'] . " AND Endorsement.endorser_id = " . $loggedinUser['id'] . ") 
																												WHERE ((LOWER(User.fname) LIKE LOWER('%" . $keyWord . "%')) OR (LOWER(User.lname) LIKE LOWER('%" . $keyWord . "%')) OR (LOWER(CONCAT(User.fname, ' ', User.lname)) LIKE LOWER('%" . $keyWord . "%')))	AND UserOrganization.status IN (" . $statusConfig['active'] . ", " . $statusConfig['eval'] . ")
																												AND UserOrganization.organization_id = " . $loggedinUser['current_org']['id'] . $searchSelfCondition . "
																												GROUP BY  User.id, Endorsement.endorsed_id");

            //$usersData = $this->UserOrganization->find("all", $params);
            //echo $this->UserOrganization->getLastQuery();die;
            //pr($usersData);die;

            $users = array();

            foreach ($usersData as $user) {
                //if($user['User']['id']!=$loggedinUser['id']){
                $userDetail = array();
                $userDetail['id'] = $user['User']['id'];
                $userDetail['email'] = $user['User']['email'];
                $userDetail['name'] = $user['User']['fname'] . " " . $user['User']['lname'];
                $userDetail['org_status'] = array_search($user['UserOrganization']['status'], $statusConfig);
                $userDetail['endorse_count'] = $user[0]['count'];

                $users[] = $userDetail;
                //}
            }

            $departments = array();

//												$params = array();
//												$params['joins'] = array(
//                            array(
//                                'table' => 'endorsements',
//                                'alias' => 'Endorsement',
//                                'type' => 'LEFT',
//                                'conditions' => array(
//                                    'Endorsement.endorser_id = ' . $loggedinUser['id'],
//                                    'Endorsement.endorsed_id = OrgDepartments.id',
//                                    'Endorsement.organization_id = ' . $loggedinUser['current_org']['id'],
//																																				'Endorsement.created BETWEEN \'' .$startDate . '\' AND \'' .$endDate .'\''
//                                )
//                            )
//                        );
//												
//												$conditions = array();
//												$conditions['OR']["OrgDepartments.name LIKE"] = '%' . $keyWord . '%';
//												$conditions['OrgDepartments.status'] = array($statusConfig['active']);
//												$conditions['OrgDepartments.organization_id'] = $loggedinUser['current_org']['id'];
//												
//												$params['conditions'] = $conditions;
//												
//												$params['fields'] = array("OrgDepartments.id", "OrgDepartments.name", "COUNT(Endorsement.id) as count");
//												
//												$departmentsData = $this->OrgDepartments->find("all", $params);

            $departmentsData = $this->OrgDepartments->query("
																																				SELECT OrgDepartments.id, OrgDepartments.name, COUNT(Endorsement.id) as count
																																				FROM org_departments AS OrgDepartments
																																				LEFT JOIN endorsements AS Endorsement ON (Endorsement.endorsed_id = OrgDepartments.id AND MONTH(Endorsement.created) = " . date("n") . " AND Endorsement.organization_id = " . $loggedinUser['current_org']['id'] . " AND Endorsement.endorser_id = " . $loggedinUser['id'] . ")
																																				WHERE LOWER(OrgDepartments.name) LIKE LOWER('%" . $keyWord . "%')
																																				AND OrgDepartments.status = " . $statusConfig['active'] . "
																																				AND OrgDepartments.organization_id = " . $loggedinUser['current_org']['id'] . "
																																				GROUP BY  OrgDepartments.id, Endorsement.endorsed_id");

            //echo $this->OrgDepartments->getLastQuery();die;
            //
												//pr($departmentsData);die;

            foreach ($departmentsData as $department) {
                $departmentDetail = array();
                $departmentDetail['id'] = $department['OrgDepartments']['id'];
                $departmentDetail['name'] = $department['OrgDepartments']['name'];
                $departmentDetail['endorse_count'] = $department[0]['count'];

                $departments[] = $departmentDetail;
            }

            $entities = array();

//												$params = array();
//												$params['joins'] = array(
//                            array(
//                                'table' => 'endorsements',
//                                'alias' => 'Endorsement',
//                                'type' => 'LEFT',
//                                'conditions' => array(
//                                    'Endorsement.endorser_id = ' . $loggedinUser['id'],
//                                    'Endorsement.endorsed_id = Entity.id',
//                                    'Endorsement.organization_id = ' . $loggedinUser['current_org']['id'],
//																																				'Endorsement.created BETWEEN \'' .$startDate . '\' AND \'' .$endDate .'\''
//                                )
//                            )
//                        );
//												
//												$conditions = array();
//												$conditions['OR']["Entity.name LIKE"] = '%' . $keyWord . '%';
//												$conditions['Entity.status'] = array($statusConfig['active']);
//												$conditions['Entity.organization_id'] = $loggedinUser['current_org']['id'];
//												
//												$params['conditions'] = $conditions;
//												
//												$params['fields'] = array("Entity.id", "Entity.name", "COUNT(Endorsement.id) as count");
//												
//												$entitiesData = $this->Entity->find("all", $params);

            $entitiesData = $this->Entity->query("
																																SELECT Entity.id, Entity.name, COUNT(Endorsement.id) as count
																																FROM entities AS Entity LEFT JOIN
																																endorsements AS Endorsement ON (Endorsement.endorsed_id = Entity.id AND MONTH(Endorsement.created) = " . date("n") . " AND Endorsement.organization_id = " . $loggedinUser['current_org']['id'] . " AND Endorsement.endorser_id = " . $loggedinUser['id'] . ")
																																WHERE LOWER(Entity.name) LIKE LOWER('%" . $keyWord . "%')
																																AND Entity.status = " . $statusConfig['active'] . "
																																AND Entity.organization_id = " . $loggedinUser['current_org']['id'] . "
																																GROUP BY  Entity.id, Endorsement.endorsed_id");

            //echo $this->Entity->getLastQuery();die;

            foreach ($entitiesData as $entity) {
                $entityDetail = array();
                $entityDetail['id'] = $entity['Entity']['id'];
                $entityDetail['name'] = $entity['Entity']['name'];
                $entityDetail['endorse_count'] = $entity[0]['count'];

                $entities[] = $entityDetail;
            }

            $resultData['users'] = $users;
            $resultData['departments'] = $departments;
            $resultData['entities'] = $entities;

            $this->set(array(
                'result' => array("status" => true
                    , "msg" => "Search results", "data" => $resultData),
                '_serialize' => array('result')
            ));
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Get call not allowed."),
                '_serialize' => array('result')
            ));
        }
    }

    public function getVariousOrganizationData() {

        if (isset($this->request->data['token']) && isset($this->request->data['org_id'])) {
            $resultData = array();
            $org_id = $this->request->data['org_id'];
            $resultData["core_values"] = $this->getOrgValues($org_id, "OrgCoreValues");

            $settings = $this->GlobalSetting->findByKey("endorsement_limit");
            if (!empty($settings)) {
                $resultData['endorsement_limit'] = $settings['GlobalSetting']['value'];
            }

            $this->set(array(
                'result' => array("status" => true
                    , "msg" => "Organization core values ",
                    "data" => $resultData),
                '_serialize' => array('result')
            ));
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Token or keyword is missing in request"),
                '_serialize' => array('result')
            ));
        }
    }

    public function getEndorseList() {

        if ($this->request->is('post')) {
            $statusConfig = Configure::read("statusConfig");
            $loggedInUser = $this->Auth->user();


            $user_id = $loggedInUser['id'];
            if (isset($loggedInUser['current_org'])) {
                //print_r($loggedInUser['current_org']);
                $org_id = $loggedInUser['current_org']['id'];
                $keyword = "";
                //if($this->request->data["keyword"])
                //if(isset($this->request->data["keyword"]))
                //{
                //$keyword = $this->request->data["keyword"];
                //}
                $type = $this->request->data["type"];
                $endorse_type = "";
                $endorse_search_id = "";
                if (isset($this->request->data["endorse_type"]) && $this->request->data["endorse_type"] != "") {
                    $endorse_type = $this->request->data["endorse_type"];
                }
                if (isset($this->request->data["endorse_id"]) && $this->request->data["endorse_id"] != "") {
                    $endorse_search_id = $this->request->data["endorse_id"];
                }
                $start_date = "";
                $end_date = "";
                if (isset($this->request->data["start_date"]) && $this->request->data["start_date"] != "") {
                    $start_date = $this->request->data["start_date"];
                }
                if (isset($this->request->data["end_date"]) && $this->request->data["end_date"] != "") {
                    $end_date = $this->request->data["end_date"];
                }

                $limit = Configure::read("pageLimit");
                if (isset($this->request->data["page"]) && $this->request->data["page"] > 1) {
                    $page = $this->request->data["page"];
                    $offset = $page * $limit;
                } else {
                    $page = 1;
                    $offset = 0;
                }

                $params = array();
                $params['fields'] = "count(*) as cnt";
                $conditionarray["Endorsement.organization_id"] = $org_id;
                $updateArray = array();

                if ($type == "endorser") {
                    $conditionarray["Endorsement.endorser_id"] = $user_id;
                    //$conditionarray["Endorsement.endorsed_id"] = $user_id;
                } elseif ($type == "endorsed") {
                    $updateArray['ndorsed_updated'] = '"' . date("Y-m-d H:i:s") . '"';
                    //$conditionarray["Endorsement.endorser_id"] = $user_id;
                    $conditionarray["Endorsement.endorsed_id"] = $user_id;
                } else {
                    $updateArray['live_updated'] = '"' . date("Y-m-d H:i:s") . '"';
                    $conditionarray["Endorsement.type != "] = "private";
                }
                //if($keyword!=""){
                //$conditionarray["Endorsement.id"]= $endorsmentids;		
                //}
                if ($type != "endorser") {
                    $this->UserOrganization->updateAll($updateArray, array("user_id" => $loggedInUser['id'], "organization_id" => $loggedInUser['current_org']['id']));
                }

                if ($start_date != "") {
                    $conditionarray["Endorsement.created >= "] = date("Y-m-d 00:00:00", $start_date);
                }
                if ($end_date != "") {
                    $conditionarray["Endorsement.created <= "] = date("Y-m-d 23:59:59", $end_date);
                }
                // for date search
                //	array('Equipment.created <= ' => $date,
                //  'Equipment.creatd >= ' => $date
                // )
                // end
                if ($endorse_type != "" && $endorse_search_id != "") {
                    //$conditionarray["Endorsement.endorsement_for"] = $endorse_type;
                    //$conditionarray["Endorsement.endorsed_id"]= $endorse_search_id;
                    if ($type == "endorsed") {
                        $conditionarray["Endorsement.endorser_id"] = $endorse_search_id;
                    } elseif ($type == "endorser") {
                        $conditionarray["Endorsement.endorsed_id"] = $endorse_search_id;
                    } else {
                        // array('OR' => array('Endorsement.endorsed_id ' => $endorse_search_id, 'Endorsement.endorser_id' => $endorse_search_id));
                        $conditionarray = array_merge($conditionarray, array('OR' => array('Endorsement.endorsed_id ' => $endorse_search_id, 'Endorsement.endorser_id' => $endorse_search_id)));
                    }
                }
                $params['conditions'] = $conditionarray;
                $params['order'] = 'Endorsement.created desc';
                $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseCoreValues', 'EndorseReplies')));
                $totalendorsement = $this->Endorsement->find("all", $params);
                //echo $this->Endorsement->getLastQuery();die;
                $totalendorse = $totalendorsement[0][0]["cnt"];
                $totalpage = ceil($totalendorse / $limit);
                $params['joins'] = array(
                    array(
                        'table' => 'endorsement_likes',
                        'alias' => 'EndorsementLike',
                        'type' => 'LEFT',
                        'conditions' => array(
                            'Endorsement.id =EndorsementLike.endorsement_id ',
                            'EndorsementLike.user_id =' . $user_id
                        )
                    )
                );

                $params['fields'] = "*,UNIX_TIMESTAMP(created) as create_date, UNIX_TIMESTAMP() as curr_time ";
                $params['limit'] = $limit;
                $params['page'] = $page;
                $params['offset'] = $offset;
                $params['order'] = 'Endorsement.created desc';
                $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseCoreValues', 'EndorseReplies')));
                $this->Endorsement->bindModel(array('hasMany' => array('EndorseCoreValues')));
                $endorsement = $this->Endorsement->find("all", $params);
                //print_r($endorsement);exit;
                $endorsmentarray = array();
                $departmentarray = array();
                $entityarray = array();
                $userarray = array();
                $core_values = $this->getOrgValues($org_id, "OrgCoreValues", 1);
                $coreval = array();
                foreach ($core_values as $cvalue) {
                    $coreval[$cvalue["id"]] = $cvalue["name"] . "&&&&" . $cvalue["color_code"];
                }

                $serverCurrentTime = "";

                foreach ($endorsement as $key => $value) {

                    $endorsval = $value["Endorsement"];
                    $endorsval["created"] = $value[0]["create_date"];
                    $serverCurrentTime = $value[0]["curr_time"];
                    $endorsimgcount = $endorsval["image_count"];
                    $endorsecorevalue = $value["EndorseCoreValues"];
                    $endorsmentarray[$key]["endorse"] = $endorsval;
                    $endorsmentarray[$key]["imagecount"] = $endorsval["image_count"];
                    $endorsmentarray[$key]["emojis_count"] = $endorsval["emojis_count"];

                    $endorsmentarray[$key]["reply"] = $endorsval["is_reply"];
                    if ($value["EndorsementLike"]["id"] != "") {
                        $endorsmentarray[$key]["like"] = 1;
                    } else {
                        $endorsmentarray[$key]["like"] = 0;
                    }
                    //$endorsmentarray[$key]["attatched_image"]=$value["EndorseAttachments"];


                    if ($endorsval["endorsement_for"] == "department") {
                        if (!in_array($endorsval["endorsed_id"], $departmentarray)) {
                            $departmentarray[] = $endorsval["endorsed_id"];
                        }
                    } elseif ($endorsval["endorsement_for"] == "entity") {
                        if (!in_array($endorsval["endorsed_id"], $entityarray)) {
                            $entityarray[] = $endorsval["endorsed_id"];
                        }
                    } else {
                        if (!in_array($endorsval["endorsed_id"], $userarray)) {

                            $userarray[] = $endorsval["endorsed_id"];
                        }
                    }

                    if (!in_array($endorsval["endorser_id"], $userarray)) {
                        $userarray[] = $endorsval["endorser_id"];
                    }
                    $corevaluearray = array();
                    foreach ($endorsecorevalue as $eval) {


                        if (!in_array($eval["value_id"], $corevaluearray)) {
                            if (isset($coreval[$eval["value_id"]])) {
                                $ncval = explode("&&&&", $coreval[$eval["value_id"]]);
                                $corevaluearray[] = array("name" => $ncval[0], "color_code" => $ncval[1]);
                            }
                        }
                    }
                    $endorsmentarray[$key]["corevalue"] = $corevaluearray;
                }


                $userinfo = $this->User->find('all', array(
                    'conditions' => array('User.id' => $userarray),
                    'fields' => array('id', 'fname', 'lname', 'image')
                ));
                $userdata = array();
                foreach ($userinfo as $userval) {

                    $userdata[$userval["User"]["id"]] = trim($userval["User"]["fname"] . " " . $userval["User"]["lname"]);
                    if ($userval["User"]["image"] != "") {
                        $userdata[$userval["User"]["id"]] .="&&&&" . Router::url('/', true) . "app/webroot/" . PROFILE_IMAGE_DIR . "small/" . $userval["User"]["image"];
                    }
                }

                $department = array();
                $entity = array();
                if (!empty($departmentarray)) {
                    $departmentarr = $this->getOrgValues($org_id, "OrgDepartments", 1);
                    if (!empty($departmentarr)) {
                        foreach ($departmentarr as $dval) {
                            $department[$dval["id"]] = $dval["name"];
                        }
                    }
                }

                if (!empty($entityarray)) {
                    $entity1 = $this->getOrgValues($org_id, "Entity", 1);
                    if (!empty($entity1)) {
                        foreach ($entity1 as $dval) {
                            $entity[$dval["id"]] = $dval["name"];
                        }
                    }
                }
                $newarray = array();

                foreach ($endorsmentarray as $key => $eval) {

                    $newarray[$key]["id"] = $eval["endorse"]["id"];
                    $newarray[$key]["is_like"] = $eval["like"];
                    $newarray[$key]["is_read"] = $eval["endorse"]["is_read"];
                    $newarray[$key]["endorsement_for"] = $eval["endorse"]["endorsement_for"];
                    $newarray[$key]["endorsed_id"] = $eval["endorse"]["endorsed_id"];
                    $newarray[$key]["endorser_id"] = $eval["endorse"]["endorser_id"];
                    //	$newarray[$key]["attatched_image"] =  $eval["attatched_image"];
                    $newuserdata = explode("&&&&", $userdata[$eval["endorse"]["endorser_id"]]);
                    $newarray[$key]["endorser_name"] = $newuserdata[0];
                    if (isset($newuserdata[1])) {
                        $newarray[$key]["endorser_image"] = $newuserdata[1];
                    }

                    $newarray[$key]["type"] = $eval["endorse"]["type"];
                    $newarray[$key]["message"] = $eval["endorse"]["message"];
                    $newarray[$key]["like_count"] = $eval["endorse"]["like_count"];
                    $newarray[$key]["created"] = $eval["endorse"]["created"];
                    $newarray[$key]["imagecount"] = $eval["imagecount"];
                    $newarray[$key]["emojiscount"] = $eval["emojis_count"];
                    $newarray[$key]["corevalues"] = $eval["corevalue"];


                    if ($eval["endorse"]["endorsement_for"] == "user") {
                        $newuserdata = explode("&&&&", $userdata[$eval["endorse"]["endorsed_id"]]);
                        $newarray[$key]["endorsed_name"] = $newuserdata[0];
                        if (isset($newuserdata[1])) {
                            $newarray[$key]["endorsed_image"] = $newuserdata[1];
                        }
                    } elseif ($eval["endorse"]["endorsement_for"] == "department") {
                        $newarray[$key]["endorsed_name"] = $department[$eval["endorse"]["endorsed_id"]];
                    } elseif ($eval["endorse"]["endorsement_for"] == "entity") {
                        $newarray[$key]["endorsed_name"] = $entity[$eval["endorse"]["endorsed_id"]];
                    }
                    //			if((strtolower($eval["endorse"]["type"])=="standard" || strtolower($eval["endorse"]["type"])=="private" ) && ($eval["endorse"]["endorsement_for"]=="user") )
                    //{
                    //	
                    //	$endorsereply = $eval["reply"];
                    //	$reply = array();
                    //	if(!empty($endorsereply)){
                    //			foreach($endorsereply as $replyval){
                    //				
                    //			  $reply[]	=array("reply"=>$replyval["reply"]);
                    //			  
                    //			}
                    //	}
                    //	$newarray[$key]["endorse_reply"] =$reply;
                    //	$newarray[$key]["endorse_reply_count"] =count($reply);
                    //	
                    //}
                    $newarray[$key]["is_reply"] = $eval["reply"];
                }
                $returndata = array("endorse_data" => $newarray, "total_page" => $totalpage, "server_time" => $serverCurrentTime);
                $this->set(array(
                    'result' => array("status" => true
                        , "msg" => "Organization Endorsement ",
                        "data" => $returndata),
                    '_serialize' => array('result')
                ));
            } else {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Currently any organization has been not joined."),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Get call not allowed."),
                '_serialize' => array('result')
            ));
        }
    }

    public function endorsedetails() {
        if ($this->request->is('post')) {
            $eid = $this->request->data["e_id"];
            $loggedinUser = $this->Auth->user();
            $selfuser_id = $loggedinUser["id"];
            $isRead = 0;

            $params = array();
            $params['fields'] = "*";
            $params['conditions'] = array("Endorsement.id" => $eid);
            $endorsement = $this->Endorsement->find("all", $params);

            $endorse = array();
            if (!empty($endorsement)) {
                //print_r($endorsement);

                $userid = array();
                $endorse = $endorsement[0]["Endorsement"];
                //
                if ($endorse["is_read"] == 0 && isset($this->request->data["isRead"]) && $this->request->data["isRead"] == 1) {
                    $this->Endorsement->id = $eid;
                    $this->Endorsement->savefield("is_read", 1);
                    $endorse["is_read"] = 1;
                }

                //
                $org_id = $endorsement[0]["Endorsement"]["organization_id"];
                $endorse["endorsed_name"] = "";
                $endorserd_id = $endorsement[0]["Endorsement"]["endorsed_id"];
                $endorse["endorser_name"] = "";
                $userid[] = $endorser_id = $endorsement[0]["Endorsement"]["endorser_id"];
                $endorsecorevalues = $endorsement[0]["EndorseCoreValues"];
                $cvalarray = array();
                if (!empty($endorsecorevalues)) {
                    foreach ($endorsecorevalues as $cval) {
                        $cvalarray[] = $cval["value_id"];
                    }
                }
                $core_values = array();
                if (!empty($cvalarray)) {
                    $core_values = $this->getOrgValues($org_id, "OrgCoreValues", 1, $cvalarray);
                }
                $endorse["core_values"] = $core_values;
                if ($endorsement[0]["Endorsement"]["endorsement_for"] == "user") {
                    $userid[] = $endorserd_id;
                }
                //

                $userinfo = $this->User->find('all', array(
                    'conditions' => array('User.id' => $userid),
                    'fields' => array('id', 'fname', 'lname', 'image')
                ));
                $userdata = array();
                foreach ($userinfo as $userval) {

                    $userdata[$userval["User"]["id"]] = trim($userval["User"]["fname"] . " " . $userval["User"]["lname"]);
                    if ($userval["User"]["image"] != "") {
                        $userdata[$userval["User"]["id"]] .="&&&&" . Router::url('/', true) . "app/webroot/" . PROFILE_IMAGE_DIR . "small/" . $userval["User"]["image"];
                    }
                }
                //
                $endorse["is_reply"] = 0;
                $endorse["reply"] = "";
                $endorse["reply_counter"] = "";
                if ((strtolower($endorse["type"]) == "standard" || strtolower($endorse["type"]) == "private" ) && ($endorsement[0]["Endorsement"]["endorsement_for"] == "user")) {
                    $endorsereply = $endorsement[0]["EndorseReplies"];
                    $reply = array();

                    if (!empty($endorsereply)) {
                        foreach ($endorsereply as $replyval) {
                            if ($replyval["user_id"] == $endorserd_id) {
                                $endorse["reply"] = $replyval["reply"];
                            } elseif ($replyval["user_id"] == $endorser_id) {
                                $endorse["reply_counter"] = $replyval["reply"];
                            }
                            //	
                            //}elseif(){
                            //	
                            //}
                            // $reply[]	=array("reply"=>$replyval["reply"],"created"=>strtotime($replyval["created"]));
                        }
                    }
                    //$endorse["endorse_reply"] =$reply;
                    $reply_count = count($endorsereply);
                    $endorse["endorse_reply_count"] = $reply_count;
                    if ($selfuser_id == $endorserd_id && $reply_count == 0) {
                        $endorse["is_reply"] = 1;
                    } elseif ($selfuser_id == $endorser_id && $reply_count == 1) {
                        $endorse["is_reply"] = 1;
                    }
                }
                $newuserdata = explode("&&&&", $userdata[$endorser_id]);
                $endorse["endorser_name"] = $newuserdata[0];
                if (isset($newuserdata[1])) {
                    $endorse["endorse_image"] = $newuserdata[1];
                }
                if ($endorsement[0]["Endorsement"]["endorsement_for"] == "user") {
                    $newuserdata = explode("&&&&", $userdata[$endorserd_id]);
                    $endorse["endorsed_name"] = $newuserdata[0];
                    if (isset($newuserdata[1])) {
                        $endorse["endorsed_image"] = $newuserdata[1];
                    }
                } elseif ($endorsement[0]["Endorsement"]["endorsement_for"] == "department") {
                    $department = $this->getOrgValues($org_id, "OrgDepartments", 1, array($endorserd_id));
                    if (!empty($department)) {
                        $endorse["endorsed_name"] = $department[0]["name"];
                    }
                } elseif ($endorsement[0]["Endorsement"]["endorsement_for"] == "entity") {
                    $entity = $this->getOrgValues($org_id, "Entity", 1, array($endorserd_id));
                    if (!empty($entity)) {
                        $endorse["endorsed_name"] = $entity[0]["name"];
                    }
                }
                // fetching attatched image
                $attachedimg = array();
                $emojisimg = array();
                $attachedimage = $endorsement[0]["EndorseAttachments"];


                if (!empty($attachedimage)) {

                    foreach ($attachedimage as $attachval) {
                        // ENDORSE_IMAGE_DIR

                        if ($attachval["name"] != "" && $attachval["type"] == "image") {
                            $attachedimg[] = Router::url('/', true) . "app/webroot/" . ENDORSE_IMAGE_DIR . "small/" . $attachval["name"];
                        } elseif ($attachval["name"] != "" && trim($attachval["type"]) == "emojis") {
                            $emojisimg[] = Router::url('/', true) . "app/webroot/" . EMOJIS_IMAGE_DIR . $attachval["name"];
                        }
                    }
                }
                // end
                $endorse["attatched_image"] = $attachedimg;
                $endorse["emojis_image"] = $emojisimg;


                $this->set(array(
                    'result' => array("status" => true
                        , "msg" => "Endorsement details",
                        "data" => $endorse),
                    '_serialize' => array('result')
                ));
            } else {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "invalid endorsement ."),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Get call not allowed."),
                '_serialize' => array('result')
            ));
        }
    }

    public function JoinReqOrg() {

        if (isset($this->request->data['token']) && isset($this->request->data['org_id'])) {

            $org_ids = explode(",", $this->request->data['org_id']);
            $userorgdata = $this->UserOrganization->find("all", array('joins' => array(array('table' => 'organizations', 'type' => 'INNER', 'conditions' => array('organizations.id = UserOrganization.organization_id'))), "conditions" => array("organization_id" => $org_ids, "user_role" => 2, 'UserOrganization.status' => 1)));
            $adminorg = array();
            foreach ($userorgdata as $uservalorg) {

                $adminorg[] = $uservalorg;
            }

            $array = array();
            $array['fields'] = array('id', 'name');
            $array['conditions'] = array('id' => $org_ids);
            //
//					    $array['joins'] = array(
//                array(
//                    'table' => 'users',
//                    'alias' => 'user',
//                    'type' => 'INNER',
//                    'conditions' => array(
//                        'Organization.id' => $org_ids,
//                        'Organization.admin_id = user.id'
//                    )
//                )
//            );
            //
            $orgArray = $this->Organization->find("all", $array);
            $loggedInUser = $this->Auth->user();
            $emailQueue = array();
            $user_id = $loggedInUser['id'];
            $alreadyrequested = 0;
            $organization_name = "";
            foreach ($orgArray as $orgval) {
//echo $orgval['Organization']['id'];
                $requestinfo = $this->OrgRequests->find('first', array(
                    'conditions' => array('user_id' => $user_id, 'organization_id' => $orgval['Organization']['id'], "status" => 0),
                    'fields' => array('id')
                ));

                // print_r($requestinfo);
                if (empty($requestinfo)) {
                    $requestarray[] = array("organization_id" => $orgval['Organization']['id'], "user_id" => $user_id);

                    $organization_name .= $orgval['Organization']['name'] . ",";
                    foreach ($adminorg as $userval) {

                        $subject = "nDorse Notification -- A user has sent a request to join your organization :" . $orgval['Organization']['name'];
                        $viewVars = array("org_name" => $orgval['Organization']['name'], "fname" => trim($userval['User']['fname']), "user_name" => $loggedInUser['email']);
                        $configVars = serialize($viewVars);
                        $emailQueue[] = array("to" => $userval['User']['email'], "subject" => $subject, "config_vars" => $configVars, "template" => "join_request");
                    }
                } else {
                    $alreadyrequested = 1;
                }
            }

            //Your request to join [ORG-NAME]
            if ($alreadyrequested == 0 && !empty($requestarray)) {
                $organization_name = substr($organization_name, 0, -1);
                $this->OrgRequests->saveMany($requestarray);
                if (!empty($emailQueue)) {
                    $this->Email->saveMany($emailQueue);
                }

                $this->set(array(
                    'result' => array("status" => true
                        , "msg" => "Your request to join [" . $organization_name . "] was sent successfully!",
                        "data" => true),
                    '_serialize' => array('result')
                ));
            } else {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "you have already sent request for this user. ",
                        "data" => true),
                    '_serialize' => array('result')
                ));
            }
            //
//			  $invites = $emailQueue = array();
//            $viewVars = array("org_name" => $current_org['name']);
//            $configVars = serialize($viewVars);
//            $subject = "Request to join ".$orgArray['Organization']['name']." organization";
//			$requestorg = array("organization_id" => $current_org['id']);
//            foreach ($emailIds as $email) {
//                if (!in_array($email, $invitedMails)) {
//                    $invites[] = array("organization_id" => $current_org['id'], "email" => $email);
//                    $emailQueue[] = array("to" => $email, "subject" => $subject, "config_vars" => $configVars, "template" => "invite");
//                }
//            }
//
//
//            if (!empty($invites)) {
//                $this->Invite->saveMany($invites);
//                $this->Email->saveMany($emailQueue);
//                $msg = "Invitation sent.";
//                $status = true;
//            } else {
//                $msg = "All people are already invited";
//                $status = false;
//            }
//
//            $returnData = array("alreadyInvited" => $invitedMails);
        //
           
           
            
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Token or organization id  is missing in request"),
                '_serialize' => array('result')
            ));
        }
    }

    // endorse like
    public function endorselike() {

        if ($this->request->is('post')) {
            $e_id = $this->request->data["e_id"];
            $like = $this->request->data["like"];
            $loggedinUser = $this->Auth->user();
            $user_id = $loggedinUser["id"];
            $likeresult = $this->EndorsementLike->find('first', array(
                'conditions' => array('user_id' => $user_id, 'endorsement_id' => $e_id),
                'fields' => array('id')
            ));
            $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseCoreValues', 'EndorseReplies')));
            $endorsment_count = $this->Endorsement->find("first", array("conditions" => array("id" => $e_id), "fields" => array("like_count")));

            $like_count = $endorsment_count["Endorsement"]["like_count"];
            $status = false;
            if ($like == 1) {

                if (empty($likeresult)) {
                    $likearray = array("endorsement_id" => $e_id, "user_id" => $user_id);
                    $this->EndorsementLike->save($likearray);
                    $this->Endorsement->id = $e_id;
                    $like_count = $endorsment_count["Endorsement"]["like_count"] + 1;
                    $this->Endorsement->id = $e_id;
                    $this->Endorsement->savefield("like_count", $like_count);
                    $msg = "Endorsement liked successfully";
                    $status = true;
                } else {
                    $msg = "you have already liked Endorsement";
                    $status = true;
                }
            } else {

                if (!empty($likeresult) && $likeresult["EndorsementLike"]["id"] > 0) {
                    //["EndorsementLike"]["id"]
                    $this->EndorsementLike->delete($likeresult["EndorsementLike"]["id"]);
                    $like_count = $endorsment_count["Endorsement"]["like_count"] - 1;
                    $this->Endorsement->id = $e_id;
                    $this->Endorsement->savefield("like_count", $like_count);
                    $msg = "Endorsement disliked successfully";
                } else {
                    $msg = "you have already disliked Endorsement";
                }
                $status = true;
            }
            $total_like = 0;
            $this->set(array(
                'result' => array("status" => $status
                    , "msg" => $msg,
                    "data" => array("like_count" => $like_count)),
                '_serialize' => array('result')
            ));
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Get call not allowed."),
                '_serialize' => array('result')
            ));
        }
    }

    public function endorsereply() {
        if ($this->request->is('post')) {
            $e_id = $this->request->data["e_id"];
            $loggedinUser = $this->Auth->user();
            $user_id = $loggedinUser["id"];
            $reply = $this->request->data["reply"];
            $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseCoreValues', 'EndorseReplies')));

            $endorsment_details = $this->Endorsement->find("first", array("conditions" => array("id" => $e_id, "endorsement_for" => "user"), "fields" => array("endorsed_id")));

            $status = false;
            $msg = "";
            if (!empty($endorsment_details)) {

                $endorsereply = array("endorsement_id" => $e_id, "user_id" => $user_id, "reply" => $reply);
                $this->EndorseReplies->save($endorsereply);
                $this->Endorsement->id = $e_id;
                $this->Endorsement->savefield("is_reply", 1);
                $status = true;
                $msg = "nDorsement Reply submitted!";
                exec("wget -bqO- " . Router::url('/', true) . "/cron/replynotify &> /dev/null");
            } else {
                $msg = "You are not allowed for endorsment reply";
            }
            $this->set(array(
                'result' => array("status" => $status
                    , "msg" => $msg
                    , "data" => array("reply" => $reply)
                ),
                '_serialize' => array('result')
            ));
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Get call not allowed."),
                '_serialize' => array('result')
            ));
        }
    }

    public function mySearchInOrganization() {
        if ($this->request->is('post')) {
            $resultData = array();
            $keyWord = $this->request->data['keyword'];
            $type = $this->request->data['type'];
            $loggedinUser = $this->Auth->user();
            $user_id = $loggedinUser["id"];
            if (!isset($loggedinUser['current_org'])) {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "You have not joined any organization yet. Please join."),
                    '_serialize' => array('result')
                ));
                return;
            }

            $statusConfig = Configure::read("statusConfig");

//												$startDate = date("Y-m-1 00:00:00");
//                                                $endDate = date("Y-m-t", strtotime($startDate)) . " 23:59:59";
            $endorsecondition = "";
            $endorser_id_name = "";
            if ($type == "endorser") {
                $endorsecondition = " AND Endorsement.endorsed_id = " . $user_id;
                $endorser_id_name = "endorser_id";
            } elseif ($type == "endorsed") {
                $endorsecondition = " AND Endorsement.endorser_id = " . $user_id;
                $endorser_id_name = "endorsed_id";
            }

//												

            $usersData = $this->UserOrganization->query("
																												SELECT  User.id, User.fname, User.lname,  UserOrganization.status, COUNT(Endorsement.id) as count FROM 
																												user_organizations AS UserOrganization
																												LEFT JOIN users AS User ON (UserOrganization.user_id = User.id) 
																												LEFT JOIN endorsements AS Endorsement ON (Endorsement." . $endorser_id_name . " = User.id ) 
																												WHERE ((User.fname LIKE '%" . $keyWord . "%') OR (User.lname LIKE '%" . $keyWord . "%'))
																												AND UserOrganization.status IN (" . $statusConfig['active'] . ", " . $statusConfig['eval'] . ")
																												AND UserOrganization.organization_id = " . $loggedinUser['current_org']['id'] .
                    $endorsecondition . "
																												AND (Endorsement.organization_id = " . $loggedinUser['current_org']['id'] . "  OR  Endorsement.organization_id IS NULL)
																												GROUP BY  User.id, Endorsement." . $endorser_id_name);
            //echo $this->User->getLastQuery();die;

            $users = array();

            foreach ($usersData as $user) {
                if ($user['User']['id'] != $loggedInUser['id']) {
                    $userDetail = array();
                    $userDetail['id'] = $user['User']['id'];
                    $userDetail['name'] = $user['User']['fname'] . " " . $user['User']['lname'];
                    $userDetail['org_status'] = array_search($user['UserOrganization']['status'], $statusConfig);
                    $userDetail['endorse_count'] = $user[0]['count'];

                    $users[] = $userDetail;
                }
            }
            if ($type == "endorsed") {
                $departments = array();


                $departmentsData = $this->OrgDepartments->query("
																																				SELECT OrgDepartments.id, OrgDepartments.name, COUNT(Endorsement.id) as count
																																				FROM org_departments AS OrgDepartments
																																				LEFT JOIN endorsements AS Endorsement ON (Endorsement." . $endorser_id_name . " = OrgDepartments.id)
																																				WHERE OrgDepartments.name LIKE '%" . $keyWord . "%'
																																				AND OrgDepartments.status = " . $statusConfig['active'] . "
																																				AND OrgDepartments.organization_id = " . $loggedinUser['current_org']['id']
                        . $endorsecondition . "
																																				AND (Endorsement.organization_id = " . $loggedinUser['current_org']['id'] . "  OR  Endorsement.organization_id IS NULL)
																																				GROUP BY  OrgDepartments.id, Endorsement." . $endorser_id_name);

                //echo $this->OrgDepartments->getLastQuery();die;
                //
												//pr($departmentsData);die;

                foreach ($departmentsData as $department) {
                    $departmentDetail = array();
                    $departmentDetail['id'] = $department['OrgDepartments']['id'];
                    $departmentDetail['name'] = $department['OrgDepartments']['name'];
                    $departmentDetail['endorse_count'] = $department[0]['count'];

                    $departments[] = $departmentDetail;
                }

                $entities = array();

                $entitiesData = $this->Entity->query("
																																SELECT Entity.id, Entity.name, COUNT(Endorsement.id) as count
																																FROM entities AS Entity LEFT JOIN
																																endorsements AS Endorsement ON (Endorsement." . $endorser_id_name . " = Entity.id)
																																WHERE Entity.name LIKE '%" . $keyWord . "%'
																																AND Entity.status = " . $statusConfig['active'] . "
																																AND Entity.organization_id = " . $loggedinUser['current_org']['id'] . $endorsecondition . "
																																AND (Endorsement.organization_id = " . $loggedinUser['current_org']['id'] . "  OR  Endorsement.organization_id IS NULL)
																																GROUP BY  Entity.id, Endorsement." . $endorser_id_name);

                //echo $this->Entity->getLastQuery();die;

                foreach ($entitiesData as $entity) {
                    $entityDetail = array();
                    $entityDetail['id'] = $entity['Entity']['id'];
                    $entityDetail['name'] = $entity['Entity']['name'];
                    $entityDetail['endorse_count'] = $entity[0]['count'];

                    $entities[] = $entityDetail;
                }
            }
            $resultData['users'] = $users;
            if ($type == "endorsed") {
                $resultData['departments'] = $departments;
                $resultData['entities'] = $entities;
            }

            $this->set(array(
                'result' => array("status" => true
                    , "msg" => "Search results", "data" => $resultData),
                '_serialize' => array('result')
            ));
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Get call not allowed."),
                '_serialize' => array('result')
            ));
        }
    }

    // switch group
    public function switchGroup() {
        if ($this->request->is('post')) {
            $statusConfig = Configure::read("statusConfig");
            $org_id = $this->request->data["org_id"];
            $loggedinUser = $this->Auth->user();

            $user_id = $loggedinUser["id"];
            // check user exist this organization
            // check user default organization if exist then deleted if other
            // save default org this endoreser
            //$joinedUser = $this->UserOrganization->find("count", array("conditions" => array("organization_id" => $org_id, "user_id"=>$user_id,"UserOrganization.status" => array( $statusConfig['active'], $statusConfig['eval']))));

            $params = array();
            $params['fields'] = "*";
            $params['joins'] = array(
                array(
                    'table' => 'default_orgs',
                    'alias' => 'DefaultOrg',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'UserOrganization.user_id = DefaultOrg.user_id',
                        'UserOrganization.organization_id = DefaultOrg.organization_id',
                        'DefaultOrg.status=1'
                    )
                )
            );

            $params['conditions'] = array("UserOrganization.user_id" => $user_id, "UserOrganization.joined" => 1, "UserOrganization.organization_id" => $org_id);

            $Organization = $this->UserOrganization->find("first", $params);

            if (!empty($Organization)) {
//print_r($Organization["DefaultOrg"]);
                if (1) {

                    $user_role = $Organization["UserOrganization"]["user_role"];
                    $organization = $this->Organization->findById($org_id);

                    $roleList = $this->Common->setSessionRoles();

                    $currentOrg = $organization['Organization'];

                    $currentOrg['org_role'] = $roleList[$user_role];
                    $this->Session->write('Auth.User.current_org', $currentOrg);
                    $defaultorg_id = $this->DefaultOrg->findByUserId((int) $loggedinUser['id']);

                    if (!empty($defaultorg_id)) {
                        $deorg_id = $defaultorg_id["DefaultOrg"]["id"];
                        // $this->DefaultOrg->delete($deorg_id);
                        $defaultOrg = array("id" => $deorg_id, "organization_id" => $organization['Organization']['id'], "user_id" => $loggedinUser['id'], "status" => 1);
                    } else {
                        $defaultOrg = array("organization_id" => $organization['Organization']['id'], "user_id" => $loggedinUser['id']);
                    }

                    $this->DefaultOrg->save($defaultOrg);



                    $currentorg = array("Organization" => $currentOrg);
                    $this->set(array(
                        'result' => array("status" => true
                            , "msg" => "Organization switched successfully."
                            , "data" => $currentorg),
                        '_serialize' => array('result')
                    ));
                } else {
                    $this->set(array(
                        'result' => array("status" => false
                            , "msg" => "this group is current group also"),
                        '_serialize' => array('result')
                    ));
                }
            } else {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "You are not joined this group.Plz join this group"),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Get call not allowed."),
                '_serialize' => array('result')
            ));
        }
    }

    public function getjoinrequestUser() {
        if ($this->request->is('post')) {
            $org_id = $this->request->data["org_id"];
            $loggedinUser = $this->Auth->user();
            $user_id = $loggedinUser["id"];

            $params = array();
            $params['fields'] = "User.id,User.fname,User.lname,User.image,Organization.id as org_id,UserOrganization.user_id";
            $params['joins'] = array(
                array(
                    'table' => 'org_requests',
                    'alias' => 'OrgRequests',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'Organization.id = OrgRequests.organization_id',
                        'OrgRequests.status=0',
                    )
                ),
                array(
                    'table' => 'user_organizations',
                    'alias' => 'UserOrganization',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'UserOrganization.user_id = OrgRequests.user_id',
                        'UserOrganization.organization_id=' . $org_id,
                        'UserOrganization.status !=2'
                    )
                ),
                array(
                    'table' => 'users',
                    'alias' => 'User',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'OrgRequests.user_id = User.id',
                        'User.status=1',
                    )
                ),
            );

            $params['conditions'] = array("Organization.id" => $org_id);

            $Organization = $this->Organization->find("all", $params);



            //echo $this->Organization->getLastQuery();die;
            if (!empty($Organization)) {
                //print_r($Organization);exit;
                $OrgRequests = $Organization[0]["User"];

                //print_r($Organization);exit;
                $userarray = array();
                if (!empty($OrgRequests) && $OrgRequests["id"] != "") {

                    foreach ($Organization as $org) {

                        if ($org["UserOrganization"]["user_id"] != $org["User"]["id"]) {
                            //  $userarray[] = $org["User"];
                            $img = "";
                            if ($org["User"]["image"] != "") {
                                $img = Router::url('/', true) . "app/webroot/" . PROFILE_IMAGE_DIR . "small/" . $org["User"]["image"];
                            }
                            $userarray[] = array("id" => $org["User"]["id"], "name" => trim($org["User"]["fname"] . " " . $org["User"]["lname"]), "imag" => $img, "image" => $img);
                        }
                    }

                    $this->set(array(
                        'result' => array("status" => true
                            , "msg" => "Requested users",
                            "data" => $userarray),
                        '_serialize' => array('result')
                    ));
                } else {
                    $this->set(array(
                        'result' => array("status" => false
                            , "msg" => "Currenty no user requested to join this organization."),
                        '_serialize' => array('result')
                    ));
                }
            } else {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "You are not the owner of this organization."),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Get call not allowed."),
                '_serialize' => array('result')
            ));
        }
    }

    public function acceptorgrequest() {

        if ($this->request->is('post')) {
            $org_id = $this->request->data["org_id"];
            $loggedinUser = $this->Auth->user();
            $user_id = $loggedinUser["id"];

            $request_user_id = explode(",", $this->request->data["user_id"]);

            $statusConfig = Configure::read("statusConfig");

            $confirm = "yes";
            if (isset($this->request->data["confirm"]) && $this->request->data["confirm"] != "") {
                $confirm = $this->request->data["confirm"];
            }

            if ($confirm == "no") {
                foreach ($request_user_id as $val_id) {
                    $this->OrgRequests->deleteAll(
                            array('OrgRequests.organization_id' => $org_id, 'OrgRequests.user_id' => $val_id)
                    );
                }
                $this->set(array(
                    'result' => array("status" => true,
                        "msg" => "Request are deleted successfully", "data" => true, "confirm" => $confirm),
                    '_serialize' => array('result')
                ));
                return;
            } else {
                $params = array();
                // $params['conditions'] = array("organization_id" => $org_id, "UserOrganization.status" => array($statusConfig['inactive'], $statusConfig['active'], $statusConfig['eval']));
                $params['conditions'] = array("organization_id" => $org_id, "UserOrganization.status" => array($statusConfig['active'], $statusConfig['eval']));
                $params['group'] = 'pool_type';
                $params['fields'] = array("UserOrganization.pool_type", "COUNT(UserOrganization.user_id) as count");
                $userOrgStats = $this->UserOrganization->find("all", $params);

                $freeCount = 0;
                $paidCount = 0;

                foreach ($userOrgStats as $stats) {
                    if ($stats['UserOrganization']['pool_type'] == 'free') {
                        $freeCount = $stats[0]['count'];
                    } else {
                        $paidCount = $stats[0]['count'];
                    }
                }
                $request_count = count($request_user_id);
                $freeCount += $request_count;
                $addacountflag = 0;

                if ($freeCount > FREE_POOL_USER_COUNT) {
                    $poolType = "paid";

                    $params = array();
                    $conditions = array();
                    $todayDate = date('Y-m-d H:i:s');
//                    $conditions['start_date <='] = $todayDate;
//                    $conditions['end_date >='] = $todayDate;
                    $conditions['Subscription.status'] = 1;
                    $conditions['Subscription.organization_id'] = $org_id;
                    $params["conditions"] = $conditions;
                    $currentSubscription = $this->Subscription->find("first", $params);

                    $paidCount += $request_count;
                    $poolPurchased = 10;
                    if (!empty($currentSubscription)) {
                        $poolPurchased = $currentSubscription['Subscription']['pool_purchased'];

                        $purchaseflag = 0;
                        if ($paidCount >= $poolPurchased) {
                            $purchaseflag = 1;
                        }
                        /* if ($paidCount >= $poolPurchased) {
                          // $status = $statusConfig['invite_inactive'];
                          $allow_user_count = $poolPurchased - $paidCount;
                          $this->set(array(
                          'result' => array("status" => false
                          , "msg" => "You are allow " . $allow_user_count . " endorser.please select " . $allow_user_count . " endorser or please renew your subscription"),
                          '_serialize' => array('result')
                          ));
                          return;
                          //
                          } */ if (1) {

                            $addacountflag = 1;
                            $organizations = $this->Organization->find("all", array("conditions" => array("id" => $org_id)));

                            $organizations = $organizations[0]["Organization"];


                            $users = $this->User->find("all", array('joins' => array(
                                    array(
                                        'table' => 'default_orgs',
                                        'alias' => 'DefaultOrg',
                                        'type' => 'LEFT',
                                        'conditions' => array(
                                            'DefaultOrg.user_id = User.id'
                                        )
                                    )
                                ), "conditions" => array("User.id" => $request_user_id), "fields" => array("User.id", "email", "fname", "DefaultOrg.organization_id")));


                            $userArray = array();
                            foreach ($users as $uval) {
                                $userArray[$uval["User"]["id"]] = array("email" => $uval["User"]["email"], "default_org" => $uval["DefaultOrg"]["organization_id"]);
                            }


                            $poolType = "paid";
                            if ($purchaseflag == 1) {
                                $status = $statusConfig['inactive'];
                            } else {
                                $status = $statusConfig['active'];
                            }
                            $addacountflag = 1;

                            $requests = $emailQueue = array();
                            $viewVars = array("org_name" => $organizations['name']);
                            $configVars = serialize($viewVars);
                            $subject = "Congratulations. Your request to accepted for " . $organizations['name'];
//print_r($request_user_id);
                            foreach ($request_user_id as $val_id) {
                                //if (!in_array($val_id, $requests)) {
                                $userOrg = $this->UserOrganization->find("first", array("conditions" => array("user_id" => $val_id, "organization_id" => $org_id)));

                                if (!empty($userOrg)) {
                                    $requests[] = array("id" => $userOrg["UserOrganization"]["id"], "organization_id" => $org_id, "joined" => 1, "user_id" => $val_id, "user_role" => 3, "status" => $status, "pool_type" => "paid", "flow" => "request");
                                } else {
                                    $requests[] = array("organization_id" => $org_id, "joined" => 1, "user_id" => $val_id, "user_role" => 3, "status" => $status, "pool_type" => "paid", "flow" => "request");
                                }
                                if ($userArray[$val_id]["default_org"] == "") {
                                    $defaultOrg = array("organization_id" => $org_id, "user_id" => $val_id);
                                    $this->DefaultOrg->save($defaultOrg);
                                    $isDefault = true;
                                }
                                $emailQueue[] = array("to" => $userArray[$val_id]["email"], "subject" => $subject, "config_vars" => $configVars, "template" => "accept_request");
                                //}
                            }


                            if (!empty($requests)) {
                                //$this->OrgRequests->updateAll(
                                //        array('OrgRequests.status' => "'1'"), array('OrgRequests.organization_id' => $org_id, 'OrgRequests.user_id' => $request_user_id)
                                //);
                                $this->OrgRequests->deleteAll(
                                        array('OrgRequests.organization_id' => $org_id, 'OrgRequests.user_id' => $request_user_id)
                                );
                                $this->UserOrganization->saveMany($requests);
                                $this->Email->saveMany($emailQueue);
                                if ($purchaseflag == 1) {

                                    $msg = "Pending request(s) have been accepted and new users added to Organization. Purchase or upgrade subscription to activate added user(s) using Admin Portal on www.ndorse.net or by contacting NDORSE LLC at support@ndorse.net.";
                                } else {
                                    $msg = "Pending request(s) accepted successfully!";
                                }
                                $status = true;
                            }

                            $returnData = array("accepted_users" => $userArray);
                            if ($purchaseflag == 1) {

                                $msg = "Pending request(s) have been accepted and new users added to Organization. Purchase or upgrade subscription to activate added user(s) using Admin Portal on www.ndorse.net or by contacting NDORSE LLC at support@ndorse.net";
                            }

                            $this->set(array(
                                'result' => array("status" => true,
                                    "msg" => $msg, "data" => $returnData, "confirm" => $confirm),
                                '_serialize' => array('result')
                            ));
                        }
                    } else {
                        $addacountflag = 0;

                        $organizations = $this->Organization->find("all", array("conditions" => array("id" => $org_id)));
                        $organizations = $organizations[0]["Organization"];

                        $users = $this->User->find("all", array('joins' => array(
                                array(
                                    'table' => 'default_orgs',
                                    'alias' => 'DefaultOrg',
                                    'type' => 'LEFT',
                                    'conditions' => array(
                                        'DefaultOrg.user_id = User.id'
                                    )
                                )
                            ), "conditions" => array("User.id" => $request_user_id), "fields" => array("User.id", "email", "fname", "DefaultOrg.organization_id")));


                        $userArray = array();
                        foreach ($users as $uval) {
                            $userArray[$uval["User"]["id"]] = array("email" => $uval["User"]["email"], "default_org" => $uval["DefaultOrg"]["organization_id"]);
                        }


                        $poolType = "paid";
                        $status = $statusConfig['inactive'];
                        $addacountflag = 1;

                        $requests = $emailQueue = $updaterequest = array();
                        $viewVars = array("org_name" => $organizations['name']);
                        $configVars = serialize($viewVars);
                        $subject = "Congratulations. Your request to accepted for " . $organizations['name'];

                        foreach ($request_user_id as $val_id) {
                            if (!in_array($val_id, $requests)) {

                                //$requests[] = array("organization_id" => $org_id, "user_id" => $val_id, "user_role" => 3, "status" => 1, "pool_type" => "free","flow"=>"request");
                                //	$updaterequest
                                $userOrg = $this->UserOrganization->find("first", array("conditions" => array("user_id" => $val_id, "organization_id" => $org_id)));
                                if (!empty($userOrg)) {
                                    $requests[] = array("id" => $userOrg["UserOrganization"]["id"], "organization_id" => $org_id, "user_id" => $val_id, "user_role" => 3, "status" => 0, "pool_type" => "paid", "joined" => 1, "flow" => "request");
                                } else {
                                    $requests[] = array("organization_id" => $org_id, "user_id" => $val_id, "user_role" => 3, "status" => 0, "pool_type" => "paid", "joined" => 1, "flow" => "request");
                                }
                                if ($userArray[$val_id]["default_org"] == "") {
                                    $defaultOrg = array("organization_id" => $org_id, "user_id" => $val_id);
                                    $this->DefaultOrg->save($defaultOrg);
                                    $isDefault = true;
                                }
                                $emailQueue[] = array("to" => $userArray[$val_id]["email"], "subject" => $subject, "config_vars" => $configVars, "template" => "accept_request");
                            }
                        }


                        if (!empty($requests)) {
                            //$this->OrgRequests->updateAll(
                            //        array('OrgRequests.status' => "'1'"), array('OrgRequests.organization_id' => $org_id, 'OrgRequests.user_id' => $request_user_id)
                            //);
                            $this->OrgRequests->deleteAll(
                                    array('OrgRequests.organization_id' => $org_id, 'OrgRequests.user_id' => $request_user_id)
                            );
                            // echo $this->OrgRequests->getLastQuery();die;
                            $this->UserOrganization->saveMany($requests);
                            $this->Email->saveMany($emailQueue);
                            $msg = "Pending request(s) accepted successfully!";
                            $status = true;
                        }

                        $returnData = array("accepted_users" => $userArray);
                        $msg = "Pending request(s) have been accepted and new users added to Organization. Purchase or upgrade subscription to activate added user(s) using Admin Portal on www.ndorse.net or by contacting NDORSE LLC at support@ndorse.net";
                        $this->set(array(
                            'result' => array("status" => $status,
                                "msg" => $msg, "data" => $returnData),
                            '_serialize' => array('result')
                        ));
                        return;
                        //
                    }
                } else {

                    $organizations = $this->Organization->find("all", array("conditions" => array("id" => $org_id)));
                    $organizations = $organizations[0]["Organization"];

                    $users = $this->User->find("all", array('joins' => array(
                            array(
                                'table' => 'default_orgs',
                                'alias' => 'DefaultOrg',
                                'type' => 'LEFT',
                                'conditions' => array(
                                    'DefaultOrg.user_id = User.id'
                                )
                            )
                        ), "conditions" => array("User.id" => $request_user_id), "fields" => array("User.id", "email", "fname", "DefaultOrg.organization_id")));


                    $userArray = array();
                    foreach ($users as $uval) {
                        $userArray[$uval["User"]["id"]] = array("email" => $uval["User"]["email"], "default_org" => $uval["DefaultOrg"]["organization_id"]);
                    }


                    $poolType = "free";
                    $status = $statusConfig['active'];
                    $addacountflag = 1;

                    $requests = $emailQueue = $updaterequest = array();
                    $viewVars = array("org_name" => $organizations['name']);
                    $configVars = serialize($viewVars);
                    $subject = "Congratulations. Your request to accepted for " . $organizations['name'];

                    foreach ($request_user_id as $val_id) {
                        if (!in_array($val_id, $requests)) {

                            //$requests[] = array("organization_id" => $org_id, "user_id" => $val_id, "user_role" => 3, "status" => 1, "pool_type" => "free","flow"=>"request");
                            //	$updaterequest
                            $userOrg = $this->UserOrganization->find("first", array("conditions" => array("user_id" => $val_id, "organization_id" => $org_id)));
                            if (!empty($userOrg)) {
                                $requests[] = array("id" => $userOrg["UserOrganization"]["id"], "organization_id" => $org_id, "user_id" => $val_id, "user_role" => 3, "status" => 1, "pool_type" => "free", "joined" => 1, "flow" => "request");
                            } else {
                                $requests[] = array("organization_id" => $org_id, "user_id" => $val_id, "user_role" => 3, "status" => 1, "pool_type" => "free", "joined" => 1, "flow" => "request");
                            }
                            if ($userArray[$val_id]["default_org"] == "") {
                                $defaultOrg = array("organization_id" => $org_id, "user_id" => $val_id);
                                $this->DefaultOrg->save($defaultOrg);
                                $isDefault = true;
                            }
                            $emailQueue[] = array("to" => $userArray[$val_id]["email"], "subject" => $subject, "config_vars" => $configVars, "template" => "accept_request");
                        }
                    }


                    if (!empty($requests)) {
                        //$this->OrgRequests->updateAll(
                        //        array('OrgRequests.status' => "'1'"), array('OrgRequests.organization_id' => $org_id, 'OrgRequests.user_id' => $request_user_id)
                        //);
                        $this->OrgRequests->deleteAll(
                                array('OrgRequests.organization_id' => $org_id, 'OrgRequests.user_id' => $request_user_id)
                        );
                        // echo $this->OrgRequests->getLastQuery();die;
                        $this->UserOrganization->saveMany($requests);
                        $this->Email->saveMany($emailQueue);
                        $msg = "Pending request(s) accepted successfully!";
                        $status = true;
                    }

                    $returnData = array("accepted_users" => $userArray);


                    $this->set(array(
                        'result' => array("status" => $status,
                            "msg" => $msg, "data" => $returnData),
                        '_serialize' => array('result')
                    ));
                }
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Get call not allowed."),
                '_serialize' => array('result')
            ));
        }
    }

    public function endorsestats() {
        if ($this->request->is('post')) {
            $endorse_stats = array();
            $statusConfig = Configure::read("statusConfig");
            $loggedInUser = $this->Auth->user();
            $user_id = $loggedInUser['id'];
            if (isset($loggedInUser['current_org'])) {
                //print_r($loggedInUser['current_org']);
                $org_id = $loggedInUser['current_org']['id'];
                $start_date = "";
                $end_date = "";
                if (isset($this->request->data["start_date"]) && $this->request->data["start_date"] != "") {
                    $start_date = $this->request->data["start_date"];
                }
                if (isset($this->request->data["end_date"]) && $this->request->data["end_date"] != "") {
                    $end_date = $this->request->data["end_date"];
                }
                $params = array();
                $params['fields'] = "count(*) as cnt";
                $conditionarray["Endorsement.organization_id"] = $org_id;
                $conditionarray["Endorsement.endorser_id"] = $user_id;
                //$conditionarray["Endorsement.endorsement_for"] = 'user';
                if ($start_date != "") {

                    $conditionarray["Endorsement.created >= "] = date("Y-m-d 00:00:00", $start_date);
                }
                if ($end_date != "") {
                    $conditionarray["Endorsement.created <= "] = date("Y-m-d 23:59:59", $end_date);
                }

                $params['conditions'] = $conditionarray;
                $params['order'] = 'Endorsement.created desc';
                // $params['group'] = 'Endorsement.endorsed_id';

                $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseCoreValues', 'EndorseReplies')));
                $totalendorsement = $this->Endorsement->find("all", $params);
                // print_r($totalendorsement);
                //echo $this->Endorsement->getLastQuery();die;
                if (!empty($totalendorsement)) {
                    $endorse_stats["endorse_given"] = (string) $totalendorsement[0][0]["cnt"];
                } else {
                    $endorse_stats["endorse_given"] = (string) 0;
                }

                unset($conditionarray["Endorsement.endorser_id"]);
                unset($conditionarray["Endorsement.endorsement_for"]);
                // unset($params['group']);
                unset($params['order']);

                $conditionarray["Endorsement.endorsed_id"] = $user_id;
                $params['conditions'] = $conditionarray;
                $totalendorsement = $this->Endorsement->find("all", $params);
                $endorse_stats["endorse_received"] = $totalendorsement[0][0]["cnt"];
                $params['fields'] = "count(EndorseCoreValue.value_id) as total, OrgCoreValues.name as core_value ";
                $params['joins'] = array(
                    array(
                        'table' => 'endorse_core_values',
                        'alias' => 'EndorseCoreValue',
                        'type' => 'INNER',
                        'conditions' => array(
                            'EndorseCoreValue.endorsement_id =Endorsement.id '
                        )
                    ),
                    array(
                        'table' => 'org_core_values',
                        'alias' => 'OrgCoreValues',
                        'type' => 'INNER',
                        'conditions' => array(
                            'OrgCoreValues.id =EndorseCoreValue.value_id '
                        )
                    )
                );
                $params['group'] = 'EndorseCoreValue.value_id';
                $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseCoreValues', 'EndorseReplies')));
                $corevalues = $this->Endorsement->find("all", $params);
                //print_r($corevalues);
                //	echo $this->Endorsement->getLastQuery();die;
                $core_values = array();
                if (!empty($corevalues)) {
                    foreach ($corevalues as $cval) {
                        if ($cval["OrgCoreValues"]["core_value"] != "") {
                            $core_values[] = array("name" => $cval["OrgCoreValues"]["core_value"], "value" => $cval[0]["total"]);
                        }
                    }
                }
                $endorse_stats["core_value"] = $core_values;


                $this->Badge->unbindModel(array('belongsTo' => array('Trophy')));

                $params = array();
                $params['fields'] = array("*");
                //$params['conditions'] = array("user_id" => $user_id, "organization_id" => $org_id);
                $params['joins'] = array(
                    array(
                        'table' => 'trophies',
                        'alias' => 'Trophy',
                        'type' => 'RIGHT',
                        'conditions' => array(
                            'Badge.trophy_id = Trophy.id',
                            'Badge.user_id = ' . $user_id,
                            'Badge.organization_id = ' . $org_id,
                        )
                    ),
                );
                $badges = $this->Badge->find("all", $params);
                //echo $this->Badge->getLastQuery();
                //pr($badges);die;
                $userBadges = array();

                foreach ($badges as $badge) {
                    $badgeInfo = array();
                    //$badgeInfo['badge_id'] = $badge['Badge']['id'];
                    $badgeInfo['trophy_id'] = $badge['Trophy']['id'];
                    $badgeInfo['count'] = empty($badge['Badge']['count']) ? 0 : (int) $badge['Badge']['count'];
                    $badgeInfo['image'] = Router::url('/', true) . TROPHY_IMAGE_DIR . $badge['Trophy']['image'];

                    $userBadges[] = $badgeInfo;
                }

                $endorse_stats["badges"] = $userBadges;

                $endorsedCount = $this->Endorsement->find("count", array("conditions" => array("Endorsement.endorsed_id" => $user_id, "organization_id" => $org_id, "endorsement_for" => "user")));
                $endorserCount = $this->Endorsement->find("count", array("conditions" => array("Endorsement.endorser_id" => $user_id, "organization_id" => $org_id)));
                $endorse_stats['endorse_count'] = array('giving' => $endorserCount, "getting" => $endorsedCount);

                $this->set(array(
                    'result' => array("status" => true
                        , "msg" => "Stats data"
                        , "data" => $endorse_stats),
                    '_serialize' => array('result')
                ));
            } else {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Please join some organization."),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Get call not allowed."),
                '_serialize' => array('result')
            ));
        }
    }

    // get leaderboard
    public function leaderboard() {
        if ($this->request->is('post')) {
            $endorse_stats = array();
            $statusConfig = Configure::read("statusConfig");
            $loggedInUser = $this->Auth->user();
            $user_id = $loggedInUser['id'];
            $type = $this->request->data["type"];
            $endorse_field = "endorsed_id";
            if ($type == "endorser") {
                $endorse_field = "endorser_id";
            }
            if (isset($loggedInUser['current_org'])) {
                //print_r($loggedInUser['current_org']);
                $org_id = $loggedInUser['current_org']['id'];
                $start_date = "";
                $end_date = "";
                if (isset($this->request->data["start_date"]) && $this->request->data["start_date"] != "") {
                    $start_date = $this->request->data["start_date"];
                }
                if (isset($this->request->data["end_date"]) && $this->request->data["end_date"] != "") {
                    $end_date = $this->request->data["end_date"];
                }
                $params = array();

                $params['fields'] = "count(Endorsement." . $endorse_field . ") as cnt,User.fname ,User.lname,OrgDepartments.name as department";
                $conditionarray["Endorsement.organization_id"] = $org_id;
                //$conditionarray["Endorsement.endorsement_for"]= 'user';
                if ($start_date != "") {
                    $conditionarray["Endorsement.created >= "] = date("Y-m-d 00:00:00", $start_date);
                }
                if ($end_date != "") {
                    $conditionarray["Endorsement.created <= "] = date("Y-m-d 23:59:59", $end_date);
                }
                if ($type == "endorsed") {
                    $conditionarray["Endorsement.endorsement_for"] = "user";
                }
                $params['conditions'] = $conditionarray;
                $params['joins'] = array(
                    array(
                        'table' => 'users',
                        'alias' => 'User',
                        'type' => 'INNER',
                        'conditions' => array(
                            'User.id =Endorsement.' . $endorse_field
                        )
                    ),
                    array(
                        'table' => 'user_organizations',
                        'alias' => 'UserOrganization',
                        'type' => 'LEFT',
                        'conditions' => array(
                            'UserOrganization.user_id =User.id',
                            'UserOrganization.organization_id =' . $org_id
                        )
                    ),
                    array(
                        'table' => 'org_departments',
                        'alias' => 'OrgDepartments',
                        'type' => 'LEFT',
                        'conditions' => array(
                            'OrgDepartments.id =UserOrganization.department_id'
                        )
                    )
                );
                $params['order'] = 'cnt desc';

                $params['group'] = 'Endorsement.' . $endorse_field;
                $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseCoreValues', 'EndorseReplies')));
                $leaderboard = $this->Endorsement->find("all", $params);
                //echo $this->Endorsement->getLastQuery();exit;
                //	echo $this->Organization->getLastQuery();die;

                $leaderboardArr = array();
                $arraydata = array();
                foreach ($leaderboard as $lvalue) {
                    $deptval = $lvalue["OrgDepartments"]["department"];
                    if ($lvalue["OrgDepartments"]["department"] == null) {
                        $deptval = "";
                    }
                    $tot = (string) $lvalue[0]["cnt"];
                    $leaderboardArr[] = array("name" => $lvalue["User"]["fname"] . " " . $lvalue["User"]["lname"], "department" => $deptval, "Total" => $tot);
                }
                $arraydata[] = array("title" => "Employee", "list" => $leaderboardArr);
                if ($type == "endorsed") {
                    if ($start_date != "") {
                        $startDate = date("Y-m-d 00:00:00", $start_date);
                    }
                    if ($end_date != "") {
                        $endDate = date("Y-m-d 23:59:59", $end_date);
                    }
                    $departmentsql = "SELECT OrgDepartments.id, OrgDepartments.name, COUNT(Endorsement.id) as count FROM  endorsements AS Endorsement
                                        INNER JOIN  org_departments AS OrgDepartments ON (Endorsement.endorsed_id = OrgDepartments.id)
										WHERE  OrgDepartments.status = " . $statusConfig['active'] . "
										AND OrgDepartments.organization_id = " . $org_id . "
									   AND (Endorsement.organization_id = " . $org_id . "  OR  Endorsement.organization_id IS NULL)";
                    if ($start_date != "" && $end_date != "") {

                        $departmentsql .="AND (Endorsement.created BETWEEN '" . $startDate . "' AND '" . $endDate . "')";
                    } elseif ($start_date != "") {
                        $departmentsql .="AND (Endorsement.created >= '" . $startDate . "' )";
                    } elseif ($end_date != "") {
                        $departmentsql .="AND (Endorsement.created <= '" . $endDate . "' )";
                    }
                    $departmentsql .="GROUP BY  OrgDepartments.id, Endorsement.endorsed_id";

                    $departmentsData = $this->OrgDepartments->query($departmentsql);
                    if (!empty($departmentsData)) {
                        // print_r($departmentsData);
                        $leaderboardArr = array();
                        foreach ($departmentsData as $department) {
                            //$departmentDetail = array();
                            //$departmentDetail['id'] = $department['OrgDepartments']['id'];
                            //$departmentDetail['name'] = $department['OrgDepartments']['name'];
                            //$departmentDetail['endorse_count'] = $department[0]['count'];
                            $tot = (string) $department[0]['count'];
                            $leaderboardArr[] = array("name" => $department['OrgDepartments']['name'], "department" => "", "Total" => $tot);
                            // $departments[] = $departmentDetail;
                        }
                        $arraydata[] = array("title" => "Department", "list" => $leaderboardArr);
                    }
                    $entities = array();
                    $entitysql = "SELECT Entity.id, Entity.name, COUNT(Endorsement.id) as count
            FROM endorsements AS Endorsement
            INNER JOIN entities AS Entity ON (Endorsement.endorsed_id = Entity.id)
			WHERE  Entity.status = " . $statusConfig['active'] . "
			AND Entity.organization_id = " . $org_id . "
			AND (Endorsement.organization_id = " . $org_id . "  OR  Endorsement.organization_id IS NULL)";

                    if ($start_date != "" && $end_date != "") {

                        $entitysql .="AND (Endorsement.created BETWEEN '" . $startDate . "' AND '" . $endDate . "')";
                    } elseif ($start_date != "") {
                        $entitysql .="AND (Endorsement.created >= '" . $startDate . "' )";
                    } elseif ($end_date != "") {
                        $entitysql .="AND (Endorsement.created <= '" . $endDate . "' )";
                    }

                    $entitysql .="GROUP BY  Entity.id, Endorsement.endorsed_id";

                    $entitiesData = $this->Entity->query($entitysql);

                    //echo $this->Entity->getLastQuery();die;
//print_r($entitiesData);
                    $leaderboardArr = array();
                    if (!empty($entitiesData)) {
                        foreach ($entitiesData as $entity) {
                            //$entityDetail = array();
                            //$entityDetail['id'] = $entity['Entity']['id'];
                            //$entityDetail['name'] = $entity['Entity']['name'];
                            //$entityDetail['endorse_count'] = $entity[0]['count'];
                            //  $entities[] = $entityDetail;
                            $tot = (string) $entity[0]['count'];
                            $leaderboardArr[] = array("name" => $entity['Entity']['name'], "entity" => "", "Total" => $tot);
                        }
                        $arraydata[] = array("title" => "Sub Organization", "list" => $leaderboardArr);
                    }
                }

                $this->set(array(
                    'result' => array("status" => true
                        , "msg" => "Stats data"
                        , "data" => $arraydata),
                    '_serialize' => array('result')
                ));
            } else {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "You current organization is not set or may be inactive."),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Get call not allowed."),
                '_serialize' => array('result')
            ));
        }
    }

    public function forgotPassword() {
        if ($this->request->is('post')) {
            if (!filter_var($this->request->data['email'], FILTER_VALIDATE_EMAIL)) {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Invalid email address. Please check."),
                    '_serialize' => array('result')
                ));
                return;
            }

            $userData = $this->User->find('first', array('conditions' => array('User.email' => $this->request->data['email'])));

            if (empty($userData)) {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "This email is not registered.", 'isRegistered' => false),
                    '_serialize' => array('result')
                ));
                return;
            }

            $secretCode = $this->getForgotSecretCode();

            $data = array();
            $data['email'] = $this->request->data['email'];
            $data['code'] = $secretCode;
            if ($this->PasswordCode->save($data)) {
                //$subject = "Forgot Password";
                //$template = "forgot_password";
                //$viewVars = array("verification_code" => $secretCode);
                //$this->Common->sendEmail($this->request->data['email'], $subject, $template, $viewVars);

                exec("wget -bqO- " . Router::url('/', true) . "/cron/forgotPasswordEmails &> /dev/null");
//                exec("nohup wget " . Router::url('/', true) . "/cron/forgotPasswordEmails > /dev/null 2>&1 &");
//                exec( "php ".WWW_ROOT."cron_scheduler.php /cron/forgotPasswordEmails/ > /dev/null &");
                $this->set(array(
                    'result' => array("status" => true
                        , "msg" => "Email has been sent with verification code to reset password."),
                    '_serialize' => array('result')
                ));
            } else {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Unable to send verification code. Please try again or contact us at support@ndorse.net."),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Get call not allowed."),
                '_serialize' => array('result')
            ));
        }
    }
    
      private function getForgotSecretCode() {
        $secretCode = "";
        while (1) {
            $secretCode = substr(md5($this->request->data['email'] . time()), 0, 5);
            $recordExist = $this->PasswordCode->find("first", array("conditions" => array("code" => $secretCode, "status" => 0)));

            if (!empty($recordExist)) {
                continue;
            } else {
                break;
            }
        }

        return $secretCode;
    }

    public function resetPassword() {
        if ($this->request->is('post')) {
            $passCode = $this->PasswordCode->find("first", array("conditions" => array("code" => $this->request->data['verification_code'])));
//            $passCode = $this->PasswordCode->find("first", array("conditions" => array("code" => $this->request->data['verification_code'], "email" => $this->request->data['email'])));

            if (empty($passCode)) {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Verification code did not match. Please re-try!"),
                    '_serialize' => array('result')
                ));
                return;
            } else if ($passCode['PasswordCode']['status'] != 0) {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Verification code has already been used. Go to reset password."),
                    '_serialize' => array('result')
                ));
                return;
            }

            $this->User->set($this->request->data);
            $this->User->setValidation('reset_password');

            if ($this->User->validates()) {
                if ($this->User->updateAll(array("password" => "'" . $this->User->getHashPassword($this->request->data['password']) . "'"), array("email" => $passCode['PasswordCode']['email']))) {
                    $this->PasswordCode->id = $passCode['PasswordCode']['id'];
                    $this->PasswordCode->saveField("status", 1);

                    $this->set(array(
                        'result' => array("status" => true
                            , "msg" => "Password reset successfully!"),
                        '_serialize' => array('result')
                    ));
                } else {
                    $this->set(array(
                        'result' => array("status" => true
                            , "msg" => "Unable to reset password. Please try again or contact support@ndorse.net."),
                        '_serialize' => array('result')
                    ));
                }
            } else {
                $errors = $this->User->validationErrors;
                $errorsArray = array();

                foreach ($errors as $key => $error) {
                    $errorsArray[$key] = $error[0];
                }

                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Errors!", 'errors' => $errorsArray),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Get call not allowed."),
                '_serialize' => array('result')
            ));
        }
    }

    function sendPushNotification($deviceToken_msg_arr = null) {

        if (!empty($deviceToken_msg_arr)) {
            // Put your private key's passphrase here:
            //$pem_file = dirname(__FILE__) . '/'.'complianceprod.pem';
            $location = dirname(__FILE__) . '/' . 'Certificates.pem';

            $ctx = stream_context_create();
            stream_context_set_option($ctx, 'ssl', 'local_cert', $location);
            //stream_context_set_option($ctx, 'ssl', 'passphrase', $passphrase);
            // Open a connection to the APNS server
            ////gateway.sandbox.push.apple.com
            $fp = stream_socket_client(
                    'ssl://gateway.push.apple.com:2195', $err, $errstr, 60, STREAM_CLIENT_CONNECT | STREAM_CLIENT_PERSISTENT, $ctx);

            if (!$fp) {
                exit("Failed to connect: $err $errstr" . PHP_EOL);
            } else {
                //echo 'Connected to APNS' . PHP_EOL;
            }

            foreach ($deviceToken_msg_arr as $key => $val) {
                if (!empty($val['token']) && !empty($val['count']) && strlen($val['token']) > 10) {
                    $deviceToken = $val['token'];

                    $message = 'Hey Congrats!. You got a push notification.';
                    //$val['count']
                    $abc = (int) trim($val['count']);

                    $body['aps'] = array(
                        'alert' => $message,
                        'sound' => 'default',
                        'badge' => $abc
                    );

                    // Encode the payload as JSON
                    $payload = json_encode($body);

                    // Build the binary notification
                    $msg = chr(0) . pack('n', 32) . pack('H*', $deviceToken) . pack('n', strlen($payload)) . $payload;

                    // Send it to the server
                    $result = fwrite($fp, $msg, strlen($msg));
                    if (!$result) {
                        // error not send notification
                        //echo 'message send error';
                    } else {
                        //pr($result);
                    }
                }
                //usleep(250000);
            }

            // Close the connection to the server
            fclose($fp);

            return true;
        } else {
            return false;
        }

        return true;

        die('Done');
    }

    public function termsConditions() {
        //$termsConditions = "<h1>Terms & Conditions</h1><p><strong>nDorse Terms and Conditions</strong></p><p>Terms and Condition1</p><p>Terms and Condition2</p><p>Terms and Condition3</p>";
        $termstext = $this->GlobalSetting->findByKey("tandc");
        if (!empty($termstext)) {
            $termstext = $termstext['GlobalSetting']['value'];
        }

        if (isset($this->request->query["is_web"])) {
            $this->set(array(
                'result' => array("status" => true
                    , "msg" => "Terms & Conditionss", "data" => $termstext),
                '_serialize' => array('result')
            ));
        } else {
            $view = new View($this, false);
            $view->set('style', 'style="padding-left:20px;padding-right:20px;padding-top:10px;');
            $view->viewPath = 'Elements';

            $view->set('terms', $termstext);
            /* Grab output into variable without the view actually outputting! */
            $view_output = $view->render('termsandcondition');
//echo $view_output;exit;
            $view_output = str_replace("\r", "", $view_output);
            $view_output = str_replace("\t", "", $view_output);
            $view_output = str_replace("\n", "", $view_output);
            $this->set(array(
                'result' => array("status" => true
                    , "msg" => "Terms & Conditions", "data" => $view_output),
                '_serialize' => array('result')
            ));
        }

        //$this->set(array(
        //    'result' => array("status" => true
        //        , "msg" => "Terms & Conditions", "data" => $termstext),
        //    '_serialize' => array('result')
        //));
    }

    public function getTimelyUpdates() {
        if ($this->request->is('post')) {
            $loggedInUser = $this->Auth->user();
            $returnData = array();
            $msg = "";
            $liveUpdatedCount = $ndorsedUpdatedCount = 0;
            $statusConfig = Configure::read("statusConfig");
            $roleList = $this->Common->setSessionRoles();
            $userRoleChanged = false;
            $userRole = "";

            //Get feeds update
            if (isset($loggedInUser['current_org'])) {
                $userOrg = $this->UserOrganization->find("first", array("conditions" => array("user_id" => $loggedInUser['id'], "organization_id" => $loggedInUser['current_org']['id'])));
                //pr($userOrg);die;
                if ($userOrg['Organization']['status'] == $statusConfig['active'] && $userOrg['UserOrganization']['status'] == $statusConfig['active']) {

                    $liveUpdated = $userOrg['UserOrganization']['live_updated'];
                    $ndorsedUpdated = $userOrg['UserOrganization']['ndorsed_updated'];

                    if ($liveUpdated != "0000-00-00 00:00:00") {
                        $liveUpdatedCount = $this->Endorsement->find("count", array("conditions" => array(
                                "organization_id" => $loggedInUser['current_org']['id'],
                                "type !=" => "private",
                                "created > " => $liveUpdated
                        )));
                    } else {
                        $liveUpdatedCount = 0;
                    }

                    if ($ndorsedUpdated != "0000-00-00 00:00:00") {
                        $ndorsedUpdatedCount = $this->Endorsement->find("count", array("conditions" => array(
                                "organization_id" => $loggedInUser['current_org']['id'],
                                "created > " => $ndorsedUpdated,
                                "endorsed_id " => $loggedInUser['id']
                        )));
                    } else {
                        $ndorsedUpdatedCount = 0;
                    }

                    if ($liveUpdated == "0000-00-00 00:00:00" || $ndorsedUpdated == "0000-00-00 00:00:00") {
                        $updateArray = array();
                        if ($liveUpdated == "0000-00-00 00:00:00") {
                            $updateArray['live_updated'] = '"' . date("Y-m-d H:i:s") . '"';
                        }
                        if ($ndorsedUpdated == "0000-00-00 00:00:00") {
                            $updateArray['ndorsed_updated'] = '"' . date("Y-m-d H:i:s") . '"';
                        }

                        $this->UserOrganization->updateAll($updateArray, array("user_id" => $loggedInUser['id'], "organization_id" => $loggedInUser['current_org']['id']));
                    }
                }


                //$isCurrentOrgActive = 1;

                $userStatus = array_search($userOrg['UserOrganization']["status"], $statusConfig);
                $orgStatus = array_search($userOrg['Organization']["status"], $statusConfig);

                $userRole = $roleList[$userOrg['UserOrganization']['user_role']];

                if ($loggedInUser['current_org']['org_role'] != $userRole) {

                    $message = $loggedInUser['email'] . "---> " . $loggedInUser['current_org']['org_role'] . "  === " . $userRole;
                    $this->log($message, "getTimelyUpdates");
                    $userRoleChanged = true;
                    $this->Session->write('Auth.User.current_org.org_role', $userRole);
                }

                if ($userStatus != 'active' || $orgStatus != 'active') {
                    unset($loggedInUser['current_org']);
                    $this->Session->write('Auth.User', $loggedInUser);
                }
            } else {


                $params = array();
                $params['fields'] = "*";
                $params['joins'] = array(
                    array(
                        'table' => 'user_organizations',
                        'alias' => 'UserOrganization',
                        'type' => 'LEFT',
                        'conditions' => array(
                            'UserOrganization.user_id = ' . $loggedInUser['id'],
                            'UserOrganization.organization_id = DefaultOrg.organization_id'
                        )
                    )
                );

                $params['conditions'] = array("DefaultOrg.user_id" => $loggedInUser['id']);

                $defaultOrganization = $this->DefaultOrg->find("first", $params);


                if (empty($defaultOrganization)) {
                    //$isCurrentOrgActive = 0;
                    $userStatus = "";
                    $orgStatus = "";
                } else {
                    if ($defaultOrganization['Organization']['status'] == $statusConfig['active'] && $defaultOrganization['UserOrganization']['status'] == $statusConfig['active']) {
                        $currentOrg = $defaultOrganization['Organization'];

                        if ($defaultOrganization['UserOrganization']['entity_id'] > 0) {
                            // $department= $this->getOrgValues($org_id, "OrgDepartments",true,array($endorserd_id));
                            $entity = $this->getOrgValues($currentOrg["id"], "Entity", true, array($defaultOrganization['UserOrganization']['entity_id']));
                            if (!empty($entity)) {
                                $currentOrg['entity'] = $entity[0]["name"];
                            } else {
                                $currentOrg['entity'] = "";
                            }
                        } else {
                            $currentOrg['entity'] = "";
                        }

                        if ($defaultOrganization['UserOrganization']['department_id'] > 0) {
                            // $department= $this->getOrgValues($org_id, "OrgDepartments",true,array($endorserd_id));
                            $department = $this->getOrgValues($currentOrg["id"], "OrgDepartments", true, array($defaultOrganization['UserOrganization']['department_id']));
                            // $department = $defaultOrganization['UserOrganization']['department_id'];
                            if (!empty($department)) {
                                $currentOrg['department'] = $department[0]["name"];
                            } else {
                                $currentOrg['department'] = "";
                            }
                        } else {
                            $currentOrg['department'] = "";
                        }
                        if ($defaultOrganization['UserOrganization']['job_title_id'] > 0) {
                            // $department= $this->getOrgValues($org_id, "OrgDepartments",true,array($endorserd_id));
                            $jobtitle = $this->getOrgValues($currentOrg["id"], "OrgJobTitles", 1, array($defaultOrganization['UserOrganization']['job_title_id']));

                            if (!empty($jobtitle)) {
                                $currentOrg['job_title'] = $jobtitle[0]["name"];
                            } else {
                                $currentOrg['job_title'] = "";
                            }
                        } else {
                            $currentOrg['job_title'] = "";
                        }


                        $userRole = $currentOrg['org_role'] = $roleList[$defaultOrganization['UserOrganization']['user_role']];
                        if ($currentOrg["image"] != "") {
                            $currentOrg["image"] = Router::url('/', true) . "app/webroot/" . ORG_IMAGE_DIR . "small/" . $currentOrg["image"];
                        }


                        $this->Session->write('Auth.User.current_org', $currentOrg);
                        $returnData['current_org'] = $currentOrg;
                        //$isCurrentOrgActive = 1;
                        $msg = "Default Organization activated!";
                    } else {
                        $userRole = isset($roleList[$defaultOrganization['UserOrganization']['user_role']]) && !empty($roleList[$defaultOrganization['UserOrganization']['user_role']]) ? $roleList[$defaultOrganization['UserOrganization']['user_role']] : "";
                    }
                    $userStatus = array_search($defaultOrganization['UserOrganization']["status"], $statusConfig);
                    $orgStatus = array_search($defaultOrganization['Organization']["status"], $statusConfig);
                }
            }

            if (!empty($orgStatus) && !empty($userStatus)) {
                if ($orgStatus != 'active') {
                    //$isCurrentOrgActive = 0;

                    if ($orgStatus == 'inactive') {
                        $msg = "Default Organization inactivated.";
                    } else {
                        $msg = "Default Organization deleted!";
                    }
                } else if ($userStatus != 'active') {
                    //$isCurrentOrgActive  = 0;

                    if ($userStatus == 'inactive' || $userStatus == 'eval') {
                        $msg = "nDorse access inactivated for default Organization. Contact Organization Admin.";
                    } else if ($userStatus == 'deleted') {
                        $msg = "You have been deleted from your default nDorse Organization. Contact Organization Admin.";
                    }
                }

                $returnData['feed_updates'] = array("live_updated_count" => (int) $liveUpdatedCount, "ndorsed_updated_count" => (int) $ndorsedUpdatedCount);
                $returnData['org_updates'] = array("user_status" => $userStatus, "org_status" => $orgStatus, "user_role_changed" => $userRoleChanged, "user_role" => $userRole, "msg" => $msg);
            }

            $this->set(array(
                'result' => array("status" => true
                    , "msg" => "Updates", "data" => $returnData),
                '_serialize' => array('result')
            ));
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Get call not allowed."),
                '_serialize' => array('result')
            ));
        }
    }

    public function recoverusername() {
        if (isset($this->request->query["email"])) {
            $email = $this->request->query["email"];
            if (filter_var($email, FILTER_VALIDATE_EMAIL)) {

                $userdata = $this->User->findByEmail(strtolower($email));
                if (!empty($userdata)) {
                    $subject = "Recover Username";
                    $viewVars = array("username" => $userdata["User"]["email"], "fname" => $userdata["User"]["fname"]);
                    $configVars = serialize($viewVars);
                    $emailQueue[] = array("to" => $email, "subject" => $subject, "config_vars" => $configVars, "template" => "recover_username");
                    $this->Email->saveMany($emailQueue);
                    $this->set(array(
                        'result' => array("status" => true
                            , "msg" => "username detail send successfully",
                            "data" => true),
                        '_serialize' => array('result')
                    ));
                } else {
                    $this->set(array(
                        'result' => array("status" => false
                            , "msg" => "This username not exist this system"),
                        '_serialize' => array('result')
                    ));
                }
            } else {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Invalid email address"),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "email address key not exist."),
                '_serialize' => array('result')
            ));
        }
    }

    public function topendorse() {

        if ($this->request->is('post')) {
            $statusConfig = Configure::read("statusConfig");
            $loggedInUser = $this->Auth->user();
            $user_id = $loggedInUser['id'];
            if (isset($loggedInUser['current_org'])) {
                //print_r($loggedInUser['current_org']);
                $org_id = $loggedInUser['current_org']['id'];
                //token=a640fe8d1ccd9949adef9103cdfe2615&month=March&year=2015
                $month = date("F");
                $year = date("Y");
                $currentmonth = 1;
                //$last_week_start = strtotime('-2 week monday 00:00:00');
                //$last_week_end = strtotime('-1 week sunday 23:59:59');
                if (date('N') == 1) {
                    $last_week_start = date('Y-m-d 00:00:00', strtotime('-1 week monday 00:00:00'));
                } else {
                    $last_week_start = date('Y-m-d 00:00:00', strtotime('-2 week monday 00:00:00'));
                }



                $last_week_end = date('Y-m-d 23:59:59', strtotime('-1 week sunday 23:59:59'));

                if (isset($this->request->data["month"]) && $this->request->data["month"] != "" && isset($this->request->data["year"]) && $this->request->data["year"] != "") {
                    $month = $this->request->data["month"];
                    $year = $this->request->data["year"];
                    $currentmonth = 0;
                }

                if ($month != "" && $year != "") {

                    $month = strtolower($month);



                    $startdate = $month . ' 01 ' . $year;
                    $sdate = date('Y-m-d', strtotime($startdate));
                    $enddate = date('Y-m-t', strtotime($sdate));
                    $month = date('m', strtotime($sdate));
                    $start_date = date('Y-m-d 00:00:00', strtotime($sdate));

                    $topendorsedmontharray = array();
                    $topendorsedweekarray = array();
                    $weekarray = array();
                    $end_date = date('Y-m-d 23:59:59', strtotime($enddate));

                    $allusernew = array();
                    $first_day = date('N', strtotime($startdate));
                    if ($first_day != 1) {
                        $first_day = 7 - $first_day + 1;
                    } else {
                        $first_day = 0;
                    }
                    $last_day = date('t', strtotime($startdate));
                    $days = array();
                    for ($i = $first_day; $i <= $last_day; $i = $i + 7) {
                        $days[] = $i;
                    }
                    // print_r($days);
                    $params = array();
                    $params['fields'] = "count(Endorsement.endorser_id) as cnt,Endorsement.endorser_id,User.id, User.fname ,User.lname,User.image,Endorsement.organization_id,OrgDepartments.name,OrgJobTitles.title";
                    //$conditionarray["Endorsement.endorsement_for"] = 'user';
                    $conditionarray["Endorsement.organization_id"] = $org_id;
                    $conditionarray["Endorsement.created >= "] = $start_date;
                    $conditionarray["Endorsement.created <= "] = $end_date;
                    $params['joins'] = array(
                        array(
                            'table' => 'users',
                            'alias' => 'User',
                            'type' => 'INNER',
                            'conditions' => array(
                                'Endorsement.endorser_id =User.id '
                            )
                        ), array(
                            'table' => 'user_organizations',
                            'alias' => 'UserOrganization',
                            'type' => 'INNER',
                            'conditions' => array(
                                'Endorsement.endorser_id =UserOrganization.user_id ',
                                'UserOrganization.organization_id =' . $org_id
                            )
                        ), array(
                            'table' => 'org_departments',
                            'alias' => 'OrgDepartments',
                            'type' => 'LEFT',
                            'conditions' => array(
                                'OrgDepartments.id =UserOrganization.department_id'
                            )
                        ),
                        array(
                            'table' => 'org_job_titles',
                            'alias' => 'OrgJobTitles',
                            'type' => 'LEFT',
                            'conditions' => array(
                                'OrgJobTitles.id =UserOrganization.job_title_id'
                            )
                        )
                    );
                    $params['group'] = 'Endorsement.endorser_id,Endorsement.organization_id';
                    $params['order'] = array('cnt DESC');
                    $params['conditions'] = $conditionarray;
                    $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseCoreValues', 'EndorseReplies')));
                    $topendorserd = $this->Endorsement->find("all", $params);
                    // print_r($topendorserd);
                    //echo $this->Endorsement->getLastQuery();	
                    $topendorsedmontharray["endorser"] = $topendorserd;


                    $params['fields'] = "count(Endorsement.endorsed_id) as cnt,Endorsement.endorsed_id,User.id, User.fname ,User.lname,User.image,Endorsement.organization_id,OrgDepartments.name,OrgJobTitles.title";
                    $conditionarray["Endorsement.endorsement_for"] = 'user';

                    $params['joins'] = array(
                        array(
                            'table' => 'users',
                            'alias' => 'User',
                            'type' => 'INNER',
                            'conditions' => array(
                                'Endorsement.endorsed_id =User.id '
                            )
                        ),
                        array(
                            'table' => 'user_organizations',
                            'alias' => 'UserOrganization',
                            'type' => 'INNER',
                            'conditions' => array(
                                'Endorsement.endorsed_id =UserOrganization.user_id ',
                                'UserOrganization.organization_id =' . $org_id
                            )
                        ), array(
                            'table' => 'org_departments',
                            'alias' => 'OrgDepartments',
                            'type' => 'LEFT',
                            'conditions' => array(
                                'OrgDepartments.id =UserOrganization.department_id'
                            )
                        ),
                        array(
                            'table' => 'org_job_titles',
                            'alias' => 'OrgJobTitles',
                            'type' => 'LEFT',
                            'conditions' => array(
                                'OrgJobTitles.id =UserOrganization.job_title_id'
                            )
                        )
                    );
                    $params['group'] = 'Endorsement.endorsed_id,Endorsement.organization_id';
                    $params['order'] = array('cnt DESC');
                    $params['conditions'] = $conditionarray;
                    $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseCoreValues', 'EndorseReplies')));
                    $topendorserd = $this->Endorsement->find("all", $params);
                    //print_r($topendorserd);
                    $topendorsedmontharray["endorsed"] = $topendorserd;

                    //print_r($topendorsedmontharray);
                    $wcount = 1;

                    foreach ($days as $dayval) {
                        if ($wcount < count($days)) {
                            // echo $dayval;
                            $startweekday = $year . "-" . $month . "-" . ($dayval + 1);
                            $endweekday = $year . "-" . $month . "-" . ($dayval + 7);
                            //echo "start date";
                            $start_date = date('Y-m-d 00:00:00', strtotime($startweekday));

                            $end_date = date('Y-m-d 23:59:59', strtotime($endweekday));
                            //  $last_week_start=  date('Y-m-d 00:00:00',  strtotime('-2 week monday 00:00:00'));
                            //$last_week_end =  date('Y-m-d 23:59:59', strtotime('-1 week sunday 23:59:59'));

                            if ($currentmonth == 1 && $wcount > 1) {

                                continue;
                            } elseif ($currentmonth == 1) {
                                $start_date = $last_week_start;
                                $end_date = $last_week_end;
                                $startweekday = date("Y-m-d", strtotime($start_date)); //$year."-".$month."-".($dayval+1);
                                $endweekday = date("Y-m-d", strtotime($end_date)); // $year."-".$month."-".($dayval+7);
                            }

                            $params = array();
                            $params['fields'] = "count(Endorsement.endorser_id) as cnt,Endorsement.endorser_id,User.id, User.fname ,User.lname,User.image,Endorsement.organization_id,OrgDepartments.name,OrgJobTitles.title";
                            //$conditionarray["Endorsement.endorsement_for"] = 'user';
                            $conditionarray["Endorsement.organization_id"] = $org_id;
                            $conditionarray["Endorsement.created >= "] = $start_date;
                            $conditionarray["Endorsement.created <= "] = $end_date;
                            $params['joins'] = array(
                                array(
                                    'table' => 'users',
                                    'alias' => 'User',
                                    'type' => 'INNER',
                                    'conditions' => array(
                                        'Endorsement.endorser_id =User.id '
                                    )
                                ), array(
                                    'table' => 'user_organizations',
                                    'alias' => 'UserOrganization',
                                    'type' => 'INNER',
                                    'conditions' => array(
                                        'Endorsement.endorser_id =UserOrganization.user_id ',
                                        'UserOrganization.organization_id =' . $org_id
                                    )
                                ), array(
                                    'table' => 'org_departments',
                                    'alias' => 'OrgDepartments',
                                    'type' => 'LEFT',
                                    'conditions' => array(
                                        'OrgDepartments.id =UserOrganization.department_id'
                                    )
                                ),
                                array(
                                    'table' => 'org_job_titles',
                                    'alias' => 'OrgJobTitles',
                                    'type' => 'LEFT',
                                    'conditions' => array(
                                        'OrgJobTitles.id =UserOrganization.job_title_id'
                                    )
                                )
                            );
                            $params['group'] = 'Endorsement.endorser_id,Endorsement.organization_id';
                            $params['order'] = array('cnt DESC');
                            $params['conditions'] = $conditionarray;
                            $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseCoreValues', 'EndorseReplies')));
                            $topendorserd = $this->Endorsement->find("all", $params);
                            //
                            //  print_r($topendorserd);
                            $topendorsedusernew = 0;
                            $topendorseduserweek = array();
                            $topcnt = 0;


                            foreach ($topendorserd as $val) {

                                if ($topendorsedusernew == 0) {
                                    $topendorsedusernew = $val[0]["cnt"];
                                    $topendorseduserweek = array($val["User"]["id"]);
                                } else {
                                    if ($val[0]["cnt"] > $topendorsedusernew) {
                                        $topendorsedusernew = $val[0]["cnt"];
                                        $topendorseduserweek = array($val["User"]["id"]);
                                    } elseif ($val[0]["cnt"] == $topendorsedusernew) {
                                        $previous_arr = $topendorseduserweek;
                                        $topendorseduserweek = array_merge($previous_arr, array($val["User"]["id"]));
                                    }
                                }
                                if (!in_array($val["User"]["id"], $allusernew)) {
                                    $allusernew[$val["User"]["id"]] = array_merge($val["User"], $val["OrgDepartments"], $val["OrgJobTitles"]);
                                }
                            }

                            $topendorseduserweekdata[$startweekday . "&&&&" . $endweekday]["endorser"] = $topendorseduserweek;
                            //
                            //print_r($topendorserd);
                            //$topendorsedweekarray[$startweekday."&&&&".$endweekday]["endorse"] =  $topendorserd;
                            //$topendorsedmontharray["endorse"]= $topendorserd;

                            $params['fields'] = "count(Endorsement.endorsed_id) as cnt,Endorsement.endorsed_id,User.id, User.fname ,User.lname,User.image,Endorsement.organization_id,OrgDepartments.name,OrgJobTitles.title";
                            $conditionarray["Endorsement.endorsement_for"] = 'user';

                            $params['joins'] = array(
                                array(
                                    'table' => 'users',
                                    'alias' => 'User',
                                    'type' => 'INNER',
                                    'conditions' => array(
                                        'Endorsement.endorsed_id =User.id '
                                    )
                                ),
                                array(
                                    'table' => 'user_organizations',
                                    'alias' => 'UserOrganization',
                                    'type' => 'INNER',
                                    'conditions' => array(
                                        'Endorsement.endorsed_id =UserOrganization.user_id ',
                                        'UserOrganization.organization_id =' . $org_id
                                    )
                                ), array(
                                    'table' => 'org_departments',
                                    'alias' => 'OrgDepartments',
                                    'type' => 'LEFT',
                                    'conditions' => array(
                                        'OrgDepartments.id =UserOrganization.department_id'
                                    )
                                ),
                                array(
                                    'table' => 'org_job_titles',
                                    'alias' => 'OrgJobTitles',
                                    'type' => 'LEFT',
                                    'conditions' => array(
                                        'OrgJobTitles.id =UserOrganization.job_title_id'
                                    )
                                )
                            );
                            $params['group'] = 'Endorsement.endorsed_id,Endorsement.organization_id';
                            $params['order'] = array('cnt DESC');
                            $params['conditions'] = $conditionarray;
                            $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseCoreValues', 'EndorseReplies')));
                            $topendorserd = $this->Endorsement->find("all", $params);
                            $topendorsedusernew = 0;
                            $topendorseduserweek = array();
                            $topcnt = 0;


                            foreach ($topendorserd as $val) {
                                //print_r($val[0]["cnt"])."dddttt";
                                // echo "<hr>";

                                if ($topendorsedusernew == 0) {
                                    $topendorsedusernew = $val[0]["cnt"];
                                    $topendorseduserweek = array($val["User"]["id"]);
                                } else {
                                    if ($val[0]["cnt"] > $topendorsedusernew) {
                                        $topendorsedusernew = $val[0]["cnt"];
                                        $topendorseduserweek = array($val["User"]["id"]);
                                    } elseif ($val[0]["cnt"] == $topendorsedusernew) {
                                        $previous_arr = $topendorseduserweek;
                                        $topendorseduserweek = array_merge($previous_arr, array($val["User"]["id"]));
                                    }
                                }
                                if (!in_array($val["User"]["id"], $allusernew)) {
                                    $allusernew[$val["User"]["id"]] = array_merge($val["User"], $val["OrgDepartments"], $val["OrgJobTitles"]);
                                }
                            }
                            //echo "<hr>";
                            //print_r($topendorseduserweek);
                            //echo "<hr>";
                            //echo $this->Endorsement->getLastQuery();
                            $topendorseduserweekdata[$startweekday . "&&&&" . $endweekday]["endorsed"] = $topendorseduserweek;
                            // print_r($topendorserd);
                            // $topendorsedmontharray["endorsed"]= $topendorserd;
                            // print_r($topendorsedmontharray);
                            $week[] = $startweekday . "&&&&" . $endweekday;
                        }
                        $wcount++;
                    }
                    // print_r($topendorseduserweekdata);
                    $topendorsedusermonthnew = 0;
                    $topendorsedusermonth = array();
                    $topcnt = 0;


                    foreach ($topendorsedmontharray["endorser"] as $val) {

                        if ($topendorsedusermonthnew == 0) {
                            $topendorsedusermonthnew = $val[0]["cnt"];
                            $topendorsedusermonth = array($val["User"]["id"]);
                        } else {
                            if ($val[0]["cnt"] > $topendorsedusermonthnew) {
                                $topendorsedusermonthnew = $val[0]["cnt"];
                                $topendorsedusermonth = array($val["User"]["id"]);
                            } elseif ($val[0]["cnt"] == $topendorsedusermonthnew) {
                                $previous_arr = $topendorsedusermonth;
                                $topendorsedusermonth = array_merge($previous_arr, array($val["User"]["id"]));
                            }
                        }
                        if (!in_array($val["User"]["id"], $allusernew)) {
                            $allusernew[$val["User"]["id"]] = array_merge($val["User"], $val["OrgDepartments"], $val["OrgJobTitles"]);
                        }
                    }

                    $topendorsedmontharray["endorser"] = $topendorsedusermonth;
                    $topendorsedusermonthnew = 0;
                    $topendorsedusermonth = array();
                    $topcnt = 0;


                    foreach ($topendorsedmontharray["endorsed"] as $val) {

                        if ($topendorsedusermonthnew == 0) {
                            $topendorsedusermonthnew = $val[0]["cnt"];
                            $topendorsedusermonth = array($val["User"]["id"]);
                        } else {
                            if ($val[0]["cnt"] > $topendorsedusermonthnew) {
                                $topendorsedusermonthnew = $val[0]["cnt"];
                                $topendorsedusermonth = array($val["User"]["id"]);
                            } elseif ($val[0]["cnt"] == $topendorsedusermonthnew) {
                                $previous_arr = $topendorsedusermonth;

                                $topendorsedusermonth = array_merge($previous_arr, array($val["User"]["id"]));
                            }
                        }
                        if (!in_array($val["User"]["id"], $allusernew)) {
                            $allusernew[$val["User"]["id"]] = array_merge($val["User"], $val["OrgDepartments"], $val["OrgJobTitles"]);
                        }
                    }
                    $topendorsedmontharray["endorsed"] = $topendorsedusermonth;
                    //print_r($topendorsedmontharray);
                    //print_r($allusernew);
                    $topendoserwise = array();
                    $arraydata = array();

                    foreach ($topendorseduserweekdata as $key => $topval) {

                        $weekday = explode("&&&&", $key);
                        $startweekday = $weekday[0];
                        $endweekday = $weekday[1];
                        if (!empty($topval["endorser"])) {
                            //if ($currentmonth != 1) {
                            $duration = "(" . date("m/d/Y", strtotime($startweekday)) . " - " . date("m/d/Y", strtotime($endweekday)) . ")";
                            //} else {
                            //  $duration = "";
                            // }
                            $headtitle = "Top nDorser of the Week";
                            $tdata = array();
                            foreach ($topval["endorser"] as $tval) {
                                $val = $allusernew[$tval];

                                if ($val["image"] != "") {
                                    $val["image"] = Router::url('/', true) . "app/webroot/" . PROFILE_IMAGE_DIR . "small/" . $val["image"];
                                }
                                $val["department"] = $val["name"];
                                if ($val["name"] == null) {
                                    $val["department"] = "";
                                }
                                $val["job_title"] = $val["title"];
                                if ($val["job_title"] == null) {
                                    $val["job_title"] = "";
                                }

                                $val["name"] = trim($val["fname"] . " " . $val["lname"]);
                                $val["isData"] = "1";
                                $val["type"] = "week";
                                $tdata[] = $val;
                            }
                            if (!empty($tdata[0])) {
                                $arraydata[] = array("title" => $headtitle, "duration" => $duration, "list" => $tdata);
                            }
                        } else {
                            $arraydata1 = array();
                            $arraydata1[] = array("name" => "", "image" => "", "isData" => "0", "job_title" => "", "type" => "week");
                            $duration = "(" . date("m/d/Y", strtotime($startweekday)) . " - " . date("m/d/Y", strtotime($endweekday)) . ")";
                            $headtitle = "Top nDorser of the Week";
                            $arraydata[] = array("title" => $headtitle, "duration" => $duration, "list" => $arraydata1);
                        }
                        if (!empty($topval["endorsed"])) {
                            // $duration ="(".date("m/d/Y",strtotime($startweekday))." - ".date("m/d/Y",strtotime($endweekday)).")";
                            // if ($currentmonth != 1) {
                            $duration = "(" . date("m/d/Y", strtotime($startweekday)) . " - " . date("m/d/Y", strtotime($endweekday)) . ")";
                            // } else {
                            //     $duration = "";
                            // }
                            $headtitle = "Top nDorsed of the Week";
                            $tdata = array();
                            foreach ($topval["endorsed"] as $tval) {
                                $val = $allusernew[$tval];
                                if ($val["image"] != "") {
                                    $val["image"] = Router::url('/', true) . "app/webroot/" . PROFILE_IMAGE_DIR . "small/" . $val["image"];
                                }
                                $val["department"] = $val["name"];
                                if ($val["name"] == null) {
                                    $val["department"] = "";
                                }
                                $val["job_title"] = $val["title"];
                                if ($val["job_title"] == null) {
                                    $val["job_title"] = "";
                                }
                                $val["name"] = trim($val["fname"] . " " . $val["lname"]);
                                $val["isData"] = "1";
                                $val["type"] = "week";
                                $tdata[] = $val;
                            }
                            if (!empty($tdata[0])) {
                                $arraydata[] = array("title" => $headtitle, "duration" => $duration, "list" => $tdata);
                            }
                        } else {
                            $arraydata1 = array();
                            $arraydata1[] = array("name" => "", "image" => "", "isData" => "0", "job_title" => "", "type" => "week");
                            // if ($currentmonth != 1) {
                            $duration = "(" . date("m/d/Y", strtotime($startweekday)) . " - " . date("m/d/Y", strtotime($endweekday)) . ")";
                            //} else {
                            //    $duration = "";
                            // }
                            // $duration ="(".date("m/d/Y",strtotime($startweekday))." - ".date("m/d/Y",strtotime($endweekday)).")";
                            $headtitle = "Top nDorsed of the Week";
                            $arraydata[] = array("title" => $headtitle, "duration" => $duration, "list" => $arraydata1);
                        }
                    }
                    $monthdata = array();
                    foreach ($topendorsedmontharray as $key => $topval) {


                        if (!empty($topval)) {
                            $ndorsename = str_replace("endorse", "nDorse", $key);
                            $headtitle = "Top " . $ndorsename . " of the Month";
                            $tdata = array();
                            // print_r($topval);
                            foreach ($topval as $tval) {
                                //echo $tval;echo "<hr>";
                                $val = $allusernew[$tval];

                                if ($val["image"] != "") {
                                    $val["image"] = Router::url('/', true) . "app/webroot/" . PROFILE_IMAGE_DIR . "small/" . $val["image"];
                                }
                                $val["department"] = $val["name"];
                                if ($val["name"] == null) {
                                    $val["department"] = "";
                                }
                                $val["job_title"] = $val["title"];
                                if ($val["job_title"] == null) {
                                    $val["job_title"] = "";
                                }

                                $val["job_title"] = $val["title"];
                                $val["name"] = trim($val["fname"] . " " . $val["lname"]);
                                $val["isData"] = "1";
                                $val["type"] = "month";

                                $tdata[] = $val;
                            }
                            if (!empty($tdata[0])) {
                                $monthdata[] = $arraydata[] = array("title" => $headtitle, "list" => $tdata);
                            }
                        } else {
                            $arraydata1 = array();
                            $ndorsename = str_replace("endorse", "nDorse", $key);
                            $headtitle = "Top " . $ndorsename . " of the Month";
                            $arraydata1[] = array("name" => "", "image" => "", "isData" => "0", "job_title" => "", "type" => "month");
                            $arraydata[] = array("title" => $headtitle, "list" => $arraydata1);
                        }
                    }
                    $topendoserwise[] = $arraydata;
                    //print_r($arraydata);
                    if (!empty($arraydata)) {
                        $this->set(array(
                            'result' => array("status" => true
                                , "msg" => "Top endorsed data", "data" => $arraydata),
                            '_serialize' => array('result')
                        ));
                    } else {
                        $this->set(array(
                            'result' => array("status" => false
                                , "msg" => "No Top Endorsements available for this Month", "data" => true),
                            '_serialize' => array('result')
                        ));
                    }
                } else {
                    $topendorserorg = $this->Topendorser->find("all", array("conditions" => array("organization_id" => $org_id)));
                    // print_r($topendorserorg);
                    $topendorseuser = array();
                    $alluser = array();
                    if (!empty($topendorserorg)) {
                        foreach ($topendorserorg as $val) {
                            // print_r($val);
                            $endorser_user = explode(",", $val["Topendorser"]["endorser"]);
                            $endorsed_user = explode(",", $val["Topendorser"]["endorsed"]);
                            $alluser1 = array_merge($endorser_user, $endorsed_user);
                            $alluser = array_merge($alluser, $alluser1);
                            $alluser = array_unique($alluser);
                            $topendorseuser[$val["Topendorser"]["type"]] = array("top_endorser" => $endorser_user, "top_endorsed" => $endorsed_user);
                        }

                        $alluser = array_unique($alluser);
                        $userDetails = $this->User->find("all", array(
                            "joins" => array(
                                array(
                                    'table' => 'user_organizations',
                                    'alias' => 'UserOrganization',
                                    'type' => 'INNER',
                                    'conditions' => array(
                                        'UserOrganization.user_id = User.id',
                                        'UserOrganization.organization_id=' . $org_id
                                    )
                                ), array(
                                    'table' => 'org_departments',
                                    'alias' => 'OrgDepartments',
                                    'type' => 'LEFT',
                                    'conditions' => array(
                                        'OrgDepartments.id =UserOrganization.department_id'
                                    )
                                ),
                                array(
                                    'table' => 'org_job_titles',
                                    'alias' => 'OrgJobTitles',
                                    'type' => 'LEFT',
                                    'conditions' => array(
                                        'OrgJobTitles.id =UserOrganization.job_title_id'
                                    )
                                )
                            ),
                            "conditions" => array("User.id" => $alluser)
                            , "fields" => array("User.id", "User.fname", "User.lname", "User.image", "OrgJobTitles.title", "OrgDepartments.name")));


                        $userdata = array();

                        foreach ($userDetails as $val) {

                            $job_title = "";
                            $department_name = "";

                            if ($val["OrgDepartments"]["name"] != "") {
                                $job_title = $val["OrgDepartments"]["name"];
                            }
                            if ($val["OrgJobTitles"]["title"] != "") {
                                $department_name = $val["OrgJobTitles"]["title"];
                            }
                            if ($val["User"]["image"] != "") {
                                $val["User"]["image"] = Router::url('/', true) . "app/webroot/" . PROFILE_IMAGE_DIR . "small/" . $val["User"]["image"];
                            }
                            $val["User"]["name"] = trim($val["User"]["fname"] . " " . $val["User"]["lname"]);

                            $val["User"]["department"] = $department_name;
                            $val["User"]["job_title"] = $job_title;


                            $val["User"]["isData"] = "1";
                            unset($val["User"]["fname"]);
                            unset($val["User"]["lname"]);
                            $userdata[$val["User"]["id"]] = $val["User"];
                            // print_r($val["User"]);
                        }

                        //print_r($topendorseuser);
                        $topendoserwise = array();
                        $arraydata = array();
                        foreach ($topendorseuser as $key => $topval) {

                            $headtitle = "Top nDorser of the " . $key;
                            $t_endorser = $topval["top_endorser"];
                            $tdata = array();
                            foreach ($t_endorser as $tval) {
                                if ($tval > 0) {
                                    $tdata[] = $userdata[$tval];
                                }
                            }
                            if (!empty($tdata[0])) {
                                $arraydata[] = array("title" => $headtitle, "list" => $tdata);
                            }
                            $headtitle = "Top nDorsed of the " . $key;
                            $t_endorsed = $topval["top_endorsed"];

                            $tdata = array();
                            foreach ($t_endorsed as $tval) {
                                if ($tval > 0) {
                                    $tdata[] = $userdata[$tval];
                                }
                            }
                            if (!empty($tdata[0])) {
                                $arraydata[] = array("title" => $headtitle, "list" => $tdata);
                            }
                        }
                        $topendoserwise[] = $arraydata;
                        $this->set(array(
                            'result' => array("status" => true
                                , "msg" => "Top endorsed data", "data" => $arraydata),
                            '_serialize' => array('result')
                        ));
                    } else {
                        $this->set(array(
                            'result' => array("status" => false
                                , "msg" => "No Top Endorsements available"),
                            '_serialize' => array('result')
                        ));
                    }
                }
            } else {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Currently any organization has been not joined."),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "email address key not exist."),
                '_serialize' => array('result')
            ));
        }
    }

    public function endorsementbydept() {


        if ($this->request->is('post')) {
            $statusConfig = Configure::read("statusConfig");
            $loggedInUser = $this->Auth->user();
            $user_id = $loggedInUser['id'];
            if (isset($loggedInUser['current_org'])) {

                if (isset($this->request->data["height"]) && $this->request->data["height"] > 0) {
                    $height = $this->request->data["height"];
                } else {
                    $height = 400;
                }
                if (isset($this->request->data["width"]) && $this->request->data["width"] > 0) {
                    $width = $this->request->data["width"];
                } else {
                    $width = 450;
                }


                $org_id = $loggedInUser['current_org']['id'];

                $params = array();
                $start_date = "";
                $end_date = "";
                if (isset($this->request->data["start_date"]) && $this->request->data["start_date"] != "") {
                    $start_date = $this->request->data["start_date"];
                }
                if (isset($this->request->data["end_date"]) && $this->request->data["end_date"] != "") {
                    $end_date = $this->request->data["end_date"];
                }
                $params = array();

                if ($start_date != "") {

                    $conditionarray["Endorsement.created >= "] = date("Y-m-d 00:00:00", $start_date);
                }
                if ($end_date != "") {
                    $conditionarray["Endorsement.created <= "] = date("Y-m-d 23:59:59", $end_date);
                }

                $params['fields'] = "count(Endorsement.endorsed_id) as cnt,OrgDepartments.name as department";
                $conditionarray["Endorsement.organization_id"] = $org_id;

                $conditionarray["Endorsement.endorsement_for"] = "department";

                $params['conditions'] = $conditionarray;
                $params['joins'] = array(
                    array(
                        'table' => 'org_departments',
                        'alias' => 'OrgDepartments',
                        'type' => 'LEFT',
                        'conditions' => array(
                            'OrgDepartments.id =Endorsement.endorsed_id'
                        )
                    )
                );
                $params['order'] = 'cnt desc';

                $params['group'] = 'Endorsement.endorsed_id';
                $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseCoreValues', 'EndorseReplies')));
                $leaderboard = $this->Endorsement->find("all", $params);

                if (!empty($leaderboard)) {
                    $seriesdata = "";
                    foreach ($leaderboard as $lval) {
                        if ($seriesdata == "") {
                            $seriesdata = "{
              name: '" . addslashes($lval["OrgDepartments"]["department"]) . "',
             y: " . $lval[0]["cnt"] . "}";
                        } else {
                            $seriesdata.=",{
              name: '" . addslashes($lval["OrgDepartments"]["department"]) . "',
             y: " . $lval[0]["cnt"] . "}";
                        }
                    }


                    $series = "  {
            name: 'organization',
            colorByPoint: true,
            data: [" . $seriesdata . "]}";

                    //$this->autoRender = false;
                    /* Set up new view that won't enter the ClassRegistry */
                    $view = new View($this, false);
                    $view->set('data', $series);
                    $view->set('type', "Department");
                    $view->set('height', $height);
                    $view->set('width', $width);
                    $view->viewPath = 'Elements';

                    /* Grab output into variable without the view actually outputting! */
                    $view_output = $view->render('box');
//echo $view_output;
                    $view_output = str_replace("\r", "", $view_output);
                    $view_output = str_replace("\t", "", $view_output);
                    $view_output = str_replace("\n", "", $view_output);
                    if (isset($this->request->data["web"]) && $this->request->data["web"] == 1) {
                        $this->set(array(
                            'result' => array("status" => true
                                , "msg" => "Endorsed by department", "data" => $seriesdata),
                            '_serialize' => array('result')
                        ));
                    } else {

                        $this->set(array(
                            'result' => array("status" => true
                                , "msg" => "Endorsed by department", "data" => $view_output),
                            '_serialize' => array('result')
                        ));
                    }

                    //$this->set(array(
                    //    'result' => array("status" => true
                    //        , "msg" => "Endorsed by department", "data" => $view_output),
                    //    '_serialize' => array('result')
                    //));
                } else {
                    $this->set(array(
                        'result' => array("status" => false
                            , "msg" => "No data available."),
                        '_serialize' => array('result')
                    ));
                }
            } else {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Currently any organization has been not joined."),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "token not exist."),
                '_serialize' => array('result')
            ));
        }
    }

    public function endorsementbyday() {


        if ($this->request->is('post')) {
            $statusConfig = Configure::read("statusConfig");
            $loggedInUser = $this->Auth->user();
            $user_id = $loggedInUser['id'];
            if (isset($loggedInUser['current_org'])) {

                $org_id = $loggedInUser['current_org']['id'];

                if (isset($this->request->data["height"]) && $this->request->data["height"] > 0) {
                    $height = $this->request->data["height"];
                } else {
                    $height = 400;
                }
                if (isset($this->request->data["width"]) && $this->request->data["width"] > 0) {
                    $width = $this->request->data["width"];
                } else {
                    $width = 450;
                }

                $params = array();
                $start_date = "";
                $end_date = "";
                if (isset($this->request->data["start_date"]) && $this->request->data["start_date"] != "") {
                    $start_date = $this->request->data["start_date"];
                }
                if (isset($this->request->data["end_date"]) && $this->request->data["end_date"] != "") {
                    $end_date = $this->request->data["end_date"];
                }
                $params = array();

                if ($start_date != "") {

                    $conditionarray["Endorsement.created >= "] = date("Y-m-d 00:00:00", $start_date);
                }
                if ($end_date != "") {
                    $conditionarray["Endorsement.created <= "] = date("Y-m-d 23:59:59", $end_date);
                }


                $array = array();


                $array['fields'] = array('count(Endorsement.id) as cnt', 'DATE_FORMAT(Endorsement.created,"%m-%d-%Y") as cdate');

                $conditionarray['Endorsement.organization_id'] = $org_id; // array('0','1','3');

                $array['conditions'] = $conditionarray;
                $array['order'] = 'Endorsement.created asc';
                $array['group'] = 'DATE_FORMAT(Endorsement.created, "%m-%d-%Y")';

                $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseCoreValues', 'EndorseReplies')));
                $leaderboard = $this->Endorsement->find("all", $array);
                // echo $this->Endorsement->getLastQuery();exit; 		
                // print_r($leaderboard);

                if (!empty($leaderboard)) {

                    $seriesdata = "";
                    foreach ($leaderboard as $lval) {
                        if ($seriesdata == "") {
                            $seriesdata = "{
              name: '" . $lval[0]["cdate"] . "',
             y: " . $lval[0]["cnt"] . "}";
                        } else {
                            $seriesdata.=",{
               name: '" . $lval[0]["cdate"] . "',
             y: " . $lval[0]["cnt"] . "}";
                        }
                    }

                    //echo $seriesdata;exit;
                    $series = "  {
            name: 'Date',
            colorByPoint: false,
            data: [" . $seriesdata . "]}";

                    //$this->autoRender = false;
                    /* Set up new view that won't enter the ClassRegistry */
                    $view = new View($this, false);
                    $view->set('data', $series);
                    $view->set('height', $height);
                    $view->set('width', $width);
                    $view->viewPath = 'Elements';

                    /* Grab output into variable without the view actually outputting! */
                    $view_output = $view->render('column');
//print_r($view_output);

                    $view_output = str_replace("\r", "", $view_output);
                    $view_output = str_replace("\t", "", $view_output);
                    $view_output = str_replace("\n", "", $view_output);
                    if (isset($this->request->data["web"]) && $this->request->data["web"] == 1) {
                        $this->set(array(
                            'result' => array("status" => true
                                , "msg" => "Endorsed by day", "data" => $seriesdata),
                            '_serialize' => array('result')
                        ));
                    } else {

                        $this->set(array(
                            'result' => array("status" => true
                                , "msg" => "Endorsed by day", "data" => $view_output),
                            '_serialize' => array('result')
                        ));
                    }
                    //$this->set(array(
                    //    'result' => array("status" => true
                    //        , "msg" => "Endorsed by department", "data" => $view_output),
                    //    '_serialize' => array('result')
                    //));
                } else {
                    $this->set(array(
                        'result' => array("status" => false
                            , "msg" => "No data available."),
                        '_serialize' => array('result')
                    ));
                }
            } else {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Currently any organization has been not joined."),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "token not exist."),
                '_serialize' => array('result')
            ));
        }
    }

    public function endorsementbycorevalues() {


        if ($this->request->is('post')) {

            $statusConfig = Configure::read("statusConfig");
            $loggedInUser = $this->Auth->user();
            if (isset($loggedInUser['current_org'])) {
                if (isset($this->request->data["org_id"]) && $this->request->data["org_id"] > 0) {
                    $org_id = $this->request->data["org_id"];
                } else {

                    $org_id = $loggedInUser['current_org']['id'];
                }
                if (isset($this->request->data["height"]) && $this->request->data["height"] > 0) {
                    $height = $this->request->data["height"];
                } else {
                    $height = 400;
                }
                if (isset($this->request->data["width"]) && $this->request->data["width"] > 0) {
                    $width = $this->request->data["width"];
                } else {
                    $width = 450;
                }
                $orgtype = "org";
                if (isset($this->request->data["type"]) && $this->request->data["type"] != "") {
                    $orgtype = $this->request->data["type"];
                }
                $user_id = $loggedInUser['id'];
                if (isset($loggedInUser['current_org'])) {

                    // $org_id = $loggedInUser['current_org']['id'];

                    $params = array();
                    $start_date = "";
                    $end_date = "";
                    if (isset($this->request->data["start_date"]) && $this->request->data["start_date"] != "") {
                        $start_date = $this->request->data["start_date"];
                    }
                    if (isset($this->request->data["end_date"]) && $this->request->data["end_date"] != "") {
                        $end_date = $this->request->data["end_date"];
                    }


                    if ($start_date != "") {

                        $conditionarray["Endorsement.created >= "] = date("Y-m-d 00:00:00", $start_date);
                    }
                    if ($end_date != "") {
                        $conditionarray["Endorsement.created <= "] = date("Y-m-d 23:59:59", $end_date);
                    }


                    $params = array();
                    $conditionarray['Endorsement.organization_id'] = $org_id; // array('0','1','3');
                    if ($orgtype == "user") {
                        $conditionarray["Endorsement.endorsed_id"] = $user_id;
                    }
                    $params['conditions'] = $conditionarray;

                    $params['fields'] = "count(EndorseCoreValue.value_id) as total, OrgCoreValues.name as core_value ";
                    $params['joins'] = array(
                        array(
                            'table' => 'endorse_core_values',
                            'alias' => 'EndorseCoreValue',
                            'type' => 'INNER',
                            'conditions' => array(
                                'EndorseCoreValue.endorsement_id =Endorsement.id '
                            )
                        ),
                        array(
                            'table' => 'org_core_values',
                            'alias' => 'OrgCoreValues',
                            'type' => 'INNER',
                            'conditions' => array(
                                'OrgCoreValues.id =EndorseCoreValue.value_id '
                            )
                        )
                    );
                    $params['group'] = 'EndorseCoreValue.value_id';
                    $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseCoreValues', 'EndorseReplies')));
                    $corevalues = $this->Endorsement->find("all", $params);
                    //echo $this->Endorsement->getLastQuery();		
                    //  print_r($corevalues);exit;

                    if (!empty($corevalues)) {


                        $seriesdata = "";
                        foreach ($corevalues as $lval) {
                            if ($seriesdata == "") {
                                $seriesdata = "{
              name: '" . addslashes($lval["OrgCoreValues"]["core_value"]) . "',
             y: " . $lval[0]["total"] . "}";
                            } else {
                                $seriesdata.=",{
              name: '" . addslashes($lval["OrgCoreValues"]["core_value"]) . "',
             y: " . $lval[0]["total"] . "}";
                            }
                        }


                        $series = "  {
            name: 'Core Value',
            colorByPoint: true,
            data: [" . $seriesdata . "]}";

                        //$this->autoRender = false;
                        /* Set up new view that won't enter the ClassRegistry */
                        $view = new View($this, false);
                        $view->set('data', $series);
                        $view->set('type', "Core Values");
                        $view->set('height', $height);
                        $view->set('width', $width);
                        $view->viewPath = 'Elements';

                        /* Grab output into variable without the view actually outputting! */
                        $view_output = $view->render('box');
//echo $view_output;
                        $view_output = str_replace("\r", "", $view_output);
                        $view_output = str_replace("\t", "", $view_output);
                        $view_output = str_replace("\n", "", $view_output);

                        if (isset($this->request->data["web"]) && $this->request->data["web"] == 1) {
                            $this->set(array(
                                'result' => array("status" => true
                                    , "msg" => "nDorsement by core values", "data" => $seriesdata),
                                '_serialize' => array('result')
                            ));
                        } else {

                            $this->set(array(
                                'result' => array("status" => true
                                    , "msg" => "nDorsement by core values", "data" => $view_output),
                                '_serialize' => array('result')
                            ));
                        }
                    } else {
                        $this->set(array(
                            'result' => array("status" => false
                                , "msg" => "No data available."),
                            '_serialize' => array('result')
                        ));
                    }
                } else {
                    $this->set(array(
                        'result' => array("status" => false
                            , "msg" => "Currently any organization has been not joined."),
                        '_serialize' => array('result')
                    ));
                }
            } else {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Currently any organization has been not joined."),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "token not exist."),
                '_serialize' => array('result')
            ));
        }
    }

    //
    public function endorsementbyjobtitles() {


        if ($this->request->is('post')) {

            $statusConfig = Configure::read("statusConfig");
            $loggedInUser = $this->Auth->user();
            if (isset($loggedInUser['current_org'])) {
                if (isset($this->request->data["org_id"]) && $this->request->data["org_id"] > 0) {
                    $org_id = $this->request->data["org_id"];
                } else {

                    $org_id = $loggedInUser['current_org']['id'];
                }
                // $org_id =335;
                if (isset($this->request->data["height"]) && $this->request->data["height"] > 0) {
                    $height = $this->request->data["height"];
                } else {
                    $height = 400;
                }
                if (isset($this->request->data["width"]) && $this->request->data["width"] > 0) {
                    $width = $this->request->data["width"];
                } else {
                    $width = 450;
                }
                $orgtype = "org";
                if (isset($this->request->data["type"]) && $this->request->data["type"] != "") {
                    $orgtype = $this->request->data["type"];
                }
                $user_id = $loggedInUser['id'];
                if (isset($loggedInUser['current_org'])) {

                    // $org_id = $loggedInUser['current_org']['id'];

                    $params = array();
                    $start_date = "";
                    $end_date = "";
                    if (isset($this->request->data["start_date"]) && $this->request->data["start_date"] != "") {
                        $start_date = $this->request->data["start_date"];
                    }
                    if (isset($this->request->data["end_date"]) && $this->request->data["end_date"] != "") {
                        $end_date = $this->request->data["end_date"];
                    }

                    $startdate = $enddate = "";
                    if ($start_date != "") {

                        $conditionarray["Endorsement.created >= "] = $startdate = date("Y-m-d 00:00:00", $start_date);
                    }
                    if ($end_date != "") {
                        $conditionarray["Endorsement.created <= "] = $enddate = date("Y-m-d 23:59:59", $end_date);
                    }
                    $this->Common->bindmodelcommonjobtitle();
                    $jobtitles = $this->Common->getorgjobtitles($org_id);
                    $jobtitlesid = array_keys($jobtitles);

                    $conditionsjobtitles = array(
                        "UserOrganization.job_title_id" => $jobtitlesid,
                        "UserOrganization.organization_id" => $org_id,
                        //"UserOrganization.status" => 1, 
                        "Endorsement.organization_id" => $org_id,
                            //"Endorsement.endorsement_for" => "user"   
                    );

                    if ($startdate != "" && $enddate != "") {

                        array_push($conditionsjobtitles, "date(Endorsement.created) between '$startdate' and '$enddate'");
                    } elseif ($startdate != "") {

                        array_push($conditionsjobtitles, "date(Endorsement.created) >= '$startdate'");
                    }
                    $groupjobtitle = array("UserOrganization.job_title_id");
                    $fieldsjobtitle = array("UserOrganization.job_title_id", "count(DISTINCT Endorsement.id)");

                    $jobtitledataendorsed = $this->UserOrganization->find("all", array("conditions" => $conditionsjobtitles, "group" => $groupjobtitle, "fields" => $fieldsjobtitle));

                    $jbiddata = array();
                    foreach ($jobtitledataendorsed as $endorserjbdata) {
                        $jbiddata[$endorserjbdata["UserOrganization"]["job_title_id"]] = $endorserjbdata[0]["count(DISTINCT Endorsement.id)"];
                    }

                    $detailedjobtitlechart = array("data" => $jbiddata, "jobtitles" => $jobtitles);

                    //echo $this->UserOrganization->getLastQuery();	exit;	
                    // print_r($detailedjobtitlechart);exit;

                    if (!empty($jbiddata)) {


                        $seriesdata = "";
                        foreach ($jbiddata as $lkey => $lval) {
                            if ($seriesdata == "") {
                                $seriesdata = "{
              name: '" . addslashes($jobtitles[$lkey]) . "',
             y: " . $lval . "}";
                            } else {
                                $seriesdata.=",{
              name: '" . addslashes($jobtitles[$lkey]) . "',
             y: " . $lval . "}";
                            }
                        }


                        $series = "  {
            name: 'Job Title',
            colorByPoint: true,
            data: [" . $seriesdata . "]}";

                        //$this->autoRender = false;
                        /* Set up new view that won't enter the ClassRegistry */
                        $view = new View($this, false);
                        $view->set('data', $series);
                        $view->set('type', "Job Title");
                        $view->set('height', $height);
                        $view->set('width', $width);
                        $view->viewPath = 'Elements';

                        /* Grab output into variable without the view actually outputting! */
                        $view_output = $view->render('box');

                        $view_output = str_replace("\r", "", $view_output);
                        $view_output = str_replace("\t", "", $view_output);
                        $view_output = str_replace("\n", "", $view_output);

                        if (isset($this->request->data["web"]) && $this->request->data["web"] == 1) {
                            $this->set(array(
                                'result' => array("status" => true
                                    , "msg" => "Endorsed by job title", "data" => $seriesdata),
                                '_serialize' => array('result')
                            ));
                        } else {

                            $this->set(array(
                                'result' => array("status" => true
                                    , "msg" => "Endorsed by job title", "data" => $view_output),
                                '_serialize' => array('result')
                            ));
                        }
                        //$this->set(array(
                        //    'result' => array("status" => true
                        //        , "msg" => "Endorsed by job title", "data" => $view_output),
                        //    '_serialize' => array('result')
                        //));
                    } else {
                        $this->set(array(
                            'result' => array("status" => false
                                , "msg" => "No data available."),
                            '_serialize' => array('result')
                        ));
                    }
                } else {
                    $this->set(array(
                        'result' => array("status" => false
                            , "msg" => "Currently any organization has been not joined."),
                        '_serialize' => array('result')
                    ));
                }
            } else {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Currently any organization has been not joined."),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "token not exist."),
                '_serialize' => array('result')
            ));
        }
    }

    //
    public function endorsementbyentity() {


        if ($this->request->is('post')) {

            $statusConfig = Configure::read("statusConfig");
            $loggedInUser = $this->Auth->user();
            if (isset($loggedInUser['current_org'])) {
                if (isset($this->request->data["org_id"]) && $this->request->data["org_id"] > 0) {
                    $org_id = $this->request->data["org_id"];
                } else {

                    $org_id = $loggedInUser['current_org']['id'];
                }
                // $org_id =335;
                if (isset($this->request->data["height"]) && $this->request->data["height"] > 0) {
                    $height = $this->request->data["height"];
                } else {
                    $height = 400;
                }
                if (isset($this->request->data["width"]) && $this->request->data["width"] > 0) {
                    $width = $this->request->data["width"];
                } else {
                    $width = 450;
                }
                $orgtype = "org";
                if (isset($this->request->data["type"]) && $this->request->data["type"] != "") {
                    $orgtype = $this->request->data["type"];
                }
                $user_id = $loggedInUser['id'];
                if (isset($loggedInUser['current_org'])) {

                    // $org_id = $loggedInUser['current_org']['id'];

                    $params = array();
                    $start_date = "";
                    $end_date = "";
                    if (isset($this->request->data["start_date"]) && $this->request->data["start_date"] != "") {
                        $start_date = $this->request->data["start_date"];
                    }
                    if (isset($this->request->data["end_date"]) && $this->request->data["end_date"] != "") {
                        $end_date = $this->request->data["end_date"];
                    }

                    $startdate = $enddate = "";
                    if ($start_date != "") {

                        $conditionarray["Endorsement.created >= "] = $startdate = date("Y-m-d 00:00:00", $start_date);
                    }
                    if ($end_date != "") {
                        $conditionarray["Endorsement.created <= "] = $enddate = date("Y-m-d 23:59:59", $end_date);
                    }
                    $entityarray = $this->Common->getorgentities($org_id);
                    $conditionsentity = array("Endorsement.endorsement_for" => "entity", "Endorsement.organization_id" => $org_id);
                    if ($startdate != "" and $enddate != "") {
                        array_push($conditionsentity, "date(Endorsement.created) between '$startdate' and '$enddate'");
                    }
                    $fieldsentity = array("Endorsement.endorsed_id, count(*)");
                    $groupentity = array("Endorsement.endorsed_id");
                    $entityiddata = array();
                    $endorsementdataentity = $this->Endorsement->find("all", array("conditions" => $conditionsentity, "group" => $groupentity, "fields" => $fieldsentity));
                    foreach ($endorsementdataentity as $entitydata) {
                        $entityiddata[$entitydata["Endorsement"]["endorsed_id"]] = $entitydata[0]["count(*)"];
                    }
                    $detailedentitychart = array("data" => $entityiddata, "entites" => $entityarray);

                    //echo $this->Endorsement->getLastQuery();		


                    if (!empty($entityiddata)) {


                        $seriesdata = "";
                        foreach ($entityiddata as $lkey => $lval) {
                            if ($seriesdata == "") {
                                $seriesdata = "{
              name: '" . addslashes($entityarray[$lkey]) . "',
             y: " . $lval . "}";
                            } else {
                                $seriesdata.=",{
              name: '" . addslashes($entityarray[$lkey]) . "',
             y: " . $lval . "}";
                            }
                        }


                        $series = "  {
            name: 'Entity',
            colorByPoint: true,
            data: [" . $seriesdata . "]}";

                        //$this->autoRender = false;
                        /* Set up new view that won't enter the ClassRegistry */
                        $view = new View($this, false);
                        $view->set('data', $series);
                        $view->set('type', "Sub Org");
                        $view->set('height', $height);
                        $view->set('width', $width);
                        $view->viewPath = 'Elements';

                        /* Grab output into variable without the view actually outputting! */
                        $view_output = $view->render('box');

                        $view_output = str_replace("\r", "", $view_output);
                        $view_output = str_replace("\t", "", $view_output);
                        $view_output = str_replace("\n", "", $view_output);
//echo $view_output;exit;
                        if (isset($this->request->data["web"]) && $this->request->data["web"] == 1) {
                            $this->set(array(
                                'result' => array("status" => true
                                    , "msg" => "Endorsed by job title", "data" => $seriesdata),
                                '_serialize' => array('result')
                            ));
                        } else {

                            $this->set(array(
                                'result' => array("status" => true
                                    , "msg" => "Endorsed by job title", "data" => $view_output),
                                '_serialize' => array('result')
                            ));
                        }
                        //$this->set(array(
                        //    'result' => array("status" => true
                        //        , "msg" => "Endorsed by Sub Organization", "data" => $view_output),
                        //    '_serialize' => array('result')
                        //));
                    } else {
                        $this->set(array(
                            'result' => array("status" => false
                                , "msg" => "No data available."),
                            '_serialize' => array('result')
                        ));
                    }
                } else {
                    $this->set(array(
                        'result' => array("status" => false
                            , "msg" => "Currently any organization has been not joined."),
                        '_serialize' => array('result')
                    ));
                }
            } else {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Currently any organization has been not joined."),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "token not exist."),
                '_serialize' => array('result')
            ));
        }
    }

    //
    public function faq() {
        $faqdata = $this->globalsettingFaq->find("all", array("order" => "updated DESC"));
        $is_web = 0;
        if (isset($this->request->query["is_web"])) {
            $is_web = 1;
            $this->set(array(
                'result' => array("status" => true
                    , "msg" => "Faqscheck", "data" => $faqdata),
                '_serialize' => array('result')
            ));
        }
        if ($is_web == 0) {
            $view = new View($this, false);
            $view->viewPath = 'Elements';
            $view->set('style', 'style=padding-left:20px;padding-right:20px;padding-top:20px;');
            $view->set('faq', $faqdata);
            /* Grab output into variable without the view actually outputting! */
            $view_output = $view->render('faqelementother');
            //echo $view_output;exit;
            $view_output = str_replace("\r", "", $view_output);
            $view_output = str_replace("\t", "", $view_output);
            $view_output = str_replace("\n", "", $view_output);
            $this->set(array(
                'result' => array("status" => true
                    , "msg" => "Faqs", "data" => $view_output),
                '_serialize' => array('result')
            ));
        }
    }

    public function sendtermconditions() {

        if (isset($this->request->query["email"])) {
            $email = $this->request->query["email"];
            if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
                $subject = "End User License Agreement for nDorse";
                //  $viewVars = array("attatched" => 1, "docs" => "termandcondition.pdf");
                $termstext = $this->GlobalSetting->findByKey("tandc");
                $termsmsg = "";
                if (!empty($termstext)) {
                    $termsmsg = $termstext['GlobalSetting']['value'];
                }
                $viewVars = array("terms" => $termsmsg);
                $configVars = serialize($viewVars);

                $emailQueue[] = array("to" => $email, "subject" => $subject, "config_vars" => $configVars, "template" => "terms_conditions");
                $this->Email->saveMany($emailQueue);
                $this->set(array(
                    'result' => array("status" => true
                        , "msg" => "End User License Agreement sent successfully.", "data" => true),
                    '_serialize' => array('result')
                ));
            } else {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "Invalid email address"),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "email address key not exist."),
                '_serialize' => array('result')
            ));
        }
    }

    public function getEmojis() {

        $Emojis = Configure::read("Emojis");
        $emojis_url = Router::url('/', true) . EMOJIS_IMAGE_DIR;
        $emojis_array = array();
        $Emojisdata = $this->Emojis->find("all");

        foreach ($Emojisdata as $emojisval) {
            $emojis_array[] = array("image" => $emojisval["Emojis"]["name"], "url" => $emojis_url . $emojisval["Emojis"]["name"]);
        }

        if (count($emojis_array) > 0) {
            $this->set(array(
                'result' => array("status" => true
                    , "msg" => "Emojis data", "data" => $emojis_array),
                '_serialize' => array('result')
            ));
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "No stickers available", "data" => $emojis_array),
                '_serialize' => array('result')
            ));
        }

        //$this->set(array(
        //    'result' => array("status" => true
        //        , "msg" => "Emojis data", "data" => $Emojis),
        //    '_serialize' => array('result')
        //));
    }

    public function updateLastAppUsedTime() {
        if ($this->request->is('post')) {
            $loggedInUser = $this->Auth->user();

            $updated = $this->User->updateAll(array("last_app_used" => "NOW()"), array("id" => $loggedInUser['id']));

            if ($updated) {
                $this->set(array('result' => array("status" => true
                        , "msg" => "Last app used time updated."),
                    '_serialize' => array('result')
                ));
            } else {
                $this->set(array('result' => array("status" => false
                        , "msg" => "Last app used time is not updated."),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Get call not allowed."),
                '_serialize' => array('result')
            ));
        }
    }

    public function renewSession() {
        if ($this->request->is('post')) {
            $status = $this->renewToken(true);
            $data = NULL;

            if ($status == 'notoken') {
                $status = false;
                $msg = "Invalid token";
                $isExpired = true;
            } else if ($status == "auto_logout") {
                $status = false;
                $msg = "You have been loggedin to some other device.";
                $isExpired = true;
            } else if ($status == "logout") {
                $status = false;
                $msg = "You are logged out. Please login to continue.";
                $isExpired = true;
            } else {
                $data = $this->Auth->user();
                $status = true;
                $msg = "Renew session successfully";
                $isExpired = false;
            }
            $this->set(array('result' => array("status" => $status,
                    "msg" => $msg,
                    "isExpired" => $isExpired,
                    "data" => $data),
                '_serialize' => array('result')
            ));
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Get call not allowed."),
                '_serialize' => array('result')
            ));
        }
    }

    public function resetmypassword() {

        if (isset($this->request->data['token'])) {
            $authuser = $this->Auth->user();
            if (isset($this->request->data['current_password']) && $this->request->data['current_password'] != "") {
                // print_r($this->request->data);
                $current_password = $this->Auth->password($this->request->data['current_password']);

                $userInfo = $this->User->findById($authuser["id"]);
                $userpasswod = $userInfo['User']['password'];
                //echo $current_password;
                // echo "<hr>";
                //echo $userpasswod;
                // echo "<hr>";
                if ($userpasswod != $current_password) {

                    $this->set(array(
                        'result' => array("status" => false
                            , "msg" => "Current password was not entered correctly"),
                        '_serialize' => array('result')
                    ));
                    // $this->redirect(array('controller' => 'users', 'action' => 'changePassword'));
                } else {

                    $this->User->set($this->request->data);
                    // edit
                    $this->request->data["id"] = $authuser["id"];

                    $this->User->setValidation('reset_password');
                    if ($this->User->validates()) {
                        $password = $this->request->data["password"];
                        if ($this->User->save($this->request->data)) {

                            // send email to user for change password
                            $this->set(array(
                                'result' => array("status" => true
                                    , "msg" => "Password updated successfully.", 'data' => true),
                                '_serialize' => array('result')
                            ));
                        } else {
                            $errors = $this->User->validationErrors;
                            $errorsArray = array();

                            foreach ($errors as $key => $error) {
                                $errorsArray[$key] = $error[0];
                            }


                            $this->set(array(
                                'result' => array("status" => false
                                    , "msg" => "Errors!", 'errors' => $errorsArray),
                                '_serialize' => array('result')
                            ));
                        }
                    } else {
                        // $errors = $this->User->validationErrors;
                        $errors = $this->User->validationErrors;
                        $errorsArray = array();

                        foreach ($errors as $key => $error) {
                            $errorsArray[$key] = $error[0];
                        }

                        $this->set(array(
                            'result' => array("status" => false
                                , "msg" => "Errors!", 'errors' => $errorsArray),
                            '_serialize' => array('result')
                        ));
                    }
                }
            } else {
                $this->set(array(
                    'result' => array("status" => false
                        , "msg" => "current password required"),
                    '_serialize' => array('result')
                ));
            }
        } else {
            $this->set(array(
                'result' => array("status" => false
                    , "msg" => "Token is missing in request"),
                '_serialize' => array('result')
            ));
        }
    }

    public function acceptTnC() {
        $loggedInUser = $this->Auth->user();
        $this->User->id = $loggedInUser['id'];
        $this->User->saveField("terms_accept", 1);

        $this->set(array(
            'result' => array("status" => true
                , "msg" => "Terms and condition accepted.", 'data' => true),
            '_serialize' => array('result')
        ));
    }
    
    public function checkSession() {
        $this->set(array(
            'result' => array("status" => true
                , "msg" => "Session exitsts.", 'data' => true),
            '_serialize' => array('result')
        ));
    }

}
