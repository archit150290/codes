<?php

App::uses('CakeEmail', 'Network/Email');
App::uses('Component', 'Controller');

class OrganizationsController extends AppController {

    /**
     * This controller does not use a model
     *
     * @var array
     */
    public $components = array('RequestHandler', "Auth", "Common", "Session", "Image", "Paginator");
    var $uses = array("User", "Department", "Organization", "OrgCoreValue", "UserOrganization", "OrgDepartment", "OrgJobTitle", "Entity", "Subscription");
    public $helpers = array("Html", "Form", "Session", "Js");

    public function beforeFilter() {
        parent::beforeFilter();
        // $this->Auth->allow('login');
        $this->Auth->allow('register', 'login', 'logout', 'forgot', 'createclient', 'setImage', 'deleteimage');
    }

    public function index() {
        if ($this->Session->check('Auth.User')) {
            $logged_in_user_role = $this->Auth->user('role');
            $logged_in_user_id = $this->Auth->user('id');
            if ($logged_in_user_id < 1) {
                $this->Auth->logout();
                $this->redirect(array('controller' => 'users', 'action' => 'login'));
            } else {
                if ($logged_in_user_role > 1) {
                    $this->LoadModel("UserOrganization");
                    // $conditions = array('Organization.status' => array(0, 1), 'Organization.admin_id' => $logged_in_user_id);
                    // $conditions = array('Organization.status' => array(0, 1), 'UserOrganization.user_role' => 2,'UserOrganization.user_id' => $logged_in_user_id,'UserOrganization.status' => 1);
                    $userorgdata = $this->UserOrganization->find("all", array("conditions" => array("user_id" => $logged_in_user_id, "user_role" => 2, 'UserOrganization.status' => 1)));
                    $organization_id = array();
                    foreach ($userorgdata as $uservalorg) {
                        $organization_id[] = $uservalorg["UserOrganization"]["organization_id"];
                    }
                    $conditions = array('Organization.status' => array(0, 1), 'Organization.id' => $organization_id);
                } else if ($logged_in_user_role == 1) {
                    $conditions = array('Organization.status' => array(0, 1));
                }
                $this->LoadModel("OrgRequest");
                $this->LoadModel("Endorsement");
                $this->Organization->bindModel(array(
                    'hasMany' => array(
                        'Invite' => array(
                            'className' => 'Invite',
                        ),
                        'UserOrganization' => array(
                            'className' => 'UserOrganization',
                        ),
                        'Transactions' => array(
                            'className' => 'Transactions',
                            'conditions' => array('Transactions.status' => 'canceled'),
                            'order' => 'created DESC'
                        )
                    ),
                    'hasOne' => array('Subscription' => array(
                            'className' => 'Subscription',
                        ))
                ));

                $orgdata = $this->Organization->find('all', array('order' => 'Organization.created DESC', 'limit' => 20, 'conditions' => $conditions));

                $totalrecords = $this->Organization->find('count', array('conditions' => $conditions));
                $user_role = array(2, 3);
                $adminusr = array();
                foreach ($orgdata as $key => $orgid) {
                    $target_id = $orgid["Organization"]["id"];
                    $owner_id = $orgid["Organization"]["admin_id"];
                    $totalorgusers = $this->Common->getusersfororg($target_id, $user_role);
                    $orgowner = $this->Common->getorgownername($owner_id);
                    $totalusers[$target_id] = $totalorgusers;
                    
                    $ownersarray[$target_id][$owner_id] = $orgowner;
                    $userorg = $orgid["UserOrganization"];
                    
            foreach ($userorg as $uval) {
                if ($uval["user_role"] == 2) {
                    $adminusr[] = $uval["user_id"];
                }
            }
                    
                    $totalinvitationsaccepted[$target_id] = $this->Common->userorgcounter($userorg);
                    $invitation_accepted[$target_id] = $totalinvitationsaccepted[$target_id]["web"] + $totalinvitationsaccepted[$target_id]["app"];
                    $invitations_array[$target_id] = $this->Common->invitations_fetching($orgid);
                    $invitation_pending[$target_id] = $invitations_array[$target_id]["invitations_pending"];
                    $invitation_pending[$target_id]["web"] = $totalinvitationsaccepted[$target_id]["web"] + $invitation_pending[$target_id]["web"];
                    $invitation_pending[$target_id]["app"] = $totalinvitationsaccepted[$target_id]["app"] + $invitation_pending[$target_id]["app"];
                    $totalinvitations[$target_id] = array("invitation_accepted" => $invitation_accepted, "invitation_pending" => $invitation_pending);
                    $pendingrequescounter[$target_id] = $this->OrgRequest->find("count", array("conditions" => array("organization_id" => $target_id, "status" => 0)));
                    $endorsementformonth[$target_id] = $this->Common->endorsementformonth($target_id);
                    $userPool = $orgid['Subscription']['pool_purchased'];
                    foreach ($orgid['Transactions'] as $transaction) {
                        
                        if($transaction["status"]=="canceled"){
                           $adminusr[]=$transaction["user_id"]; 
                        }
                        if ($transaction['bt_subscription_id'] == $orgid['Subscription']['bt_id']) {
                            if ($transaction['type'] == 'upgrade') {
                                $userPool += $transaction['user_diff'];
                            } else if ($transaction['type'] == 'downgrade') {
                                $userPool -= $transaction['user_diff'];
                            }
                        }
                    }

                    $orgdata[$key]['Subscription']['user_pool'] = $userPool;
                }
                $adminusrarray = array();
            if (!empty($adminusr)) {
                $params['fields'] = array("User.fname,User.lname,User.id");
                $params['conditions'] = array("id" => $adminusr);
                $userOrgarray = $this->User->find("all", $params);

                foreach ($userOrgarray as $val) {
                    $adminusrarray[$val["User"]["id"]] = $val["User"]["fname"] . " " . $val["User"]["lname"];
                }
            }
           
            // end
            
                $this->set(compact('orgdata', 'totalusers', 'totalrecords', 'invitations_array', 'pendingrequescounter', 'invitation_pending', 'invitation_accepted', 'endorsementformonth', 'ownersarray','adminusrarray'));
                $this->set('authUser', $this->Auth->user());
            }
        }
    }

    public function info($id) {
        $statusConfig = Configure::read("statusConfig");
        $this->User->bindModel(array('hasOne' => array('UserOrganization')));
        if ($this->Session->check('Auth.User.role') != "1") {
            $this->Auth->logout();
            $this->redirect(array('action' => 'login'));
        } else {
            $this->loadModel("EndorseCoreValue");
            $logged_in_user_id = $this->Auth->user("id");
            //$orgids = $this->Organization->find('all', array('conditions' => array('Organization.status' => array(0, 1), 'Organization.admin_id' => $logged_in_user_id)));
            //======to check if id is of present logged in user or not for user role = admin
            //foreach ($orgids as $orgid) {
            //  $checkorgids[] = $orgid["Organization"]["id"];
            //}
            //$result = $this->Common->checkorgid($id);
            //if ($result == "redirect") {
            //    $this->redirect(array("controller" => "organizations", "action" => "index"));
            //}
            //======end
            $org_user_data = $this->User->find('all', array('limit' => 20, 'conditions' => array('UserOrganization.organization_id' => $id, 'UserOrganization.user_role' => array(2, 3), 'UserOrganization.status' => array(0, 1, 3)), 'order' => 'UserOrganization.id  DESC'));
            $this->User->bindModel(array('hasOne' => array('UserOrganization')));
            $totalrecords = $this->User->find('count', array('conditions' => array('UserOrganization.organization_id' => $id, 'UserOrganization.user_role' => array(2, 3), 'UserOrganization.status' => array(0, 1, 3)), 'order' => 'UserOrganization.id  DESC'));
            $coredata = $this->OrgCoreValue->find('list', array('conditions' => array('organization_id' => $id, 'status' => array(1, 2))));
            $corevalueendorsedcounter = array();
            foreach ($coredata as $key => $data) {
                $corevalueendorsedcounter[$key] = $this->EndorseCoreValue->find("count", array("conditions" => array("value_id" => $key)));
            }

            $this->loadModel("Endorsement");
            $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseReplies', 'EndorseCoreValue')));
            $conditionsendorsement = array("organization_id" => $id);
            $conditionsendorsement[] = array("MONTH(created) = MONTH(now())", "YEAR(created) = YEAR(now())");
            $endorsementdata = $this->Endorsement->find("all", array("conditions" => $conditionsendorsement));
            $totalendorsements = $this->Endorsement->find("count", array("conditions" => $conditionsendorsement = array("organization_id" => $id)));
            $corevaluesid = array();
            foreach ($endorsementdata as $dataendorsements) {
                foreach ($dataendorsements["EndorseCoreValues"] as $corevalues) {
                    $corevaluesid[] = $corevalues["value_id"];
                }
            }

            $countermonthlyendorsements = array_count_values($corevaluesid);
            $this->loadModel("OrgRequest");
            $this->loadModel("Endorsement");
            $this->Organization->bindModel(array(
                'hasMany' => array(
                    'Invite' => array(
                        'className' => 'Invite',
                    ),
                    'UserOrganization' => array(
                        'className' => 'UserOrganization',
                    ),
                    'Transactions' => array(
                        'className' => 'Transactions',
                        'conditions' => array('Transactions.status' => 'canceled'),
                        'order' => 'created DESC'
                    )
                ), 'hasOne' => array('Subscription' => array(
                        'className' => 'Subscription',
                    ))
            ));
            $this->Organization->recursive = 2;
            $orgdata = $this->Organization->findById($id);
            $userorg = $orgdata["UserOrganization"];

            $adminusr = array();
            foreach ($userorg as $uval) {
                if ($uval["user_role"] == 2) {
                    $adminusr[] = $uval["user_id"];
                }
            }

            if (!in_array($this->Auth->user("id"), $adminusr) && $this->Auth->user("role") > 1) {
                $this->redirect(array("controller" => "organizations", "action" => "index"));
            }
            $totalinvitationsaccepted = $this->Common->userorgcounter($userorg);
            $invitation_accepted = $totalinvitationsaccepted["web"] + $totalinvitationsaccepted["app"];
            $invitations_array = $this->Common->invitations_fetching($orgdata);
            $invitation_pending = $invitations_array["invitations_pending"];
            $invitation_pending["web"] = $totalinvitationsaccepted["web"] + $invitation_pending["web"];
            $invitation_pending["app"] = $totalinvitationsaccepted["app"] + $invitation_pending["app"];
            $status_orgrequest = array("status" => 0);
            //$pendingrequests = $this->Common->pending_requests($orgdata["OrgRequest"], $status_orgrequest);
            $pendingrequescounter = $this->OrgRequest->find("count", array("conditions" => array("organization_id" => $id, "status" => 0)));
            $uploadedemssage = "";
            $user_role = array(3, 2);
            $totalusers = $this->Common->getusersfororg($id, $user_role);
            $endorsementformonth = $this->Common->endorsementformonth($id);
            //============================data on post request
            if ($this->request->is("post")) {
                
            }
            // get active and inactive  user
            $params = array();
            $params['conditions'] = array("organization_id" => $id, "UserOrganization.status" => array($statusConfig['active'], $statusConfig['eval']));

            $params['fields'] = array("COUNT(UserOrganization.user_id) as count");
            $userOrgStats = $this->UserOrganization->find("all", $params);

            $activeusercount = $userOrgStats[0][0]["count"];
            $params['conditions'] = array("organization_id" => $id, "UserOrganization.status" => array($statusConfig['inactive']));
            $userOrgStatsinactive = $this->UserOrganization->find("all", $params);
            $inactiveusercount = $userOrgStatsinactive[0][0]["count"];
               foreach ($orgdata['Transactions'] as $transaction) {
                        if($transaction["status"]=="canceled"){
                           $adminusr[]=$transaction["user_id"]; 
                        }
                        
                }
            $adminusrarray = array();
            if (!empty($adminusr)) {
                
                $params['fields'] = array("User.fname,User.lname,User.id");
                $params['conditions'] = array("id" => $adminusr);
                $userOrgarray = $this->User->find("all", $params);

                foreach ($userOrgarray as $val) {
                    $adminusrarray[$val["User"]["id"]] = $val["User"]["fname"] . " " . $val["User"]["lname"];
                }
            }
            // end

            $this->set(compact('totalusers', 'adminusrarray', 'activeusercount', 'inactiveusercount', 'orgdata', 'coredata', 'org_user_data', 'uploadedemssage', 'invitations_array', 'pendingrequescounter', 'invitation_pending', 'invitation_accepted', 'endorsementformonth', 'corevalueendorsedcounter', 'totalrecords', 'countermonthlyendorsements', 'totalendorsements'));
            $this->set('authUser', $this->Auth->user());
        }
    }

    public function bulkusertemplate() {
        $result = array();
        $filename = "bulkuser_template.csv";
        $fp = fopen('php://output', 'w');
        //$result = $this->User->getColumnTypes();

        $result = array("EmployeeID", "FirstName", "LastName", "Suffix", "Department", "Title", "Email", "MobilePhone", "Inactive {1:Yes,0:No }", "SendInvitation{1:Yes,0:No}");
//        foreach ($removefields as $remove) {
//            unset($result[$remove]);
//        }
        //changed dob format
        //$result[3] = "dob(format should be YYYY-MM-DD)";
        //array_push($result, "departments", "entities", "jobtitles");
        header('Content-type: application/csv');
        header('Content-Disposition: attachment; filename=' . $filename);
        fputcsv($fp, $result);
        exit;
    }

    //============================BULK LINK IMPORTS TEMPLATE
    function bulklinkimportstemp() {
        $id = $this->params->params['pass'][0];
        $this->User->bindModel(array(
            'hasOne' => array(
                'UserOrganization' => array(
                    "className" => "UserOrganization"
                //'foreignKey' => false,
                //'conditions' => array('UserOrganization.user_id = User.id'),
                //'type' => 'INNER',
                ),
            )
        ));
        $filename = "bulklinkimports_tmeplate.csv";
        $fp = fopen("php://output", "w");
        $header = array("Email", "Links");
        $results = $this->User->find("all", array("fields" => array("User.email"), "conditions" => array("UserOrganization.organization_id" => $id, "UserOrganization.user_role" => array(3, 4), "UserOrganization.status" => array(0, 1, 3))));
        header('Content-type: application/csv');
        header('Content-Disposition: attachment; filename=' . $filename);
        fputcsv($fp, $header);
        foreach ($results as $result) {
            fputcsv($fp, $result['User']);
        }
        fclose($fp);
        exit();
    }

    function liveendorsement($organization_id = "null") {
        $result = $this->Common->checkorgid($organization_id);
        //=============to redirect if orgid is wrong
        if ($result == "redirect") {
            $this->redirect(array("controller" => "organizations", "action" => "index"));
        }
        $authUser = $this->Auth->User();
        $this->loadModel("Endorsement");
        $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseReplies')));
        $this->Organization->bindModel(array(
            'hasMany' => array(
                "Endorsement" => array(
                    "className" => "Endorsement",
                    'order' => 'created DESC',
                    'conditions' => array("Endorsement.type!='private'"),
                    'limit' => 20
                ),
                "Invite" => array(
                    "className" => "Invite"
                ),
                "UserOrganization" => array(
                    "className" => "UserOrganization"
                )
            )
                )
        );

        $this->Organization->recursive = 2;
        //====defining company detail variable
        $companydetail["totalusers"] = 0;
        $companydetail["totalusers"] = 0;
        $companydetail["invitation_sent"] = 0;
        $companydetail["invitation_accepted"] = 0;
        $orgdata = $this->Organization->findById($organization_id);
        $totalrecords = $this->Endorsement->find("count", array("conditions" => array("organization_id" => $organization_id)));
        $departments = $this->Common->getorgdepartments($organization_id);
        $entities = $this->Common->getorgentities($organization_id);
        $orgcorevaluesandcode = $this->Common->getorgcorevaluesandcode($organization_id);
        $allvalues = array("department" => $departments, "entities" => $entities, "orgcorevaluesandcode" => $orgcorevaluesandcode);
        $userorg = $orgdata["UserOrganization"];
        $totalinvitationsaccepted = $this->Common->userorgcounter($userorg);
        $invitationpending = $this->Common->invitations_fetching($orgdata);
        $companydetail = $this->Common->getcompanyinformation($orgdata["Organization"]);
        $invitationaccepted = $totalinvitationsaccepted["web"] + $totalinvitationsaccepted["app"];
        $companydetail["invitation_sent"] = $invitationpending["total_invitations_sent"] + $invitationaccepted;
        $companydetail["invitation_accepted"] = $invitationaccepted;
        $user_role = array(3, 4);
        $companydetail["totalusers"] = $this->Common->getusersfororg($organization_id, $user_role);

        //=================finding endorsed id detail
        $endorsementformonth = 0;
        $userid = array();

        foreach ($orgdata["Endorsement"] as $endorsementdata) {
            //=====finding endorsement for the month
//            if ((date("m", strtotime($endorsementdata["created"])) == date("m")) && (date("y", strtotime($endorsementdata["created"])) == date("y"))) {
//                $endorsementformonth++;
//            }
            $userid[] = $endorsementdata["endorser_id"];
            if ($endorsementdata["endorsement_for"] == "user") {
                $userid[] = $endorsementdata["endorsed_id"];
            }
        }
        $companydetail["endorsementformonth"] = $this->Common->endorsementformonth($organization_id);
        //$companydetail["endorsementformonth"] = $endorsementformonth;
        if (!empty($userid)) {
            $totaluserdetails = $this->User->find("all", array("conditions" => array("id" => $userid), "fields" => array("id", "fname", "lname", "image")));
            foreach ($totaluserdetails as $userdetail) {
                $userdetails[$userdetail["User"]["id"]] = $userdetail;
            }
        }
        $this->set(compact("authUser", "companydetail", "orgdata", "allvalues", "userdetails", "endorserdetail", "totalrecords"));
    }

    function reportsandcharts($organization_id = "null") {
        $result = $this->Common->checkorgid($organization_id);
        //=============to redirect if orgid is wrong
        if ($result == "redirect") {
            $this->redirect(array("controller" => "organizations", "action" => "index"));
        }
        $startdate = "";
        $enddate = "";
        if (!empty($this->request->data["startdaterandc"]) && !empty($this->request->data["enddaterandc"])) {
            $requestdata = $this->request->data;
            $startdate = $this->Common->dateConvertServer($requestdata["startdaterandc"]);
            $enddate = $this->Common->dateConvertServer($requestdata["enddaterandc"]);
        }
        $this->loadModel("OrgDepartment");
        $this->loadModel("Endorsement");
        $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseReplies', 'EndorseCoreValues')));
        $authUser = $this->Auth->User();
        $this->UserOrganization->unbindModel(array('belongsTo' => array('Organization')));
        //=========means number of guys he endorse
        $conditionscountendorsement = array('organization_id' => $organization_id);
        if ($startdate != "" and $enddate != "") {
            array_push($conditionscountendorsement, "date(created) between '$startdate' and '$enddate'");
        }

        //===============binding model conditions
        $this->Common->commonleaderboardbindings($conditionscountendorsement);
        $this->UserOrganization->recursive = 2;
        $endorsementdata = $this->UserOrganization->find("all", array("order" => "User.fname", "conditions" => array("UserOrganization.organization_id" => $organization_id, "UserOrganization.status" => array(0, 1, 2, 3), "UserOrganization.user_role" => array(2, 3, 4))));
        //===================endorsement by day graph
        $conditionsendorsementbyday = array("organization_id" => $organization_id);
        if ($startdate != "" and $enddate != "") {
            array_push($conditionsendorsementbyday, "date(created) between '$startdate' and '$enddate'");
        }
        $endorsementbyday = $this->Endorsement->find("all", array("conditions" => $conditionsendorsementbyday, "group" => "date(Endorsement.created)", "fields" => array("count(*) as cnt", "date(created) as cdate")));
        //=============endorsement by department
        $params['fields'] = "count(Endorsement.endorsed_id) as cnt,OrgDepartments.name as department, OrgDepartments.id as department_id";
        $conditionarray["Endorsement.organization_id"] = $organization_id;
        $conditionarray["Endorsement.endorsement_for"] = "department";
        if ($startdate != "" and $enddate != "") {
            array_push($conditionarray, "date(Endorsement.created) between '$startdate' and '$enddate'");
        }
        $params['conditions'] = $conditionarray;
        $params['joins'] = array(
            array(
                'table' => 'org_departments',
                'alias' => 'OrgDepartments',
                'type' => 'LEFT',
                'conditions' => array(
                    'OrgDepartments.id = Endorsement.endorsed_id'
                )
            )
        );
        $params['order'] = 'cnt desc';


        $params['group'] = 'Endorsement.endorsed_id';
        $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseCoreValues', 'EndorseReplies')));
        $leaderboard = $this->Endorsement->find("all", $params);
        
        /*endorsement by all data*/
        //=dont delete, archit
        /*
        
        //=======final data from endorsement table
        $GraphByDeptEndorsementTable = array();
        if (!empty($leaderboard)) {
            foreach ($leaderboard as $dataleaderboard) {
                $GraphByDeptEndorsementTable[$dataleaderboard["OrgDepartments"]["department_id"]] = $dataleaderboard[0]["cnt"];
            }
        }



        $this->Common->bindmodelcommonjobtitle();
        $departments = $this->Common->getorgdepartments($organization_id);
        $departmentsid = array_keys($departments);
        
        $conditionsdepartments = array(
            "UserOrganization.department_id" => $departmentsid,
            //"UserOrganization.organization_id" => $organization_id,
            //"UserOrganization.status" => 1, 
            "Endorsement.organization_id" => $organization_id,
                //"Endorsement.endorsement_for" => "user"   
        );
        if ($startdate != "" and $enddate != "") {
            array_push($conditionsdepartments, "date(Endorsement.created) between '$startdate' and '$enddate'");
        }
        //=============using below query
        /* select user_organizations.job_title_id, count(*) from user_organizations inner join endorsements on user_organizations.user_id = endorsements.endorser_id where endorsements.organization_id = 335 and  user_organizations.job_title_id in (550,551,552) and user_organizations.organization_id  = 335 and  user_organizations.status = 1  group by  user_organizations.job_title_id
          select user_organizations.job_title_id, count(*) from user_organizations inner join endorsements on user_organizations.user_id = endorsements.endorsed_id  where endorsements.organization_id = 335 and endorsements.endorsement_for = "user" and  user_organizations.job_title_id in (550,551,552) and user_organizations.organization_id  = 335 and  user_organizations.status = 1  group by  user_organizations.job_title_id
         * 
        
        //=============using below query
        $groupdepartment = array("UserOrganization.department_id");
        $fieldsdepartment = array("UserOrganization.department_id", "count(DISTINCT Endorsement.id) as cnt");
        //$this->UserOrganization->virtualfield["counterjobtitle"] = ""
        $deparmentendorsed = $this->UserOrganization->find("all", array("conditions" => $conditionsdepartments, "group" => $groupdepartment, "fields" => $fieldsdepartment));
        //====final data from 
        $GraphByDeptUserOrgTable = array();
        if (!empty($deparmentendorsed)) {
            foreach ($deparmentendorsed as $datadepartmentendorsed) {
                $GraphByDeptUserOrgTable[$datadepartmentendorsed["UserOrganization"]["department_id"]] = $datadepartmentendorsed[0]["cnt"];
                //$GraphByDeptUserOrgTable[] = array("deptid" => $datadepartmentendorsed["UserOrganization"]["department_id"], "counter" => $datadepartmentendorsed[0]["cnt"]);
            }
        }
       
        
        $loopvalueone = (count($GraphByDeptEndorsementTable) >= count($GraphByDeptUserOrgTable)) ? $GraphByDeptEndorsementTable : $GraphByDeptUserOrgTable;
        $loopvaluetwo = (count($GraphByDeptEndorsementTable) < count($GraphByDeptUserOrgTable)) ? $GraphByDeptEndorsementTable : $GraphByDeptUserOrgTable;
        //=========different keys for array than other
        $resultantendorsementbyDept = array_diff_key($loopvaluetwo, $loopvalueone);
        
        foreach ($loopvalueone as $key => $value) {
            $resultantendorsementbyDept[$key] = $value;
            if (array_key_exists($key, $loopvaluetwo)) {
                $resultantendorsementbyDept[$key] = $value + $loopvaluetwo[$key];
            }
        }
        
        $allvaluesfordeptandentity = array("department" => $departments);


        /*$conditionsfordepartment["UserOrganization.organization_id"] = $organization_id;

        $conditionsfordepartment["UserOrganization.department_id"] = array_keys($departments);
        $this->UserOrganization->unbindModel(array('belongsTo' => array('Organization', 'User')));

        $userorgdata = $this->UserOrganization->find("all", array("conditions" => $conditionsfordepartment, "fields" => array("UserOrganization.user_id, UserOrganization.department_id")));
*/

        /**/

        //=================end of endorsement by day graph
        $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseCoreValues', 'EndorseReplies')));
        $paramsdepthistory["conditions"] = array("Endorsement.organization_id" => $organization_id, "Endorsement.endorsement_for" => "department");
        $paramsdepthistory["fields"] = ("*");
        $paramsdepthistory["group"] = ("WEEKOFYEAR(date(Endorsement.created)), Endorsement.endorsed_id");
        if ($startdate != "" and $enddate != "") {
            array_push($paramsdepthistory["conditions"], "date(Endorsement.created) between '$startdate' and '$enddate'");
        }
        $this->Endorsement->virtualFields['weekdepartment'] = "WEEKOFYEAR(date(Endorsement.created))";
        $this->Endorsement->virtualFields['yeardepartment'] = "year(date(Endorsement.created))";
        $this->Endorsement->virtualFields['endorseddepartment'] = "count(Endorsement.endorsed_id)";

        $this->Endorsement->bindModel(array(
            'hasOne' => array(
                'OrgDepartment' => array(
                    'className' => 'OrgDepartment',
                    'foreignKey' => false,
                    'conditions' => array("OrgDepartment.id = Endorsement.endorsed_id"),
                )
        )));

        $endorsementbydeptweek = $this->Endorsement->find("all", $paramsdepthistory);


        unset($this->Endorsement->virtualFields['weekdepartment']);
        unset($this->Endorsement->virtualFields['yeardepartment']);
        unset($this->Endorsement->virtualFields['endorseddepartment']);

        //pr($endorsementbydeptweek);
        $startofweekarray = "";
        $counter = "";
        //pr($endorsementbydeptweek);
        $dept_array = array();
        $date_array = array();
        foreach ($endorsementbydeptweek as $endorsementdeptweek) {
            $dept_array[] = $deptname = $endorsementdeptweek["OrgDepartment"]["name"];
            $date_array[] = $startofweekarray = $this->Common->getStartAndEndDate($endorsementdeptweek["Endorsement"]["weekdepartment"], $endorsementdeptweek["Endorsement"]["yeardepartment"]);
            $counter[$startofweekarray][$deptname] = (int) $endorsementdeptweek["Endorsement"]["endorseddepartment"];
            //$startofweekarray[] = $this->Common->getStartAndEndDate($endorsementdeptweek["Endorsement"]["weekdepartment"], $endorsementdeptweek["Endorsement"]["yeardepartment"]);
        }
        //============to take date array as unique
        $date_array = array_unique($date_array);
        $dept_array = array_unique($dept_array);
        $server_data = array();
        foreach ($dept_array as $deptname) {
            foreach ($counter as $key => $data) {
                $dept = array_keys($data);
                if (!in_array($deptname, $dept)) {
                    $data = 0;
                } else {
                    $data = $counter[$key][$deptname];
                }
                $server_data[$deptname][] = $data;
            }
        }
        foreach ($date_array as $key => $converteddatearray) {
            $converted_date_array[$key] = $this->Common->dateConvertDisplay($converteddatearray);
        }
        #pr($server_data);
        #pr($counter);die;
        if (!empty($counter)) {
            $counter = $server_data;
            $counter = json_encode(array('counter' => $counter, 'date_array' => $converted_date_array));
        }

        $orgdata = $this->Organization->findById($organization_id);
        $companydetail = $this->Common->getcompanyinformation($orgdata["Organization"]);

        //=====common array to be used in export
        $arrayendorsementdetail = $this->Common->arrayforendorsementdetail($endorsementdata);
        $this->Session->write('orgid', $organization_id);
        $this->Session->write('datearray', array("startdate" => $startdate, "enddate" => $enddate));

        //=========================chart 5 endorsement by job title
        //========bind model functionality in common
        $this->Common->bindmodelcommonjobtitle();
        $jobtitles = $this->Common->getorgjobtitles($organization_id);
        $jobtitlesid = array_keys($jobtitles);

        $conditionsjobtitles = array(
            "UserOrganization.job_title_id" => $jobtitlesid,
            "UserOrganization.organization_id" => $organization_id,
            //"UserOrganization.status" => 1, 
            "Endorsement.organization_id" => $organization_id,
                //"Endorsement.endorsement_for" => "user"   
        );
        if ($startdate != "" and $enddate != "") {
            array_push($conditionsjobtitles, "date(Endorsement.created) between '$startdate' and '$enddate'");
        }
        //=============using below query
        /* select user_organizations.job_title_id, count(*) from user_organizations inner join endorsements on user_organizations.user_id = endorsements.endorser_id where endorsements.organization_id = 335 and  user_organizations.job_title_id in (550,551,552) and user_organizations.organization_id  = 335 and  user_organizations.status = 1  group by  user_organizations.job_title_id
          select user_organizations.job_title_id, count(*) from user_organizations inner join endorsements on user_organizations.user_id = endorsements.endorsed_id  where endorsements.organization_id = 335 and endorsements.endorsement_for = "user" and  user_organizations.job_title_id in (550,551,552) and user_organizations.organization_id  = 335 and  user_organizations.status = 1  group by  user_organizations.job_title_id */
        //=============using below query
        $groupjobtitle = array("UserOrganization.job_title_id");
        $fieldsjobtitle = array("UserOrganization.job_title_id", "count(DISTINCT Endorsement.id)");
        //$this->UserOrganization->virtualfield["counterjobtitle"] = ""
        $jobtitledataendorsed = $this->UserOrganization->find("all", array("conditions" => $conditionsjobtitles, "group" => $groupjobtitle, "fields" => $fieldsjobtitle));

        $jbiddata = array();
        foreach ($jobtitledataendorsed as $endorserjbdata) {
            $jbiddata[$endorserjbdata["UserOrganization"]["job_title_id"]] = $endorserjbdata[0]["count(DISTINCT Endorsement.id)"];
        }

        $detailedjobtitlechart = array("data" => $jbiddata, "jobtitles" => $jobtitles);

        //=======================end job title chart 5
        //======================chart 6 for endorsement by entity/ suborganizations
        $entityarray = $this->Common->getorgentities($organization_id);
        $conditionsentity = array("Endorsement.endorsement_for" => "entity", "Endorsement.organization_id" => $organization_id);
        if ($startdate != "" and $enddate != "") {
            array_push($conditionsentity, "date(Endorsement.created) between '$startdate' and '$enddate'");
        }
        $fieldsentity = array("Endorsement.endorsed_id, count(*)");
        $groupentity = array("Endorsement.endorsed_id");
        $entityiddata = array();
        $endorsementdataentity = $this->Endorsement->find("all", array("conditions" => $conditionsentity, "group" => $groupentity, "fields" => $fieldsentity));
        foreach ($endorsementdataentity as $entitydata) {
            $entityiddata[$entitydata["Endorsement"]["endorsed_id"]] = $entitydata[0]["count(*)"];
        }
        $detailedentitychart = array("data" => $entityiddata, "entites" => $entityarray);

        //======================end chart 6 for endorsement by entity/ suborganizations
        $datesarray = array("startdate" => $startdate, "enddate" => $enddate);
        $this->set(compact("authUser", "organization_id", "arrayendorsementdetail", 'companydetail', 'endorsementbyday', 'leaderboard', 'counter', 'startofweekarray', 'datesarray', 'allvaluesendorsement', 'orgcorevaluesandcode', 'detailedjobtitlechart', 'detailedentitychart', 'resultantendorsementbyDept', 'allvaluesfordeptandentity'));
    }

    function allendorsements($organization_id = "null") {
        $result = $this->Common->checkorgid($organization_id);
        //=============to redirect if orgid is wrong
        if ($result == "redirect") {
            $this->redirect(array("controller" => "organizations", "action" => "index"));
        }
        $this->loadModel("Endorsement");
        $this->loadModel("User");
        $startdate = "";
        $enddate = "";
        if (!empty($this->request->data["startdaterandc"]) && !empty($this->request->data["enddaterandc"])) {
            $requestdata = $this->request->data;
            $startdate = $this->Common->dateConvertServer($requestdata["startdaterandc"]);
            $enddate = $this->Common->dateConvertServer($requestdata["enddaterandc"]);
        }
        $this->Session->write('orgid', $organization_id);
        $this->Session->write('datearray', array("startdate" => $startdate, "enddate" => $enddate));
        $authUser = $this->Auth->User();
        $orgdata = $this->Organization->findById($organization_id);
        $companydetail = $this->Common->getcompanyinformation($orgdata["Organization"]);
        //=======================================endorsement all feature
        $orgcorevaluesandcode = $this->Common->getorgcorevaluesandcode($organization_id);
        $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseReplies')));
        $condtionsallendorsement = array("organization_id" => $organization_id);
        if ($startdate != "" and $enddate != "") {
            array_push($condtionsallendorsement, "date(Endorsement.created) between '$startdate' and '$enddate'");
        }

        $allendorsement = $this->Endorsement->find("all", array("order" => "Endorsement.created DESC", "conditions" => $condtionsallendorsement));

        $departments = $this->Common->getorgdepartments($organization_id);
        $entities = $this->Common->getorgentities($organization_id);
        $allvaluesendorsement = $this->Common->allvaluesendorsement($allendorsement, $departments, $entities);
        $jobtitles = $this->Common->getorgjobtitles($organization_id);
        //=======================================end endorsement all feature
        $datesarray = array("startdate" => $startdate, "enddate" => $enddate);
        $this->set(compact("authUser", "organization_id", "companydetail", 'allvaluesendorsement', 'orgcorevaluesandcode', 'datesarray', 'jobtitles', 'departments', 'entities'));
    }

    function listingreports($user_id = "null") {
        $this->loadModel("Endorsement");
        $authUser = $this->Auth->User();
        $organization_id = $this->Session->read('orgid');
        $datearray = $this->Session->read('datearray');

        $orgdata = $this->Organization->findById($organization_id);
        $companydetail = $this->Common->getcompanyinformation($orgdata["Organization"]);
        $departments = $this->Common->getorgdepartments($organization_id);
        $entities = $this->Common->getorgentities($organization_id);
        $orgcorevaluesandcode = $this->Common->getorgcorevaluesandcode($organization_id);
        $allothervalues = array(
            "departments" => $departments,
            "entities" => $entities,
            "corevalues" => $orgcorevaluesandcode,
        );
        $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseReplies')));

        $conditionsendorser = array("organization_id" => $organization_id, "endorser_id" => $user_id);
        $conditionsendorsed = array("organization_id" => $organization_id, "endorsed_id" => $user_id);
        if ($datearray["startdate"] != "" and $datearray["enddate"] != "") {
            $startdate = $datearray["startdate"];
            $enddate = $datearray["enddate"];
            array_push($conditionsendorser, "date(Endorsement.created) between '$startdate' and '$enddate'");
            array_push($conditionsendorsed, "date(Endorsement.created) between '$startdate' and '$enddate'");
        }
        //=================endorsement he got
        $endorser_data = $this->Endorsement->find("all", array("conditions" => $conditionsendorser));
        $endorsed_data = $this->Endorsement->find("all", array("conditions" => $conditionsendorsed));
        //pr($endorsed_data);
        $endorsernamedetail = "";
        $allvaluesendorser = $this->Common->allvaluesendorser($endorser_data, $departments, $entities);
        $allvaluesendorsed = $this->Common->allvaluesendorsed($endorsed_data);
        $userdata = $this->User->findById($user_id);
        $this->set(compact("authUser", "organization_id", "arrayendorsementdetail", "allvaluesendorser", "allothervalues", "allvaluesendorsed", "companydetail", "user_id", 'userdata'));
    }

    public function announcements() {
        $orgdata = $this->Organization->find("all");
        $logged_in_user_role = $this->Auth->user('role');
        $logged_in_user_id = $this->Auth->user('id');
        if ($logged_in_user_id <= 1) {
            $this->Auth->logout();
            $this->redirect(array('controller' => 'users', 'action' => 'login'));
        } else {
            if ($logged_in_user_role > 1) {
                $this->LoadModel("UserOrganization");
                $conditions = array("user_id" => $logged_in_user_id, "user_role" => 2, 'UserOrganization.status' => 1, "Organization.announcement_status" => 1);
                $userorgdata = $this->UserOrganization->find("all", array("conditions" => $conditions));
            }
        }
        if ($this->request->is('post')) {
            $organizationslist = array();
            $content = $this->request->data['User']["mailingbox"];
            if (isset($this->request->data['User']["Organizations"])) {
                $organizationslist = $this->request->data['User']["Organizations"];
            }
            //==common announcement form method for admin and superadmin
            $this->Common->announcementspostdata($organizationslist, $content);
            
//            exec( "php ".WWW_ROOT."cron_scheduler.php /cron/globalemailcron/ > /dev/null &");
            exec("wget -bqO- " . Router::url('/', true) . "/cron/globalemailcron &> /dev/null");
            
            $this->redirect(array("controller" => "organizations", "action" => "announcements"));
        }
        $this->set(compact('userorgdata'));
    }

    public function export() {
        ob_start();
        $result = array();
        $filename = "usersreports_template.csv";
        $fp = fopen('php://output', 'w');
        //$result = $this->User->getColumnTypes();
        $this->loadModel("Endorsement");
        $datearray = array("startdate" => "", "enddate" => "");
        if ($this->Session->read('datearray')) {
            $datearray = $this->Session->read('datearray');
        }
        $organization_id = isset($this->request->query['orgid']) ? $this->request->query['orgid'] : null;
        $user_id = isset($this->request->query['userid']) ? $this->request->query['userid'] : null;
        $information = isset($this->request->query['information']) ? $this->request->query['information'] : null;
        $departments = $this->Common->getorgdepartments($organization_id);
        $entities = $this->Common->getorgentities($organization_id);
        $orgcorevaluesandcode = $this->Common->getorgcorevaluesandcode($organization_id);
        $allothervalues = array(
            "departments" => $departments,
            "entities" => $entities,
            "corevalues" => $orgcorevaluesandcode,
        );
        $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseReplies')));
        if ($information == "endorsed" || $information == "endorser") {
            $result = array("Endorsed", "Endorsement Date", "Total Points");
            if (!empty($allothervalues["corevalues"])) {
                foreach ($allothervalues["corevalues"] as $key => $corevaluesall) {
                    array_push($result, $corevaluesall["name"]);
                }
                array_push($result, "Comments");
            }
            fputcsv($fp, $result);
        }

        if ($information == "endorser") {
            $conditionsendorser = array("organization_id" => $organization_id, "endorser_id" => $user_id);
            if ($datearray["startdate"] != "" and $datearray["enddate"] != "") {
                $startdate = $datearray["startdate"];
                $enddate = $datearray["enddate"];
                array_push($conditionsendorser, "date(Endorsement.created) between '$startdate' and '$enddate'");
            }
            $endorser_data = $this->Endorsement->find("all", array("conditions" => $conditionsendorser));
            $allvaluesendorser = $this->Common->allvaluesendorser($endorser_data, $departments);
            if (!empty($allvaluesendorser)) {
                foreach ($allvaluesendorser as $endorservalues) {
                    $date = new DateTime($endorservalues["date"]);
                    $endorservalues["date"] = $date->format('Y-m-d');
                    $result = array($endorservalues["name"], $endorservalues["date"], $endorservalues["totalpoints"]);
                    foreach ($allothervalues["corevalues"] as $key => $corevaluesall) {
                        if (in_array($key, $endorservalues["corevaluesid"])) {
                            array_push($result, "YES");
                        } else {
                            array_push($result, "NO");
                        }
                    }
                    array_push($result, $endorservalues["endorsement_message"]);
                    fputcsv($fp, $result);
                }
            }
        } else if ($information == "endorsed") {
            $conditionsendorsed = array("organization_id" => $organization_id, "endorsed_id" => $user_id);
            if ($datearray["startdate"] != "" and $datearray["enddate"] != "") {
                $startdate = $datearray["startdate"];
                $enddate = $datearray["enddate"];
                array_push($conditionsendorsed, "date(Endorsement.created) between '$startdate' and '$enddate'");
            }
            $endorsed_data = $this->Endorsement->find("all", array("conditions" => $conditionsendorsed));
            //pr($endorsed_data);
            $endorsernamedetail = "";
            $allvaluesendorsed = $this->Common->allvaluesendorsed($endorsed_data);
            if (!empty($allvaluesendorsed)) {
                foreach ($allvaluesendorsed as $endorsedvalues) {
                    $date = new DateTime($endorsedvalues["date"]);
                    $endorsedvalues["date"] = $date->format('Y-m-d');
                    $result = array($endorsedvalues["name"], $endorsedvalues["date"], $endorsedvalues["totalpoints"]);
                    foreach ($allothervalues["corevalues"] as $key => $corevaluesall) {
                        if (in_array($key, $endorsedvalues["corevaluesid"])) {
                            array_push($result, "YES");
                        } else {
                            array_push($result, "NO");
                        }
                    }
                    array_push($result, $endorsedvalues["endorsed_message"]);
                    fputcsv($fp, $result);
                }
            }
        } else if ($information == "leaderboard") {
            $this->loadModel("OrgDepartment");
            $this->loadModel("Endorsement");
            $searchedvalue = isset($this->request->query['searchvalue']) ? $this->request->query['searchvalue'] : "";
            $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseReplies', 'EndorseCoreValues')));
            $this->UserOrganization->unbindModel(array('belongsTo' => array('Organization')));
            //=========means number of guys he endorse
            $conditionscountendorsement = array('organization_id' => $organization_id);
            if ($datearray["startdate"] != "" and $datearray["enddate"] != "") {
                $startdate = $datearray["startdate"];
                $enddate = $datearray["enddate"];
                array_push($conditionscountendorsement, "date(created) between '$startdate' and '$enddate'");
            }
            //===============binding model conditions
            $this->Common->commonleaderboardbindings($conditionscountendorsement);
            $this->UserOrganization->recursive = 2;
            $endorsementdata = $this->UserOrganization->find("all", array("conditions" => array("UserOrganization.organization_id" => $organization_id, "UserOrganization.status" => array(0, 1, 2, 3), "UserOrganization.user_role" => array(2, 3, 4))));
            $arrayendorsementdetail = $this->Common->arrayforendorsementdetail($endorsementdata);
            //pr($endorsementdata);
            $result = array("Name", "Endorser", "Endorsed", "Total", "Department", "Entity");
            fputcsv($fp, $result);
            if (!empty($arrayendorsementdetail)) {
                foreach ($arrayendorsementdetail as $endorsementdetail) {
                    $result = array($endorsementdetail["name"], $endorsementdetail["endorser"], $endorsementdetail["endorsed"], $endorsementdetail["endorsed"] + $endorsementdetail["endorser"], $endorsementdetail["department"], $endorsementdetail["entity"]);
                    fputcsv($fp, $result);
                }
            }
        } else if ($information = "allendorsement") {
            $startdate = "";
            $enddate = "";
            if (!empty($this->request->data["startdaterandc"]) && !empty($this->request->data["enddaterandc"])) {
                $requestdata = $this->request->data;
                $startdate = $requestdata["startdaterandc"];
                $enddate = $requestdata["enddaterandc"];
            }
            $this->Endorsement->unbindModel(array('hasMany' => array('EndorseAttachments', 'EndorseReplies')));
            $condtionsallendorsement = array("organization_id" => $organization_id);
            if ($startdate != "" and $enddate != "") {
                array_push($condtionsallendorsement, "date(Endorsement.created) between '$startdate' and '$enddate'");
            }

            $allendorsement = $this->Endorsement->find("all", array("order" => "Endorsement.created DESC", "conditions" => $condtionsallendorsement));
            //pr($endorsed_data);

            $allvaluesendorsement = $this->Common->allvaluesendorsement($allendorsement, $departments, $entities);
            $result = array("Endorser", "Endorsed", "Endorsement Date", "Total Points");
            if (!empty($allothervalues["corevalues"])) {
                foreach ($allothervalues["corevalues"] as $key => $corevaluesall) {
                    array_push($result, $corevaluesall["name"]);
                }
                array_push($result, "Comments");
            }
            fputcsv($fp, $result);
            if (!empty($allvaluesendorsement)) {
                $ctr = 0;
                foreach ($allvaluesendorsement as $endorsedvalues) {
                    $ctr++;
                    if ($ctr % 100 == 0) {
                        //flush();
                        //pr($result);
                        // break;
                    }

                    $date = new DateTime($endorsedvalues["date"]);
                    $endorsedvalues["date"] = $date->format('Y-m-d');
                    $result = array(
                        $endorsedvalues["endorsername"],
                        $endorsedvalues["endorsedname"],
                        $endorsedvalues["date"],
                        $endorsedvalues["totalpoints"]
                    );
                    foreach ($allothervalues["corevalues"] as $key => $corevaluesall) {
                        if (in_array($key, $endorsedvalues["corevaluesid"])) {
                            array_push($result, "YES");
                        } else {
                            array_push($result, "NO");
                        }
                    }
                    array_push($result, $endorsedvalues["endorsement_message"]);
                    #pr($result);die;
                    fputcsv($fp, $result);
                }
            }
        }

        //=============start creating data for csv file
        header('Content-type: application/csv');
        header('Content-Disposition: attachment; filename=' . $filename);
        exit;
    }

}
